{-# OPTIONS --without-K --rewriting #-}

open import SmashCommon
open import SmashDefs

module GeneratedCodePart3 {i : ULevel} where

open import GeneratedCodePart1 {i}
open import GeneratedCodePart2 {i}

&hexagon-proj-basel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → x1 == a
&hexagon-proj-basel X idp idp = idp

&aphexagon-proj-basel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Square (ap f (&hexagon-proj-basel X p0 p1)) (&hexagon-proj-basel Y (ap f p0) (ap f p1)) idp idp
&aphexagon-proj-basel f idp idp = ids

&hexagon-proj-basel□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) → Square (&hexagon-proj-basel X up0 up1) (&hexagon-proj-basel X vp0 vp1) x1 a
&hexagon-proj-basel□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap/hexagon-proj-basel : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) → Cube (ap+ (λ x → &hexagon-proj-basel Y (p0 x) (p1 x)) r) (&hexagon-proj-basel□ Y (ap+ p0 r) (ap+ p1 r)) (&hids (&hexagon-proj-basel Y (p0 y) (p1 y))) (&hids (&hexagon-proj-basel Y (p0 z) (p1 z))) (&hids (ap x1 r)) (&hids (ap a r))
ap/hexagon-proj-basel {Y = Y} {y = y} idp p0 p1 = &ap/hexagon-proj-basel-lemma Y (p0 y) (p1 y)  where
  &ap/hexagon-proj-basel-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&hids (&hexagon-proj-basel X p0 p1)) (&hexagon-proj-basel□ X (&hids p0) (&hids p1)) (&hids (&hexagon-proj-basel X p0 p1)) (&hids (&hexagon-proj-basel X p0 p1)) ids ids
  &ap/hexagon-proj-basel-lemma X idp idp = idc

&hexagon-proj-basel□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) → Square x1 a (&hexagon-proj-basel X up0 up1) (&hexagon-proj-basel X vp0 vp1)
&hexagon-proj-basel□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap+hexagon-proj-basel : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (ap+ α (&hexagon-proj-basel X p0 p1)) (&hexagon-proj-basel□' Y (ap+ α p0) (ap+ α p1)) (&hids (α x1)) (&hids (α a)) (&aphexagon-proj-basel f p0 p1) (&aphexagon-proj-basel g p0 p1)
ap+hexagon-proj-basel α {a = a} idp idp = ap+hexagon-proj-basel-lemma (α a)  where
  ap+hexagon-proj-basel-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&hexagon-proj-basel□' X (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+hexagon-proj-basel-lemma idp = idc

&aphexagon-proj-basel-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&aphexagon-proj-basel (λ _ → y) p0 p1) ids (ap-cst y (&hexagon-proj-basel X p0 p1)) (&hexagon-proj-basel□ Y (ap-cst y p0) (ap-cst y p1)) ids ids
&aphexagon-proj-basel-cst y idp idp = idc

&hexagon-proj-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : a == a} (p3 : Square x3 (&∧-map-gluer X p0 p0 idp) idp idp) {x4 : x2 == a} (p4 : Square x4 (&∧-map-gluer X p0 p2 idp) idp idp) {x5 : x2 == a} (p5 : Square x5 (&α-proj-gluer X x3 x4) idp idp) {x6 : x2 == a} (p6 : Square x6 x5 idp idp) {x7 : x2 == a} (p7 : Square x7 x6 idp idp) {x8 : x1 == a} (p8 : Square x8 (&∧-map-gluer X p0 p1 idp) idp idp) {x9 : x1 == a} (p9 : Square x9 (&α-proj-gluer X x3 x8) idp idp) {x10 : x1 == a} (p10 : Square x10 x9 idp idp) {x11 : x1 == a} (p11 : Square x11 x10 idp idp) {x12 : x1 == x2} (p12 : Square x12 (&σ-gluel X x7 x11) idp idp) {x13 : x1 == x2} (p13 : Square x13 x12 idp idp) {x14 : x1 == x2} (p14 : Square x14 x13 idp idp) {x15 : a == a} (p15 : Square x15 (&α-gluer X p0 p0) idp idp) {x16 : a == a} (p16 : Square x16 (&σ-gluel X x15 x15) idp idp) {x17 : a == a} (p17 : Square x17 x16 idp idp) {x18 : a == a} (p18 : Square x18 x17 idp idp) {x19 : X} (p19 : x19 == x0) {x20 : x19 == a} (p20 : Square x20 (&α-gluer X p0 p19) idp idp) {x21 : x19 == a} (p21 : Square x21 (&σ-gluel X x15 x20) idp idp) {x22 : x19 == a} (p22 : Square x22 x21 idp idp) {x23 : x19 == a} (p23 : Square x23 x22 idp idp) {x24 : x19 == a} (p24 : Square x24 (&α-proj-gluer X p0 p19) idp idp) {x25 : x19 == a} (p25 : Square x24 x25 idp idp) {x26 : x1 == a} (p26 : Square x26 (&α-proj-gluer X p0 p1) idp idp) {x27 : x1 == a} (p27 : Square x26 x27 idp idp) {x28 : x1 == a} (p28 : Square x28 (&α-proj-gluel X x18 x23 x25 x27) idp idp) {x29 : x1 == a} (p29 : Square x29 x28 idp idp) {x30 : x1 == a} (p30 : Square x30 x29 idp idp) → Square idp (&hexagon-proj-basel X p0 p2) x14 x30
&hexagon-proj-gluel X idp idp idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids idp ids ids ids ids ids ids ids ids ids ids ids = ids

&aphexagon-proj-gluel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : a == a} (p3 : Square x3 (&∧-map-gluer X p0 p0 idp) idp idp) {x4 : x2 == a} (p4 : Square x4 (&∧-map-gluer X p0 p2 idp) idp idp) {x5 : x2 == a} (p5 : Square x5 (&α-proj-gluer X x3 x4) idp idp) {x6 : x2 == a} (p6 : Square x6 x5 idp idp) {x7 : x2 == a} (p7 : Square x7 x6 idp idp) {x8 : x1 == a} (p8 : Square x8 (&∧-map-gluer X p0 p1 idp) idp idp) {x9 : x1 == a} (p9 : Square x9 (&α-proj-gluer X x3 x8) idp idp) {x10 : x1 == a} (p10 : Square x10 x9 idp idp) {x11 : x1 == a} (p11 : Square x11 x10 idp idp) {x12 : x1 == x2} (p12 : Square x12 (&σ-gluel X x7 x11) idp idp) {x13 : x1 == x2} (p13 : Square x13 x12 idp idp) {x14 : x1 == x2} (p14 : Square x14 x13 idp idp) {x15 : a == a} (p15 : Square x15 (&α-gluer X p0 p0) idp idp) {x16 : a == a} (p16 : Square x16 (&σ-gluel X x15 x15) idp idp) {x17 : a == a} (p17 : Square x17 x16 idp idp) {x18 : a == a} (p18 : Square x18 x17 idp idp) {x19 : X} (p19 : x19 == x0) {x20 : x19 == a} (p20 : Square x20 (&α-gluer X p0 p19) idp idp) {x21 : x19 == a} (p21 : Square x21 (&σ-gluel X x15 x20) idp idp) {x22 : x19 == a} (p22 : Square x22 x21 idp idp) {x23 : x19 == a} (p23 : Square x23 x22 idp idp) {x24 : x19 == a} (p24 : Square x24 (&α-proj-gluer X p0 p19) idp idp) {x25 : x19 == a} (p25 : Square x24 x25 idp idp) {x26 : x1 == a} (p26 : Square x26 (&α-proj-gluer X p0 p1) idp idp) {x27 : x1 == a} (p27 : Square x26 x27 idp idp) {x28 : x1 == a} (p28 : Square x28 (&α-proj-gluel X x18 x23 x25 x27) idp idp) {x29 : x1 == a} (p29 : Square x29 x28 idp idp) {x30 : x1 == a} (p30 : Square x30 x29 idp idp) → Cube (ap² f (&hexagon-proj-gluel X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 p18 p19 p20 p21 p22 p23 p24 p25 p26 p27 p28 p29 p30)) (&hexagon-proj-gluel Y (ap f p0) (ap f p1) (ap f p2) (&coh∙□ (ap² f p3) (&ap∧-map-gluer f p0 p0 idp)) (&coh∙□ (ap² f p4) (&ap∧-map-gluer f p0 p2 idp)) (&coh∙□ (ap² f p5) (&apα-proj-gluer f x3 x4)) (ap² f p6) (ap² f p7) (&coh∙□ (ap² f p8) (&ap∧-map-gluer f p0 p1 idp)) (&coh∙□ (ap² f p9) (&apα-proj-gluer f x3 x8)) (ap² f p10) (ap² f p11) (&coh∙□ (ap² f p12) (&apσ-gluel f x7 x11)) (ap² f p13) (ap² f p14) (&coh∙□ (ap² f p15) (&apα-gluer f p0 p0)) (&coh∙□ (ap² f p16) (&apσ-gluel f x15 x15)) (ap² f p17) (ap² f p18) (ap f p19) (&coh∙□ (ap² f p20) (&apα-gluer f p0 p19)) (&coh∙□ (ap² f p21) (&apσ-gluel f x15 x20)) (ap² f p22) (ap² f p23) (&coh∙□ (ap² f p24) (&apα-proj-gluer f p0 p19)) (ap² f p25) (&coh∙□ (ap² f p26) (&apα-proj-gluer f p0 p1)) (ap² f p27) (&coh∙□ (ap² f p28) (&apα-proj-gluel f x18 x23 x25 x27)) (ap² f p29) (ap² f p30)) ids (&aphexagon-proj-basel f p0 p2) (&hids (ap f x14)) (&hids (ap f x30))
&aphexagon-proj-gluel f idp idp idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids idp ids ids ids ids ids ids ids ids ids ids ids = idc

&hexagon-proj-baser : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → x1 == a
&hexagon-proj-baser X idp idp = idp

&aphexagon-proj-baser : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Square (ap f (&hexagon-proj-baser X p0 p1)) (&hexagon-proj-baser Y (ap f p0) (ap f p1)) idp idp
&aphexagon-proj-baser f idp idp = ids

&hexagon-proj-baser□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) → Square (&hexagon-proj-baser X up0 up1) (&hexagon-proj-baser X vp0 vp1) x1 a
&hexagon-proj-baser□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap/hexagon-proj-baser : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) → Cube (ap+ (λ x → &hexagon-proj-baser Y (p0 x) (p1 x)) r) (&hexagon-proj-baser□ Y (ap+ p0 r) (ap+ p1 r)) (&hids (&hexagon-proj-baser Y (p0 y) (p1 y))) (&hids (&hexagon-proj-baser Y (p0 z) (p1 z))) (&hids (ap x1 r)) (&hids (ap a r))
ap/hexagon-proj-baser {Y = Y} {y = y} idp p0 p1 = &ap/hexagon-proj-baser-lemma Y (p0 y) (p1 y)  where
  &ap/hexagon-proj-baser-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&hids (&hexagon-proj-baser X p0 p1)) (&hexagon-proj-baser□ X (&hids p0) (&hids p1)) (&hids (&hexagon-proj-baser X p0 p1)) (&hids (&hexagon-proj-baser X p0 p1)) ids ids
  &ap/hexagon-proj-baser-lemma X idp idp = idc

&hexagon-proj-baser□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) → Square x1 a (&hexagon-proj-baser X up0 up1) (&hexagon-proj-baser X vp0 vp1)
&hexagon-proj-baser□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap+hexagon-proj-baser : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (ap+ α (&hexagon-proj-baser X p0 p1)) (&hexagon-proj-baser□' Y (ap+ α p0) (ap+ α p1)) (&hids (α x1)) (&hids (α a)) (&aphexagon-proj-baser f p0 p1) (&aphexagon-proj-baser g p0 p1)
ap+hexagon-proj-baser α {a = a} idp idp = ap+hexagon-proj-baser-lemma (α a)  where
  ap+hexagon-proj-baser-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&hexagon-proj-baser□' X (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+hexagon-proj-baser-lemma idp = idc

&aphexagon-proj-baser-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&aphexagon-proj-baser (λ _ → y) p0 p1) ids (ap-cst y (&hexagon-proj-baser X p0 p1)) (&hexagon-proj-baser□ Y (ap-cst y p0) (ap-cst y p1)) ids ids
&aphexagon-proj-baser-cst y idp idp = idc

&hexagon-proj-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : a == x4) {x5 : X} (p5 : x5 == x4) {x6 : a == a} (p6 : Square x6 (&∧-map-gluel X p0 p0 idp) idp idp) {x7 : X} (p7 : x7 == x4) {x8 : x4 == x4} (p8 : Square x8 idp idp idp) {x9 : a == x7} (p9 : Square p4 p7 x9 x8) {x10 : a == a} (p10 : Square x10 (&σ-gluer X x9 x9) idp idp) {x11 : a == a} (p11 : Square x11 x10 idp idp) {x12 : a == a} (p12 : Square x12 x11 idp idp) {x13 : a == a} (p13 : Square x12 x13 idp idp) {x14 : x4 == x4} (p14 : Square x14 idp idp idp) {x15 : x5 == x7} (p15 : Square p5 p7 x15 x14) {x16 : x5 == a} (p16 : Square x16 (&σ-gluer X x9 x15) idp idp) {x17 : x5 == a} (p17 : Square x17 x16 idp idp) {x18 : x5 == a} (p18 : Square x18 x17 idp idp) {x19 : x5 == a} (p19 : Square x18 x19 idp idp) {x20 : x5 == a} (p20 : Square x20 (&α-proj-gluel X x6 x6 x13 x19) idp idp) {x21 : x5 == a} (p21 : Square x21 x20 idp idp) {x22 : x5 == a} (p22 : Square x22 x21 idp idp) {x23 : x1 == a} (p23 : Square x23 (&∧-map-gluel X p0 p1 idp) idp idp) {x24 : x1 == x1} (p24 : Square x24 (&σ-gluer X p2 p2) idp idp) {x25 : x1 == x1} (p25 : Square x25 x24 idp idp) {x26 : x1 == x1} (p26 : Square x26 x25 idp idp) {x27 : x1 == x1} (p27 : Square x26 x27 idp idp) {x28 : x3 == x1} (p28 : Square x28 (&σ-gluer X p2 p3) idp idp) {x29 : x3 == x1} (p29 : Square x29 x28 idp idp) {x30 : x3 == x1} (p30 : Square x30 x29 idp idp) {x31 : x3 == x1} (p31 : Square x30 x31 idp idp) {x32 : x3 == a} (p32 : Square x32 (&α-proj-gluel X x6 x23 x27 x31) idp idp) {x33 : x3 == a} (p33 : Square x33 x32 idp idp) {x34 : x3 == a} (p34 : Square x34 x33 idp idp) {x35 : x3 == x5} (p35 : Square x35 (&σ-gluer X x22 x34) idp idp) {x36 : x3 == x5} (p36 : Square x36 x35 idp idp) {x37 : x3 == x5} (p37 : Square x37 x36 idp idp) {x38 : a == a} (p38 : Square x38 (&α-gluel-proj X p0 p0 x9 x9) idp idp) {x39 : a == a} (p39 : Square x39 (&σ-gluer X x38 x38) idp idp) {x40 : a == a} (p40 : Square x40 x39 idp idp) {x41 : a == a} (p41 : Square x41 x40 idp idp) {x42 : x3 == a} (p42 : Square x42 (&α-gluel-proj X p0 p1 p2 p3) idp idp) {x43 : x3 == a} (p43 : Square x43 (&σ-gluer X x38 x42) idp idp) {x44 : x3 == a} (p44 : Square x44 x43 idp idp) {x45 : x3 == a} (p45 : Square x45 x44 idp idp) {x46 : x3 == a} (p46 : Square x46 (&α-proj-gluer X x41 x45) idp idp) {x47 : x3 == a} (p47 : Square x47 x46 idp idp) {x48 : x3 == a} (p48 : Square x48 x47 idp idp) → Square idp (&hexagon-proj-baser X p4 p5) x37 x48
&hexagon-proj-gluer X idp idp idp idp idp idp ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids = ids

&aphexagon-proj-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : a == x4) {x5 : X} (p5 : x5 == x4) {x6 : a == a} (p6 : Square x6 (&∧-map-gluel X p0 p0 idp) idp idp) {x7 : X} (p7 : x7 == x4) {x8 : x4 == x4} (p8 : Square x8 idp idp idp) {x9 : a == x7} (p9 : Square p4 p7 x9 x8) {x10 : a == a} (p10 : Square x10 (&σ-gluer X x9 x9) idp idp) {x11 : a == a} (p11 : Square x11 x10 idp idp) {x12 : a == a} (p12 : Square x12 x11 idp idp) {x13 : a == a} (p13 : Square x12 x13 idp idp) {x14 : x4 == x4} (p14 : Square x14 idp idp idp) {x15 : x5 == x7} (p15 : Square p5 p7 x15 x14) {x16 : x5 == a} (p16 : Square x16 (&σ-gluer X x9 x15) idp idp) {x17 : x5 == a} (p17 : Square x17 x16 idp idp) {x18 : x5 == a} (p18 : Square x18 x17 idp idp) {x19 : x5 == a} (p19 : Square x18 x19 idp idp) {x20 : x5 == a} (p20 : Square x20 (&α-proj-gluel X x6 x6 x13 x19) idp idp) {x21 : x5 == a} (p21 : Square x21 x20 idp idp) {x22 : x5 == a} (p22 : Square x22 x21 idp idp) {x23 : x1 == a} (p23 : Square x23 (&∧-map-gluel X p0 p1 idp) idp idp) {x24 : x1 == x1} (p24 : Square x24 (&σ-gluer X p2 p2) idp idp) {x25 : x1 == x1} (p25 : Square x25 x24 idp idp) {x26 : x1 == x1} (p26 : Square x26 x25 idp idp) {x27 : x1 == x1} (p27 : Square x26 x27 idp idp) {x28 : x3 == x1} (p28 : Square x28 (&σ-gluer X p2 p3) idp idp) {x29 : x3 == x1} (p29 : Square x29 x28 idp idp) {x30 : x3 == x1} (p30 : Square x30 x29 idp idp) {x31 : x3 == x1} (p31 : Square x30 x31 idp idp) {x32 : x3 == a} (p32 : Square x32 (&α-proj-gluel X x6 x23 x27 x31) idp idp) {x33 : x3 == a} (p33 : Square x33 x32 idp idp) {x34 : x3 == a} (p34 : Square x34 x33 idp idp) {x35 : x3 == x5} (p35 : Square x35 (&σ-gluer X x22 x34) idp idp) {x36 : x3 == x5} (p36 : Square x36 x35 idp idp) {x37 : x3 == x5} (p37 : Square x37 x36 idp idp) {x38 : a == a} (p38 : Square x38 (&α-gluel-proj X p0 p0 x9 x9) idp idp) {x39 : a == a} (p39 : Square x39 (&σ-gluer X x38 x38) idp idp) {x40 : a == a} (p40 : Square x40 x39 idp idp) {x41 : a == a} (p41 : Square x41 x40 idp idp) {x42 : x3 == a} (p42 : Square x42 (&α-gluel-proj X p0 p1 p2 p3) idp idp) {x43 : x3 == a} (p43 : Square x43 (&σ-gluer X x38 x42) idp idp) {x44 : x3 == a} (p44 : Square x44 x43 idp idp) {x45 : x3 == a} (p45 : Square x45 x44 idp idp) {x46 : x3 == a} (p46 : Square x46 (&α-proj-gluer X x41 x45) idp idp) {x47 : x3 == a} (p47 : Square x47 x46 idp idp) {x48 : x3 == a} (p48 : Square x48 x47 idp idp) → Cube (ap² f (&hexagon-proj-gluer X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 p18 p19 p20 p21 p22 p23 p24 p25 p26 p27 p28 p29 p30 p31 p32 p33 p34 p35 p36 p37 p38 p39 p40 p41 p42 p43 p44 p45 p46 p47 p48)) (&hexagon-proj-gluer Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap f p4) (ap f p5) (&coh∙□ (ap² f p6) (&ap∧-map-gluel f p0 p0 idp)) (ap f p7) (ap² f p8) (ap² f p9) (&coh∙□ (ap² f p10) (&apσ-gluer f x9 x9)) (ap² f p11) (ap² f p12) (ap² f p13) (ap² f p14) (ap² f p15) (&coh∙□ (ap² f p16) (&apσ-gluer f x9 x15)) (ap² f p17) (ap² f p18) (ap² f p19) (&coh∙□ (ap² f p20) (&apα-proj-gluel f x6 x6 x13 x19)) (ap² f p21) (ap² f p22) (&coh∙□ (ap² f p23) (&ap∧-map-gluel f p0 p1 idp)) (&coh∙□ (ap² f p24) (&apσ-gluer f p2 p2)) (ap² f p25) (ap² f p26) (ap² f p27) (&coh∙□ (ap² f p28) (&apσ-gluer f p2 p3)) (ap² f p29) (ap² f p30) (ap² f p31) (&coh∙□ (ap² f p32) (&apα-proj-gluel f x6 x23 x27 x31)) (ap² f p33) (ap² f p34) (&coh∙□ (ap² f p35) (&apσ-gluer f x22 x34)) (ap² f p36) (ap² f p37) (&coh∙□ (ap² f p38) (&apα-gluel-proj f p0 p0 x9 x9)) (&coh∙□ (ap² f p39) (&apσ-gluer f x38 x38)) (ap² f p40) (ap² f p41) (&coh∙□ (ap² f p42) (&apα-gluel-proj f p0 p1 p2 p3)) (&coh∙□ (ap² f p43) (&apσ-gluer f x38 x42)) (ap² f p44) (ap² f p45) (&coh∙□ (ap² f p46) (&apα-proj-gluer f x41 x45)) (ap² f p47) (ap² f p48)) ids (&aphexagon-proj-baser f p4 p5) (&hids (ap f x37)) (&hids (ap f x48))
&aphexagon-proj-gluer f idp idp idp idp idp idp ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids = idc

hexagon-proj : (A : Ptd i) (B : Ptd i) (C : Ptd i) (c : ∣ C ∣) (x : ∣ A ∧ B ∣) → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C c $ (σ A B $ x)) == α B C A $ (σ A (B ∧ C) $ (α-proj A B C c $ x))
hexagon-proj A B C c = hexagon-proj.f  module _ where

  module hexagon-proj =
    SmashElimId {g = λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C c $ (σ A B $ x))}
                {h = λ x → α B C A $ (σ A (B ∧ C) $ (α-proj A B C c $ x))}
                (λ a b → idp)
                (&hexagon-proj-basel ∣ (B ∧ (C ∧ A)) ∣ (gluer (proj (pt C) (pt A))) (gluer (proj c (pt A))))
                (λ a → &hexagon-proj-gluel ∣ (B ∧ (C ∧ A)) ∣ (gluer (proj (pt C) (pt A))) (gluer (proj c a)) (gluer (proj c (pt A))) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) (proj (pt A) (pt C))) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) (proj (pt A) c)) (&apα-proj-gluer (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluer (proj (pt A) (pt C))) (gluer (proj (pt A) c))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj.gluer-β B A C c (pt A))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj B A C c $_) (gluer (pt A))) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) (proj a c)) (&apα-proj-gluer (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluer (proj (pt A) (pt C))) (gluer (proj a c))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj.gluer-β B A C c a)) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj B A C c $_) (gluer a)) (&apσ-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C c $ x)) (gluer (pt A)) (gluer a)) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C c $ x)) (σ.gluel-β A B a)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C c $ x)) (σ A B $_) (gluel a)) (α.gluer-β B C A (pt A)) (&apσ-gluel (α B C A $_) (gluer (pt A)) (gluer (pt A))) (ap² (α B C A $_) (σ.gluel-β A (B ∧ C) (pt A))) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (gluel (pt A))) (gluer (proj (pt C) a)) (α.gluer-β B C A a) (&apσ-gluel (α B C A $_) (gluer (pt A)) (gluer a)) (ap² (α B C A $_) (σ.gluel-β A (B ∧ C) a)) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (gluel a)) (α-proj.gluer-β B C A a (pt C)) (ap-∘ (λ z → α B C A $ (σ A (B ∧ C) $ z)) (λ y → proj a y) (gluer (pt C))) (α-proj.gluer-β B C A a c) (ap-∘ (λ z → α B C A $ (σ A (B ∧ C) $ z)) (λ y → proj a y) (gluer c)) (&apα-proj-gluel (λ x → α B C A $ (σ A (B ∧ C) $ x)) (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluer (pt C))) (ap (λ y → proj a y) (gluer c))) (ap² (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α-proj.gluel-β A B C c a)) (ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α-proj A B C c $_) (gluel a)))
                (&hexagon-proj-baser ∣ (B ∧ (C ∧ A)) ∣ (gluer (proj (pt C) (pt A))) (gluer (proj c (pt A))))
                (λ b → &hexagon-proj-gluer ∣ (B ∧ (C ∧ A)) ∣ (gluel (pt B)) (gluel b) (ap (λ y → proj b y) (gluel (pt C))) (ap (λ y → proj b y) (gluel c)) (gluer (proj (pt C) (pt A))) (gluer (proj c (pt A))) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) (pt B)) (gluer basel) (ap-cst baser (gluel (pt C))) (ap+ (λ z → gluer z) (gluel (pt C))) (&apσ-gluer (λ x → proj (pt B) x) (gluel (pt C)) (gluel (pt C))) (ap² (λ x → proj (pt B) x) (σ.gluer-β A C (pt C))) (ap-∘ (λ x → proj (pt B) x) (σ A C $_) (gluer (pt C))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → proj (pt B) y) (gluer (pt C))) (ap-cst baser (gluel c)) (ap+ (λ z → gluer z) (gluel c)) (&apσ-gluer (λ x → proj (pt B) x) (gluel (pt C)) (gluel c)) (ap² (λ x → proj (pt B) x) (σ.gluer-β A C c)) (ap-∘ (λ x → proj (pt B) x) (σ A C $_) (gluer c)) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → proj (pt B) y) (gluer c)) (&apα-proj-gluel (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluel (pt B)) (gluel (pt B)) (ap (λ y → proj (pt B) y) (gluer (pt C))) (ap (λ y → proj (pt B) y) (gluer c))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj.gluel-β B A C c (pt B))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj B A C c $_) (gluel (pt B))) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) b) (&apσ-gluer (λ x → proj b x) (gluel (pt C)) (gluel (pt C))) (ap² (λ x → proj b x) (σ.gluer-β A C (pt C))) (ap-∘ (λ x → proj b x) (σ A C $_) (gluer (pt C))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → proj b y) (gluer (pt C))) (&apσ-gluer (λ x → proj b x) (gluel (pt C)) (gluel c)) (ap² (λ x → proj b x) (σ.gluer-β A C c)) (ap-∘ (λ x → proj b x) (σ A C $_) (gluer c)) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → proj b y) (gluer c)) (&apα-proj-gluel (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluel (pt B)) (gluel b) (ap (λ y → proj b y) (gluer (pt C))) (ap (λ y → proj b y) (gluer c))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj.gluel-β B A C c b)) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj B A C c $_) (gluel b)) (&apσ-gluer (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C c $ x)) (gluel (pt B)) (gluel b)) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C c $ x)) (σ.gluer-β A B b)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C c $ x)) (σ A B $_) (gluer b)) (α.gluel-β B C A (proj (pt B) (pt C))) (&apσ-gluer (α B C A $_) (gluel (proj (pt B) (pt C))) (gluel (proj (pt B) (pt C)))) (ap² (α B C A $_) (σ.gluer-β A (B ∧ C) (proj (pt B) (pt C)))) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (gluer (proj (pt B) (pt C)))) (α.gluel-β B C A (proj b c)) (&apσ-gluer (α B C A $_) (gluel (proj (pt B) (pt C))) (gluel (proj b c))) (ap² (α B C A $_) (σ.gluer-β A (B ∧ C) (proj b c))) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (gluer (proj b c))) (&apα-proj-gluer (λ x → α B C A $ (σ A (B ∧ C) $ x)) (gluer (proj (pt B) (pt C))) (gluer (proj b c))) (ap² (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α-proj.gluer-β A B C c b)) (ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α-proj A B C c $_) (gluer b)))




&hexagon-gluel-proj : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : a == a} (p4 : Square x4 (&∧-map-gluel X p0 p0 idp) idp idp) {x5 : X} (p5 : a == x5) {x6 : X} (p6 : x6 == x5) {x7 : x5 == x5} (p7 : Square x7 idp idp idp) {x8 : a == x6} (p8 : Square p5 p6 x8 x7) {x9 : a == a} (p9 : Square x9 (&σ-gluel X x8 x8) idp idp) {x10 : a == a} (p10 : Square x10 x9 idp idp) {x11 : a == a} (p11 : Square x11 x10 idp idp) {x12 : a == a} (p12 : Square x11 x12 idp idp) {x13 : a == a} (p13 : Square x13 (&α-gluel-proj X x4 x4 x12 x12) idp idp) {x14 : a == a} (p14 : Square x14 x13 idp idp) {x15 : a == a} (p15 : Square x15 x14 idp idp) {x16 : x1 == a} (p16 : Square x16 (&∧-map-gluel X p0 p1 idp) idp idp) {x17 : x1 == x1} (p17 : Square x17 (&σ-gluel X p2 p2) idp idp) {x18 : x1 == x1} (p18 : Square x18 x17 idp idp) {x19 : x1 == x1} (p19 : Square x19 x18 idp idp) {x20 : x1 == x1} (p20 : Square x19 x20 idp idp) {x21 : x3 == x1} (p21 : Square x21 (&σ-gluel X p2 p3) idp idp) {x22 : x3 == x1} (p22 : Square x22 x21 idp idp) {x23 : x3 == x1} (p23 : Square x23 x22 idp idp) {x24 : x3 == x1} (p24 : Square x23 x24 idp idp) {x25 : x3 == a} (p25 : Square x25 (&α-gluel-proj X x4 x16 x20 x24) idp idp) {x26 : x3 == a} (p26 : Square x26 x25 idp idp) {x27 : x3 == a} (p27 : Square x27 x26 idp idp) {x28 : x3 == a} (p28 : Square x28 (&∧-map-gluel X x15 x27 idp) idp idp) {x29 : x3 == a} (p29 : Square x29 x28 idp idp) {x30 : x3 == a} (p30 : Square x30 x29 idp idp) {x31 : a == a} (p31 : Square x31 (&α-gluer X p5 p5) idp idp) {x32 : a == a} (p32 : Square x32 (&σ-gluel X x31 x31) idp idp) {x33 : a == a} (p33 : Square x33 x32 idp idp) {x34 : a == a} (p34 : Square x34 x33 idp idp) {x35 : X} (p35 : x35 == x5) {x36 : x35 == a} (p36 : Square x36 (&α-gluer X p5 p35) idp idp) {x37 : x35 == a} (p37 : Square x37 (&σ-gluel X x31 x36) idp idp) {x38 : x35 == a} (p38 : Square x38 x37 idp idp) {x39 : x35 == a} (p39 : Square x39 x38 idp idp) {x40 : x5 == x5} (p40 : Square x40 idp idp idp) {x41 : x35 == x6} (p41 : Square p35 p6 x41 x40) {x42 : x35 == a} (p42 : Square x42 (&α-proj-gluel X p0 p0 x8 x41) idp idp) {x43 : x35 == a} (p43 : Square x42 x43 idp idp) {x44 : x3 == a} (p44 : Square x44 (&α-proj-gluel X p0 p1 p2 p3) idp idp) {x45 : x3 == a} (p45 : Square x44 x45 idp idp) {x46 : x3 == a} (p46 : Square x46 (&α-gluel-proj X x34 x39 x43 x45) idp idp) {x47 : x3 == a} (p47 : Square x47 x46 idp idp) {x48 : x3 == a} (p48 : Square x48 x47 idp idp) → Square idp idp x30 x48
&hexagon-gluel-proj X idp idp idp idp ids idp idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids = ids

&aphexagon-gluel-proj : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : a == a} (p4 : Square x4 (&∧-map-gluel X p0 p0 idp) idp idp) {x5 : X} (p5 : a == x5) {x6 : X} (p6 : x6 == x5) {x7 : x5 == x5} (p7 : Square x7 idp idp idp) {x8 : a == x6} (p8 : Square p5 p6 x8 x7) {x9 : a == a} (p9 : Square x9 (&σ-gluel X x8 x8) idp idp) {x10 : a == a} (p10 : Square x10 x9 idp idp) {x11 : a == a} (p11 : Square x11 x10 idp idp) {x12 : a == a} (p12 : Square x11 x12 idp idp) {x13 : a == a} (p13 : Square x13 (&α-gluel-proj X x4 x4 x12 x12) idp idp) {x14 : a == a} (p14 : Square x14 x13 idp idp) {x15 : a == a} (p15 : Square x15 x14 idp idp) {x16 : x1 == a} (p16 : Square x16 (&∧-map-gluel X p0 p1 idp) idp idp) {x17 : x1 == x1} (p17 : Square x17 (&σ-gluel X p2 p2) idp idp) {x18 : x1 == x1} (p18 : Square x18 x17 idp idp) {x19 : x1 == x1} (p19 : Square x19 x18 idp idp) {x20 : x1 == x1} (p20 : Square x19 x20 idp idp) {x21 : x3 == x1} (p21 : Square x21 (&σ-gluel X p2 p3) idp idp) {x22 : x3 == x1} (p22 : Square x22 x21 idp idp) {x23 : x3 == x1} (p23 : Square x23 x22 idp idp) {x24 : x3 == x1} (p24 : Square x23 x24 idp idp) {x25 : x3 == a} (p25 : Square x25 (&α-gluel-proj X x4 x16 x20 x24) idp idp) {x26 : x3 == a} (p26 : Square x26 x25 idp idp) {x27 : x3 == a} (p27 : Square x27 x26 idp idp) {x28 : x3 == a} (p28 : Square x28 (&∧-map-gluel X x15 x27 idp) idp idp) {x29 : x3 == a} (p29 : Square x29 x28 idp idp) {x30 : x3 == a} (p30 : Square x30 x29 idp idp) {x31 : a == a} (p31 : Square x31 (&α-gluer X p5 p5) idp idp) {x32 : a == a} (p32 : Square x32 (&σ-gluel X x31 x31) idp idp) {x33 : a == a} (p33 : Square x33 x32 idp idp) {x34 : a == a} (p34 : Square x34 x33 idp idp) {x35 : X} (p35 : x35 == x5) {x36 : x35 == a} (p36 : Square x36 (&α-gluer X p5 p35) idp idp) {x37 : x35 == a} (p37 : Square x37 (&σ-gluel X x31 x36) idp idp) {x38 : x35 == a} (p38 : Square x38 x37 idp idp) {x39 : x35 == a} (p39 : Square x39 x38 idp idp) {x40 : x5 == x5} (p40 : Square x40 idp idp idp) {x41 : x35 == x6} (p41 : Square p35 p6 x41 x40) {x42 : x35 == a} (p42 : Square x42 (&α-proj-gluel X p0 p0 x8 x41) idp idp) {x43 : x35 == a} (p43 : Square x42 x43 idp idp) {x44 : x3 == a} (p44 : Square x44 (&α-proj-gluel X p0 p1 p2 p3) idp idp) {x45 : x3 == a} (p45 : Square x44 x45 idp idp) {x46 : x3 == a} (p46 : Square x46 (&α-gluel-proj X x34 x39 x43 x45) idp idp) {x47 : x3 == a} (p47 : Square x47 x46 idp idp) {x48 : x3 == a} (p48 : Square x48 x47 idp idp) → Cube (ap² f (&hexagon-gluel-proj X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 p18 p19 p20 p21 p22 p23 p24 p25 p26 p27 p28 p29 p30 p31 p32 p33 p34 p35 p36 p37 p38 p39 p40 p41 p42 p43 p44 p45 p46 p47 p48)) (&hexagon-gluel-proj Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (&coh∙□ (ap² f p4) (&ap∧-map-gluel f p0 p0 idp)) (ap f p5) (ap f p6) (ap² f p7) (ap² f p8) (&coh∙□ (ap² f p9) (&apσ-gluel f x8 x8)) (ap² f p10) (ap² f p11) (ap² f p12) (&coh∙□ (ap² f p13) (&apα-gluel-proj f x4 x4 x12 x12)) (ap² f p14) (ap² f p15) (&coh∙□ (ap² f p16) (&ap∧-map-gluel f p0 p1 idp)) (&coh∙□ (ap² f p17) (&apσ-gluel f p2 p2)) (ap² f p18) (ap² f p19) (ap² f p20) (&coh∙□ (ap² f p21) (&apσ-gluel f p2 p3)) (ap² f p22) (ap² f p23) (ap² f p24) (&coh∙□ (ap² f p25) (&apα-gluel-proj f x4 x16 x20 x24)) (ap² f p26) (ap² f p27) (&coh∙□ (ap² f p28) (&ap∧-map-gluel f x15 x27 idp)) (ap² f p29) (ap² f p30) (&coh∙□ (ap² f p31) (&apα-gluer f p5 p5)) (&coh∙□ (ap² f p32) (&apσ-gluel f x31 x31)) (ap² f p33) (ap² f p34) (ap f p35) (&coh∙□ (ap² f p36) (&apα-gluer f p5 p35)) (&coh∙□ (ap² f p37) (&apσ-gluel f x31 x36)) (ap² f p38) (ap² f p39) (ap² f p40) (ap² f p41) (&coh∙□ (ap² f p42) (&apα-proj-gluel f p0 p0 x8 x41)) (ap² f p43) (&coh∙□ (ap² f p44) (&apα-proj-gluel f p0 p1 p2 p3)) (ap² f p45) (&coh∙□ (ap² f p46) (&apα-gluel-proj f x34 x39 x43 x45)) (ap² f p47) (ap² f p48)) ids ids (&hids (ap f x30)) (&hids (ap f x48))
&aphexagon-gluel-proj f idp idp idp idp ids idp idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids = idc



&hexagon-gluel-basel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : a == x1) {x2 : a == a} (p2 : Square x2 (&∧-map-gluel X p1 p1 idp) idp idp) {x3 : X} (p3 : x3 == x0) {x4 : x0 == x0} (p4 : Square x4 idp idp idp) {x5 : a == x3} (p5 : Square p0 p3 x5 x4) {x6 : a == a} (p6 : Square x6 (&σ-gluel X x5 x5) idp idp) {x7 : a == a} (p7 : Square x7 x6 idp idp) {x8 : a == a} (p8 : Square x8 x7 idp idp) {x9 : a == a} (p9 : Square x8 x9 idp idp) {x10 : a == a} (p10 : Square x10 (&α-gluel-proj X x2 x2 x9 x9) idp idp) {x11 : a == a} (p11 : Square x11 x10 idp idp) {x12 : a == a} (p12 : Square x12 x11 idp idp) {x13 : a == a} (p13 : Square x13 (&∧-map-gluel X x12 x12 idp) idp idp) {x14 : a == a} (p14 : Square x14 x13 idp idp) {x15 : a == a} (p15 : Square x15 x14 idp idp) {x16 : a == a} (p16 : Square x16 idp idp idp) {x17 : a == a} (p17 : Square x17 x16 idp idp) → Square (&hexagon-proj-basel X p0 p0) idp x15 x17
&hexagon-gluel-basel X idp idp ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids = ids

&aphexagon-gluel-basel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : a == x1) {x2 : a == a} (p2 : Square x2 (&∧-map-gluel X p1 p1 idp) idp idp) {x3 : X} (p3 : x3 == x0) {x4 : x0 == x0} (p4 : Square x4 idp idp idp) {x5 : a == x3} (p5 : Square p0 p3 x5 x4) {x6 : a == a} (p6 : Square x6 (&σ-gluel X x5 x5) idp idp) {x7 : a == a} (p7 : Square x7 x6 idp idp) {x8 : a == a} (p8 : Square x8 x7 idp idp) {x9 : a == a} (p9 : Square x8 x9 idp idp) {x10 : a == a} (p10 : Square x10 (&α-gluel-proj X x2 x2 x9 x9) idp idp) {x11 : a == a} (p11 : Square x11 x10 idp idp) {x12 : a == a} (p12 : Square x12 x11 idp idp) {x13 : a == a} (p13 : Square x13 (&∧-map-gluel X x12 x12 idp) idp idp) {x14 : a == a} (p14 : Square x14 x13 idp idp) {x15 : a == a} (p15 : Square x15 x14 idp idp) {x16 : a == a} (p16 : Square x16 idp idp idp) {x17 : a == a} (p17 : Square x17 x16 idp idp) → Cube (ap² f (&hexagon-gluel-basel X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17)) (&hexagon-gluel-basel Y (ap f p0) (ap f p1) (&coh∙□ (ap² f p2) (&ap∧-map-gluel f p1 p1 idp)) (ap f p3) (ap² f p4) (ap² f p5) (&coh∙□ (ap² f p6) (&apσ-gluel f x5 x5)) (ap² f p7) (ap² f p8) (ap² f p9) (&coh∙□ (ap² f p10) (&apα-gluel-proj f x2 x2 x9 x9)) (ap² f p11) (ap² f p12) (&coh∙□ (ap² f p13) (&ap∧-map-gluel f x12 x12 idp)) (ap² f p14) (ap² f p15) (ap² f p16) (ap² f p17)) (&aphexagon-proj-basel f p0 p0) ids (&hids (ap f x15)) (&hids (ap f x17))
&aphexagon-gluel-basel f idp idp ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids = idc

&hexagon-gluel-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : a == a} (p3 : Square x3 (&∧-map-gluel X p2 p2 idp) idp idp) {x4 : X} (p4 : x4 == x0) {x5 : x0 == x0} (p5 : Square x5 idp idp idp) {x6 : a == x4} (p6 : Square p0 p4 x6 x5) {x7 : a == a} (p7 : Square x7 (&σ-gluel X x6 x6) idp idp) {x8 : a == a} (p8 : Square x8 x7 idp idp) {x9 : a == a} (p9 : Square x9 x8 idp idp) {x10 : a == a} (p10 : Square x9 x10 idp idp) {x11 : a == a} (p11 : Square x11 (&α-gluel-proj X x3 x3 x10 x10) idp idp) {x12 : a == a} (p12 : Square x12 x11 idp idp) {x13 : a == a} (p13 : Square x13 x12 idp idp) {x14 : x0 == x0} (p14 : Square x14 idp idp idp) {x15 : x1 == x4} (p15 : Square p1 p4 x15 x14) {x16 : x1 == a} (p16 : Square x16 (&σ-gluel X x6 x15) idp idp) {x17 : x1 == a} (p17 : Square x17 x16 idp idp) {x18 : x1 == a} (p18 : Square x18 x17 idp idp) {x19 : x1 == a} (p19 : Square x18 x19 idp idp) {x20 : x1 == a} (p20 : Square x20 (&α-gluel-proj X x3 x3 x10 x19) idp idp) {x21 : x1 == a} (p21 : Square x21 x20 idp idp) {x22 : x1 == a} (p22 : Square x22 x21 idp idp) {x23 : x1 == a} (p23 : Square x23 (&∧-map-gluel X x13 x22 idp) idp idp) {x24 : x1 == a} (p24 : Square x24 x23 idp idp) {x25 : x1 == a} (p25 : Square x25 x24 idp idp) {x26 : a == a} (p26 : Square x26 (&α-gluer X p0 p0) idp idp) {x27 : a == a} (p27 : Square x27 (&σ-gluel X x26 x26) idp idp) {x28 : a == a} (p28 : Square x28 x27 idp idp) {x29 : a == a} (p29 : Square x29 x28 idp idp) {x30 : x1 == a} (p30 : Square x30 (&α-gluer X p0 p1) idp idp) {x31 : x1 == a} (p31 : Square x31 (&σ-gluel X x26 x30) idp idp) {x32 : x1 == a} (p32 : Square x32 x31 idp idp) {x33 : x1 == a} (p33 : Square x33 x32 idp idp) {x34 : x1 == a} (p34 : Square x34 (&α-proj-gluel X p2 p2 x6 x15) idp idp) {x35 : x1 == a} (p35 : Square x34 x35 idp idp) {x36 : x1 == a} (p36 : Square x36 (&α-gluel-proj X x29 x33 x35 x35) idp idp) {x37 : x1 == a} (p37 : Square x37 x36 idp idp) {x38 : x1 == a} (p38 : Square x38 x37 idp idp) {x39 : a == a} (p39 : Square x39 (&∧-map-gluel X x13 x13 idp) idp idp) {x40 : a == a} (p40 : Square x40 x39 idp idp) {x41 : a == a} (p41 : Square x41 x40 idp idp) {x42 : a == a} (p42 : Square x42 idp idp idp) {x43 : a == a} (p43 : Square x43 x42 idp idp) {x44 : a == a} (p44 : Square x44 (&∧-map-gluer X p0 p0 idp) idp idp) {x45 : a == a} (p45 : Square x45 (&α-proj-gluer X x44 x44) idp idp) {x46 : a == a} (p46 : Square x46 x45 idp idp) {x47 : a == a} (p47 : Square x47 x46 idp idp) {x48 : x1 == a} (p48 : Square x48 (&∧-map-gluer X p0 p1 idp) idp idp) {x49 : x1 == a} (p49 : Square x49 (&α-proj-gluer X x44 x48) idp idp) {x50 : x1 == a} (p50 : Square x50 x49 idp idp) {x51 : x1 == a} (p51 : Square x51 x50 idp idp) {x52 : x1 == a} (p52 : Square x52 (&σ-gluel X x47 x51) idp idp) {x53 : x1 == a} (p53 : Square x53 x52 idp idp) {x54 : x1 == a} (p54 : Square x54 x53 idp idp) {x55 : x1 == a} (p55 : Square x55 (&α-proj-gluer X p0 p1) idp idp) {x56 : x1 == a} (p56 : Square x55 x56 idp idp) {x57 : x1 == a} (p57 : Square x57 (&α-proj-gluel X x29 x33 x56 x56) idp idp) {x58 : x1 == a} (p58 : Square x58 x57 idp idp) {x59 : x1 == a} (p59 : Square x59 x58 idp idp) {x60 : Square idp (&hexagon-proj-basel X p0 p0) x54 x59} (p60 : Cube x60 (&hexagon-proj-gluel X p0 p1 p0 p44 p44 p45 p46 p47 p48 p49 p50 p51 p52 p53 p54 p26 p27 p28 p29 p1 p30 p31 p32 p33 p55 p56 p55 p56 p57 p58 p59) ids (&hids (&hexagon-proj-basel X p0 p0)) (&hids x54) (&hids x59)) {x61 : a == a} (p61 : Square x61 idp idp idp) {x62 : Square idp idp x61 x61} (p62 : Cube x62 (&vids x61) ids ids (&hids x61) (&hids x61)) {x63 : Square x13 x13 x61 x61} (p63 : Cube x63 (&hids x13) (&hids x13) (&hids x13) p61 p61) {x64 : a == a} (p64 : Square x64 idp idp idp) {x65 : a == a} (p65 : Square x65 idp idp idp) {x66 : a == a} (p66 : Square x66 idp idp idp) {x67 : a == a} (p67 : Square x67 idp idp idp) {x68 : a == a} (p68 : Square x66 x68 idp idp) {x69 : a == a} (p69 : Square x69 (&∧-map-gluer X p0 p0 idp) idp idp) {x70 : a == a} (p70 : Square x70 idp idp idp) {x71 : a == a} (p71 : Square x70 x71 idp idp) {x72 : Square x71 idp idp idp} (p72 : Cube p70 x72 p71 ids ids ids) {x73 : x0 == x0} (p73 : Square x73 idp idp idp) {x74 : Square p0 p0 x70 x73} (p74 : Cube x74 (&hids p0) (&hids p0) (&hids p0) p70 p73) {x75 : x0 == x0} (p75 : Square x75 idp idp idp) {x76 : x0 == x0} (p76 : Square x76 idp idp idp) {x77 : Square x76 (&σ-gluel X x5 x5) idp idp} (p77 : Cube x77 ids p76 (&σ-gluel□ X p5 p5) ids ids) {x78 : Square p0 p0 x7 x76} (p78 : Cube x78 (&σ-gluel□' X p6 p6) (&hids p0) (&hids p0) p7 x77) {x79 : Square x75 x76 idp idp} (p79 : Cube x79 ids p75 p76 ids ids) {x80 : Square p0 p0 x8 x75} (p80 : Cube x80 x78 (&hids p0) (&hids p0) p8 x79) {x81 : Square x73 x75 idp idp} (p81 : Cube x81 ids p73 p75 ids ids) {x82 : Square p0 p0 x9 x73} (p82 : Cube x82 x80 (&hids p0) (&hids p0) p9 x81) {x83 : Square idp idp x9 x9} (p83 : Cube x83 (&vids x9) ids ids (&hids x9) (&hids x9)) {x84 : Square (&∧-map-gluer X p0 p0 idp) (&∧-map-gluer X p0 p0 idp) x9 x70} (p84 : Cube x84 (&∧-map-gluer□ X x74 x82 x83) (&hids (&∧-map-gluer X p0 p0 idp)) (&hids (&∧-map-gluer X p0 p0 idp)) (&hids x9) (&hids x70)) {x85 : Square idp idp x70 x70} (p85 : Cube x85 (&vids x70) ids ids (&hids x70) (&hids x70)) {x86 : Square x44 x69 x9 x70} (p86 : Cube p44 p69 x86 x84 x83 x85) {x87 : Square x44 x69 x10 x71} (p87 : Cube x86 x87 (&hids x44) (&hids x69) p10 p71) {x88 : Square x68 idp idp idp} (p88 : Cube p66 x88 p68 ids ids ids) {x89 : Square x11 idp x46 x68} (p89 : Cube x89 (&α-gluel-gluer X x44 x44 x3 x69 x72 x87 x72 x87 (&coh∙□ p46 p45) x88) p11 ids (&hids x46) (&hids x68)) {x90 : Square x11 x11 idp idp} (p90 : Cube x90 (&hids x11) (&hids x11) (&hids x11) ids ids) {x91 : Square x46 x46 idp idp} (p91 : Cube x91 (&hids x46) (&hids x46) (&hids x46) ids ids) {x92 : Square x68 x68 idp idp} (p92 : Cube x92 (&hids x68) (&hids x68) (&hids x68) ids ids) {x93 : Square x11 idp x46 x68} (p93 : Cube x93 x89 x90 ids x91 x92) {x94 : Square x11 idp x47 x66} (p94 : Cube x94 x93 (&hids x11) ids p47 p68) {x95 : a == a} (p95 : Square x67 x95 idp idp) {x96 : a == a} (p96 : Square x96 idp idp idp) {x97 : a == a} (p97 : Square x96 x97 idp idp) {x98 : Square x97 idp idp idp} (p98 : Cube p96 x98 p97 ids ids ids) {x99 : x0 == x0} (p99 : Square x99 idp idp idp) {x100 : Square p0 p0 x96 x99} (p100 : Cube x100 (&hids p0) (&hids p0) (&hids p0) p96 p99) {x101 : x0 == x0} (p101 : Square x101 idp idp idp) {x102 : x0 == x0} (p102 : Square x102 idp idp idp) {x103 : Square x102 (&σ-gluel X x5 x14) idp idp} (p103 : Cube x103 ids p102 (&σ-gluel□ X p5 p14) ids ids) {x104 : Square p1 p0 x16 x102} (p104 : Cube x104 (&σ-gluel□' X p6 p15) (&hids p1) (&hids p0) p16 x103) {x105 : Square x101 x102 idp idp} (p105 : Cube x105 ids p101 p102 ids ids) {x106 : Square p1 p0 x17 x101} (p106 : Cube x106 x104 (&hids p1) (&hids p0) p17 x105) {x107 : Square x99 x101 idp idp} (p107 : Cube x107 ids p99 p101 ids ids) {x108 : Square p1 p0 x18 x99} (p108 : Cube x108 x106 (&hids p1) (&hids p0) p18 x107) {x109 : Square idp idp x18 x18} (p109 : Cube x109 (&vids x18) ids ids (&hids x18) (&hids x18)) {x110 : Square (&∧-map-gluer X p0 p1 idp) (&∧-map-gluer X p0 p0 idp) x18 x96} (p110 : Cube x110 (&∧-map-gluer□ X x100 x108 x109) (&hids (&∧-map-gluer X p0 p1 idp)) (&hids (&∧-map-gluer X p0 p0 idp)) (&hids x18) (&hids x96)) {x111 : Square idp idp x96 x96} (p111 : Cube x111 (&vids x96) ids ids (&hids x96) (&hids x96)) {x112 : Square x48 x69 x18 x96} (p112 : Cube p48 p69 x112 x110 x109 x111) {x113 : Square x48 x69 x19 x97} (p113 : Cube x112 x113 (&hids x48) (&hids x69) p19 p97) {x114 : Square x95 idp idp idp} (p114 : Cube p67 x114 p95 ids ids ids) {x115 : Square x20 idp x50 x95} (p115 : Cube x115 (&α-gluel-gluer X x44 x48 x3 x69 x72 x87 x98 x113 (&coh∙□ p50 p49) x114) p20 ids (&hids x50) (&hids x95)) {x116 : Square x20 x20 idp idp} (p116 : Cube x116 (&hids x20) (&hids x20) (&hids x20) ids ids) {x117 : Square x50 x50 idp idp} (p117 : Cube x117 (&hids x50) (&hids x50) (&hids x50) ids ids) {x118 : Square x95 x95 idp idp} (p118 : Cube x118 (&hids x95) (&hids x95) (&hids x95) ids ids) {x119 : Square x20 idp x50 x95} (p119 : Cube x119 x115 x116 ids x117 x118) {x120 : Square x20 idp x51 x67} (p120 : Cube x120 x119 (&hids x20) ids p51 p95) {x121 : Square x65 (&σ-gluel X x66 x67) idp idp} (p121 : Cube x121 ids p65 (&σ-gluel□ X p66 p67) ids ids) {x122 : Square x20 x11 x52 x65} (p122 : Cube x122 (&σ-gluel□' X x94 x120) (&hids x20) (&hids x11) p52 x121) {x123 : Square x64 x65 idp idp} (p123 : Cube x123 ids p64 p65 ids ids) {x124 : Square x20 x11 x53 x64} (p124 : Cube x124 x122 (&hids x20) (&hids x11) p53 x123) {x125 : Square x61 x64 idp idp} (p125 : Cube x125 ids p61 p64 ids ids) {x126 : Square x20 x11 x54 x61} (p126 : Cube x126 x124 (&hids x20) (&hids x11) p54 x125) {x127 : Square idp idp x54 x54} (p127 : Cube x127 (&vids x54) ids ids (&hids x54) (&hids x54)) {x128 : Square x21 x12 x54 x61} (p128 : Cube p21 p12 x128 x126 x127 x62) {x129 : Square x22 x13 x54 x61} (p129 : Cube p22 p13 x129 x128 x127 x62) {x130 : Square (&∧-map-gluel X x13 x22 idp) (&∧-map-gluel X x13 x13 idp) x54 x61} (p130 : Cube x130 (&∧-map-gluel□ X x63 x129 x127) (&hids (&∧-map-gluel X x13 x22 idp)) (&hids (&∧-map-gluel X x13 x13 idp)) (&hids x54) (&hids x61)) {x131 : Square x23 x39 x54 x61} (p131 : Cube p23 p39 x131 x130 x127 x62) {x132 : Square x24 x40 x54 x61} (p132 : Cube p24 p40 x132 x131 x127 x62) {x133 : Square x25 x41 x54 x61} (p133 : Cube p25 p41 x133 x132 x127 x62) {x134 : a == a} (p134 : Square x61 x134 idp idp) {x135 : Square x134 idp idp idp} (p135 : Cube p61 x135 p134 ids ids ids) {x136 : Square x36 idp x58 x134} (p136 : Cube x136 (&α-gluel-gluel X x29 x33 x35 x56 (&coh∙□ p58 p57) x135) p36 ids (&hids x58) (&hids x134)) {x137 : Square x36 x36 idp idp} (p137 : Cube x137 (&hids x36) (&hids x36) (&hids x36) ids ids) {x138 : Square x58 x58 idp idp} (p138 : Cube x138 (&hids x58) (&hids x58) (&hids x58) ids ids) {x139 : Square x134 x134 idp idp} (p139 : Cube x139 (&hids x134) (&hids x134) (&hids x134) ids ids) {x140 : Square x36 idp x58 x134} (p140 : Cube x140 x136 x137 ids x138 x139) {x141 : Square x36 idp x59 x61} (p141 : Cube x141 x140 (&hids x36) ids p59 p134) {x142 : Square idp idp x59 x59} (p142 : Cube x142 (&vids x59) ids ids (&hids x59) (&hids x59)) {x143 : Square x37 x42 x59 x61} (p143 : Cube p37 p42 x143 x141 x142 x62) {x144 : Square x38 x43 x59 x61} (p144 : Cube p38 p43 x144 x143 x142 x62) → Cube (&hexagon-gluel-proj X p2 p2 x6 x15 p3 p0 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p3 p7 p8 p9 p10 p16 p17 p18 p19 p20 p21 p22 p23 p24 p25 p26 p27 p28 p29 p1 p30 p31 p32 p33 p14 p15 p34 p35 p34 p35 p36 p37 p38) (&hexagon-gluel-basel X p0 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p39 p40 p41 p42 p43) x60 x62 x133 x144
&hexagon-gluel-gluel X idp idp idp ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids idc ids idc idc ids ids ids ids ids ids ids ids idc ids idc ids ids idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc ids ids ids idc ids idc ids ids idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc ids idc idc idc idc idc idc idc idc idc idc = idc

&hexagon-gluel-baser : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : a == x1) {x2 : a == a} (p2 : Square x2 (&∧-map-gluel X p1 p1 idp) idp idp) {x3 : X} (p3 : x3 == x0) {x4 : x0 == x0} (p4 : Square x4 idp idp idp) {x5 : a == x3} (p5 : Square p0 p3 x5 x4) {x6 : a == a} (p6 : Square x6 (&σ-gluel X x5 x5) idp idp) {x7 : a == a} (p7 : Square x7 x6 idp idp) {x8 : a == a} (p8 : Square x8 x7 idp idp) {x9 : a == a} (p9 : Square x8 x9 idp idp) {x10 : a == a} (p10 : Square x10 (&α-gluel-proj X x2 x2 x9 x9) idp idp) {x11 : a == a} (p11 : Square x11 x10 idp idp) {x12 : a == a} (p12 : Square x12 x11 idp idp) {x13 : a == a} (p13 : Square x13 (&∧-map-gluel X x12 x12 idp) idp idp) {x14 : a == a} (p14 : Square x14 x13 idp idp) {x15 : a == a} (p15 : Square x15 x14 idp idp) {x16 : a == a} (p16 : Square x16 idp idp idp) {x17 : a == a} (p17 : Square x17 x16 idp idp) → Square (&hexagon-proj-baser X p0 p0) idp x15 x17
&hexagon-gluel-baser X idp idp ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids = ids

&aphexagon-gluel-baser : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : a == x1) {x2 : a == a} (p2 : Square x2 (&∧-map-gluel X p1 p1 idp) idp idp) {x3 : X} (p3 : x3 == x0) {x4 : x0 == x0} (p4 : Square x4 idp idp idp) {x5 : a == x3} (p5 : Square p0 p3 x5 x4) {x6 : a == a} (p6 : Square x6 (&σ-gluel X x5 x5) idp idp) {x7 : a == a} (p7 : Square x7 x6 idp idp) {x8 : a == a} (p8 : Square x8 x7 idp idp) {x9 : a == a} (p9 : Square x8 x9 idp idp) {x10 : a == a} (p10 : Square x10 (&α-gluel-proj X x2 x2 x9 x9) idp idp) {x11 : a == a} (p11 : Square x11 x10 idp idp) {x12 : a == a} (p12 : Square x12 x11 idp idp) {x13 : a == a} (p13 : Square x13 (&∧-map-gluel X x12 x12 idp) idp idp) {x14 : a == a} (p14 : Square x14 x13 idp idp) {x15 : a == a} (p15 : Square x15 x14 idp idp) {x16 : a == a} (p16 : Square x16 idp idp idp) {x17 : a == a} (p17 : Square x17 x16 idp idp) → Cube (ap² f (&hexagon-gluel-baser X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17)) (&hexagon-gluel-baser Y (ap f p0) (ap f p1) (&coh∙□ (ap² f p2) (&ap∧-map-gluel f p1 p1 idp)) (ap f p3) (ap² f p4) (ap² f p5) (&coh∙□ (ap² f p6) (&apσ-gluel f x5 x5)) (ap² f p7) (ap² f p8) (ap² f p9) (&coh∙□ (ap² f p10) (&apα-gluel-proj f x2 x2 x9 x9)) (ap² f p11) (ap² f p12) (&coh∙□ (ap² f p13) (&ap∧-map-gluel f x12 x12 idp)) (ap² f p14) (ap² f p15) (ap² f p16) (ap² f p17)) (&aphexagon-proj-baser f p0 p0) ids (&hids (ap f x15)) (&hids (ap f x17))
&aphexagon-gluel-baser f idp idp ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids = idc

&hexagon-gluel-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : a == a} (p2 : Square x2 (&∧-map-gluel X p0 p0 idp) idp idp) {x3 : X} (p3 : a == x3) {x4 : X} (p4 : x4 == x3) {x5 : x3 == x3} (p5 : Square x5 idp idp idp) {x6 : a == x4} (p6 : Square p3 p4 x6 x5) {x7 : a == a} (p7 : Square x7 (&σ-gluel X x6 x6) idp idp) {x8 : a == a} (p8 : Square x8 x7 idp idp) {x9 : a == a} (p9 : Square x9 x8 idp idp) {x10 : a == a} (p10 : Square x9 x10 idp idp) {x11 : a == a} (p11 : Square x11 (&α-gluel-proj X x2 x2 x10 x10) idp idp) {x12 : a == a} (p12 : Square x12 x11 idp idp) {x13 : a == a} (p13 : Square x13 x12 idp idp) {x14 : x1 == a} (p14 : Square x14 (&∧-map-gluel X p0 p1 idp) idp idp) {x15 : X} (p15 : x1 == x15) {x16 : x1 == x1} (p16 : Square x16 (&σ-gluel X p15 p15) idp idp) {x17 : x1 == x1} (p17 : Square x17 x16 idp idp) {x18 : x1 == x1} (p18 : Square x18 x17 idp idp) {x19 : x1 == x1} (p19 : Square x18 x19 idp idp) {x20 : x1 == a} (p20 : Square x20 (&α-gluel-proj X x2 x14 x19 x19) idp idp) {x21 : x1 == a} (p21 : Square x21 x20 idp idp) {x22 : x1 == a} (p22 : Square x22 x21 idp idp) {x23 : x1 == a} (p23 : Square x23 (&∧-map-gluel X x13 x22 idp) idp idp) {x24 : x1 == a} (p24 : Square x24 x23 idp idp) {x25 : x1 == a} (p25 : Square x25 x24 idp idp) {x26 : a == a} (p26 : Square x26 (&α-gluer X p3 p3) idp idp) {x27 : a == a} (p27 : Square x27 (&σ-gluel X x26 x26) idp idp) {x28 : a == a} (p28 : Square x28 x27 idp idp) {x29 : a == a} (p29 : Square x29 x28 idp idp) {x30 : a == a} (p30 : Square x30 (&α-proj-gluel X p0 p0 x6 x6) idp idp) {x31 : a == a} (p31 : Square x30 x31 idp idp) {x32 : x1 == a} (p32 : Square x32 (&α-proj-gluel X p0 p1 p15 p15) idp idp) {x33 : x1 == a} (p33 : Square x32 x33 idp idp) {x34 : x1 == a} (p34 : Square x34 (&α-gluel-proj X x29 x29 x31 x33) idp idp) {x35 : x1 == a} (p35 : Square x35 x34 idp idp) {x36 : x1 == a} (p36 : Square x36 x35 idp idp) {x37 : a == a} (p37 : Square x37 (&∧-map-gluel X x13 x13 idp) idp idp) {x38 : a == a} (p38 : Square x38 x37 idp idp) {x39 : a == a} (p39 : Square x39 x38 idp idp) {x40 : a == a} (p40 : Square x40 idp idp idp) {x41 : a == a} (p41 : Square x41 x40 idp idp) {x42 : X} (p42 : x42 == x3) {x43 : x3 == x3} (p43 : Square x43 idp idp idp) {x44 : a == x42} (p44 : Square p3 p42 x44 x43) {x45 : a == a} (p45 : Square x45 (&σ-gluer X x44 x44) idp idp) {x46 : a == a} (p46 : Square x46 x45 idp idp) {x47 : a == a} (p47 : Square x47 x46 idp idp) {x48 : a == a} (p48 : Square x47 x48 idp idp) {x49 : a == a} (p49 : Square x49 (&α-proj-gluel X x2 x2 x48 x48) idp idp) {x50 : a == a} (p50 : Square x50 x49 idp idp) {x51 : a == a} (p51 : Square x51 x50 idp idp) {x52 : X} (p52 : x1 == x52) {x53 : x1 == x1} (p53 : Square x53 (&σ-gluer X p52 p52) idp idp) {x54 : x1 == x1} (p54 : Square x54 x53 idp idp) {x55 : x1 == x1} (p55 : Square x55 x54 idp idp) {x56 : x1 == x1} (p56 : Square x55 x56 idp idp) {x57 : x1 == a} (p57 : Square x57 (&α-proj-gluel X x2 x14 x56 x56) idp idp) {x58 : x1 == a} (p58 : Square x58 x57 idp idp) {x59 : x1 == a} (p59 : Square x59 x58 idp idp) {x60 : x1 == a} (p60 : Square x60 (&σ-gluer X x51 x59) idp idp) {x61 : x1 == a} (p61 : Square x61 x60 idp idp) {x62 : x1 == a} (p62 : Square x62 x61 idp idp) {x63 : a == a} (p63 : Square x63 (&α-gluel-proj X p0 p0 x44 x44) idp idp) {x64 : a == a} (p64 : Square x64 (&σ-gluer X x63 x63) idp idp) {x65 : a == a} (p65 : Square x65 x64 idp idp) {x66 : a == a} (p66 : Square x66 x65 idp idp) {x67 : x1 == a} (p67 : Square x67 (&α-gluel-proj X p0 p1 p52 p52) idp idp) {x68 : x1 == a} (p68 : Square x68 (&σ-gluer X x63 x67) idp idp) {x69 : x1 == a} (p69 : Square x69 x68 idp idp) {x70 : x1 == a} (p70 : Square x70 x69 idp idp) {x71 : x1 == a} (p71 : Square x71 (&α-proj-gluer X x66 x70) idp idp) {x72 : x1 == a} (p72 : Square x72 x71 idp idp) {x73 : x1 == a} (p73 : Square x73 x72 idp idp) {x74 : Square idp (&hexagon-proj-baser X p3 p3) x62 x73} (p74 : Cube x74 (&hexagon-proj-gluer X p0 p1 p52 p52 p3 p3 p2 p42 p43 p44 p45 p46 p47 p48 p43 p44 p45 p46 p47 p48 p49 p50 p51 p14 p53 p54 p55 p56 p53 p54 p55 p56 p57 p58 p59 p60 p61 p62 p63 p64 p65 p66 p67 p68 p69 p70 p71 p72 p73) ids (&hids (&hexagon-proj-baser X p3 p3)) (&hids x62) (&hids x73)) {x75 : a == a} (p75 : Square x75 idp idp idp) {x76 : Square idp idp x75 x75} (p76 : Cube x76 (&vids x75) ids ids (&hids x75) (&hids x75)) {x77 : Square x13 x13 x75 x75} (p77 : Cube x77 (&hids x13) (&hids x13) (&hids x13) p75 p75) {x78 : a == a} (p78 : Square x78 idp idp idp) {x79 : a == a} (p79 : Square x79 idp idp idp) {x80 : a == a} (p80 : Square x80 idp idp idp) {x81 : a == a} (p81 : Square x81 idp idp idp) {x82 : a == a} (p82 : Square x80 x82 idp idp) {x83 : Square x82 idp idp idp} (p83 : Cube p80 x83 p82 ids ids ids) {x84 : Square x11 idp x50 x82} (p84 : Cube x84 (&α-gluel-gluel X x2 x2 x10 x48 (&coh∙□ p50 p49) x83) p11 ids (&hids x50) (&hids x82)) {x85 : Square x11 x11 idp idp} (p85 : Cube x85 (&hids x11) (&hids x11) (&hids x11) ids ids) {x86 : Square x50 x50 idp idp} (p86 : Cube x86 (&hids x50) (&hids x50) (&hids x50) ids ids) {x87 : Square x82 x82 idp idp} (p87 : Cube x87 (&hids x82) (&hids x82) (&hids x82) ids ids) {x88 : Square x11 idp x50 x82} (p88 : Cube x88 x84 x85 ids x86 x87) {x89 : Square x11 idp x51 x80} (p89 : Cube x89 x88 (&hids x11) ids p51 p82) {x90 : a == a} (p90 : Square x81 x90 idp idp) {x91 : Square x90 idp idp idp} (p91 : Cube p81 x91 p90 ids ids ids) {x92 : Square x20 idp x58 x90} (p92 : Cube x92 (&α-gluel-gluel X x2 x14 x19 x56 (&coh∙□ p58 p57) x91) p20 ids (&hids x58) (&hids x90)) {x93 : Square x20 x20 idp idp} (p93 : Cube x93 (&hids x20) (&hids x20) (&hids x20) ids ids) {x94 : Square x58 x58 idp idp} (p94 : Cube x94 (&hids x58) (&hids x58) (&hids x58) ids ids) {x95 : Square x90 x90 idp idp} (p95 : Cube x95 (&hids x90) (&hids x90) (&hids x90) ids ids) {x96 : Square x20 idp x58 x90} (p96 : Cube x96 x92 x93 ids x94 x95) {x97 : Square x20 idp x59 x81} (p97 : Cube x97 x96 (&hids x20) ids p59 p90) {x98 : Square x79 (&σ-gluer X x80 x81) idp idp} (p98 : Cube x98 ids p79 (&σ-gluer□ X p80 p81) ids ids) {x99 : Square x20 x11 x60 x79} (p99 : Cube x99 (&σ-gluer□' X x89 x97) (&hids x20) (&hids x11) p60 x98) {x100 : Square x78 x79 idp idp} (p100 : Cube x100 ids p78 p79 ids ids) {x101 : Square x20 x11 x61 x78} (p101 : Cube x101 x99 (&hids x20) (&hids x11) p61 x100) {x102 : Square x75 x78 idp idp} (p102 : Cube x102 ids p75 p78 ids ids) {x103 : Square x20 x11 x62 x75} (p103 : Cube x103 x101 (&hids x20) (&hids x11) p62 x102) {x104 : Square idp idp x62 x62} (p104 : Cube x104 (&vids x62) ids ids (&hids x62) (&hids x62)) {x105 : Square x21 x12 x62 x75} (p105 : Cube p21 p12 x105 x103 x104 x76) {x106 : Square x22 x13 x62 x75} (p106 : Cube p22 p13 x106 x105 x104 x76) {x107 : Square (&∧-map-gluel X x13 x22 idp) (&∧-map-gluel X x13 x13 idp) x62 x75} (p107 : Cube x107 (&∧-map-gluel□ X x77 x106 x104) (&hids (&∧-map-gluel X x13 x22 idp)) (&hids (&∧-map-gluel X x13 x13 idp)) (&hids x62) (&hids x75)) {x108 : Square x23 x37 x62 x75} (p108 : Cube p23 p37 x108 x107 x104 x76) {x109 : Square x24 x38 x62 x75} (p109 : Cube p24 p38 x109 x108 x104 x76) {x110 : Square x25 x39 x62 x75} (p110 : Cube p25 p39 x110 x109 x104 x76) {x111 : a == a} (p111 : Square x75 x111 idp idp) {x112 : a == a} (p112 : Square x112 idp idp idp) {x113 : a == a} (p113 : Square x113 (&σ-gluer X x63 x112) idp idp) {x114 : a == a} (p114 : Square x114 x113 idp idp) {x115 : a == a} (p115 : Square x115 x114 idp idp) {x116 : a == a} (p116 : Square x116 idp idp idp) {x117 : a == a} (p117 : Square x116 x117 idp idp) {x118 : Square x117 idp idp idp} (p118 : Cube p116 x118 p117 ids ids ids) {x119 : a == a} (p119 : Square x31 x119 idp idp) {x120 : a == a} (p120 : Square x117 x120 idp idp) {x121 : a == a} (p121 : Square x30 x121 idp idp) {x122 : a == a} (p122 : Square x116 x122 idp idp) {x123 : Square x63 x63 x116 x116} (p123 : Cube x123 (&hids x63) (&hids x63) (&hids x63) p116 p116) {x124 : Square (&α-gluel-proj X p0 p0 x44 x44) idp x30 x116} (p124 : Cube x124 (&α-gluel-gluel X p0 p0 x44 x6 p30 p116) (&hids (&α-gluel-proj X p0 p0 x44 x44)) ids (&hids x30) (&hids x116)) {x125 : Square idp idp x30 x30} (p125 : Cube x125 (&vids x30) ids ids (&hids x30) (&hids x30)) {x126 : Square idp idp x116 x116} (p126 : Cube x126 (&vids x116) ids ids (&hids x116) (&hids x116)) {x127 : Square x63 x112 x30 x116} (p127 : Cube p63 p112 x127 x124 x125 x126) {x128 : Square (&σ-gluer X x63 x63) (&σ-gluer X x63 x112) x30 x116} (p128 : Cube x128 (&σ-gluer□ X x123 x127) (&hids (&σ-gluer X x63 x63)) (&hids (&σ-gluer X x63 x112)) (&hids x30) (&hids x116)) {x129 : Square x64 x113 x30 x116} (p129 : Cube p64 p113 x129 x128 x125 x126) {x130 : Square x65 x114 x30 x116} (p130 : Cube p65 p114 x130 x129 x125 x126) {x131 : Square x65 x114 x121 x122} (p131 : Cube x130 x131 (&hids x65) (&hids x114) p121 p122) {x132 : Square x65 x65 idp idp} (p132 : Cube x132 (&hids x65) (&hids x65) (&hids x65) ids ids) {x133 : Square x114 x114 idp idp} (p133 : Cube x133 (&hids x114) (&hids x114) (&hids x114) ids ids) {x134 : Square x121 x119 idp idp} (p134 : Cube p31 x134 p121 p119 ids ids) {x135 : Square x122 x120 idp idp} (p135 : Cube p117 x135 p122 p120 ids ids) {x136 : Square x65 x114 x119 x120} (p136 : Cube x131 x136 x132 x133 x134 x135) {x137 : Square x66 x115 x31 x117} (p137 : Cube x137 x136 p66 p115 p119 p120) {x138 : a == a} (p138 : Square x138 idp idp idp) {x139 : a == a} (p139 : Square x138 x139 idp idp) {x140 : Square x139 idp idp idp} (p140 : Cube p138 x140 p139 ids ids ids) {x141 : x1 == a} (p141 : Square x33 x141 idp idp) {x142 : a == a} (p142 : Square x139 x142 idp idp) {x143 : x1 == a} (p143 : Square x32 x143 idp idp) {x144 : a == a} (p144 : Square x138 x144 idp idp) {x145 : Square x63 x63 x138 x138} (p145 : Cube x145 (&hids x63) (&hids x63) (&hids x63) p138 p138) {x146 : Square (&α-gluel-proj X p0 p1 p52 p52) idp x32 x138} (p146 : Cube x146 (&α-gluel-gluel X p0 p1 p52 p15 p32 p138) (&hids (&α-gluel-proj X p0 p1 p52 p52)) ids (&hids x32) (&hids x138)) {x147 : Square idp idp x32 x32} (p147 : Cube x147 (&vids x32) ids ids (&hids x32) (&hids x32)) {x148 : Square idp idp x138 x138} (p148 : Cube x148 (&vids x138) ids ids (&hids x138) (&hids x138)) {x149 : Square x67 x112 x32 x138} (p149 : Cube p67 p112 x149 x146 x147 x148) {x150 : Square (&σ-gluer X x63 x67) (&σ-gluer X x63 x112) x32 x138} (p150 : Cube x150 (&σ-gluer□ X x145 x149) (&hids (&σ-gluer X x63 x67)) (&hids (&σ-gluer X x63 x112)) (&hids x32) (&hids x138)) {x151 : Square x68 x113 x32 x138} (p151 : Cube p68 p113 x151 x150 x147 x148) {x152 : Square x69 x114 x32 x138} (p152 : Cube p69 p114 x152 x151 x147 x148) {x153 : Square x69 x114 x143 x144} (p153 : Cube x152 x153 (&hids x69) (&hids x114) p143 p144) {x154 : Square x69 x69 idp idp} (p154 : Cube x154 (&hids x69) (&hids x69) (&hids x69) ids ids) {x155 : Square x143 x141 idp idp} (p155 : Cube p33 x155 p143 p141 ids ids) {x156 : Square x144 x142 idp idp} (p156 : Cube p139 x156 p144 p142 ids ids) {x157 : Square x69 x114 x141 x142} (p157 : Cube x153 x157 x154 x133 x155 x156) {x158 : Square x70 x115 x33 x139} (p158 : Cube x158 x157 p70 p115 p141 p142) {x159 : Square x111 idp idp idp} (p159 : Cube p75 x159 p111 ids ids ids) {x160 : Square x34 idp x72 x111} (p160 : Cube x160 (&α-gluel-gluer X x66 x70 x29 x115 x118 x137 x140 x158 (&coh∙□ p72 p71) x159) p34 ids (&hids x72) (&hids x111)) {x161 : Square x34 x34 idp idp} (p161 : Cube x161 (&hids x34) (&hids x34) (&hids x34) ids ids) {x162 : Square x72 x72 idp idp} (p162 : Cube x162 (&hids x72) (&hids x72) (&hids x72) ids ids) {x163 : Square x111 x111 idp idp} (p163 : Cube x163 (&hids x111) (&hids x111) (&hids x111) ids ids) {x164 : Square x34 idp x72 x111} (p164 : Cube x164 x160 x161 ids x162 x163) {x165 : Square x34 idp x73 x75} (p165 : Cube x165 x164 (&hids x34) ids p73 p111) {x166 : Square idp idp x73 x73} (p166 : Cube x166 (&vids x73) ids ids (&hids x73) (&hids x73)) {x167 : Square x35 x40 x73 x75} (p167 : Cube p35 p40 x167 x165 x166 x76) {x168 : Square x36 x41 x73 x75} (p168 : Cube p36 p41 x168 x167 x166 x76) → Cube (&hexagon-gluel-proj X p0 p1 p15 p15 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p16 p17 p18 p19 p16 p17 p18 p19 p20 p21 p22 p23 p24 p25 p26 p27 p28 p29 p3 p26 p27 p28 p29 p5 p6 p30 p31 p32 p33 p34 p35 p36) (&hexagon-gluel-baser X p3 p0 p2 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p37 p38 p39 p40 p41) x74 x76 x110 x168
&hexagon-gluel-gluer X idp idp ids idp idp ids ids ids ids ids ids ids ids ids ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids idp ids ids ids ids ids ids ids ids ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids idc ids idc idc ids ids ids ids ids idc idc idc idc idc idc idc ids idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc ids ids ids ids ids ids ids idc ids ids ids ids idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc ids ids idc ids ids ids ids idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc = idc

hexagon-gluel : (A : Ptd i) (B : Ptd i) (C : Ptd i) (x : ∣ A ∧ B ∣) → Square (hexagon-proj A B C (pt C) x) idp (ap (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) $ x))) (gluel x)) (ap (λ x → α B C A $ (σ A (B ∧ C) $ (α A B C $ x))) (gluel x))
hexagon-gluel A B C =
  Smash-elim (λ a b → &hexagon-gluel-proj ∣ (B ∧ (C ∧ A)) ∣ (gluel (pt B)) (gluel b) (ap (λ y → proj b y) (gluer (pt A))) (ap (λ y → proj b y) (gluer a)) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) (pt B)) (gluer (proj (pt C) (pt A))) (gluer baser) (ap-cst baser (gluer (pt A))) (ap+ (λ z → gluer z) (gluer (pt A))) (&apσ-gluel (λ x → proj (pt B) x) (gluer (pt A)) (gluer (pt A))) (ap² (λ x → proj (pt B) x) (σ.gluel-β A C (pt A))) (ap-∘ (λ x → proj (pt B) x) (σ A C $_) (gluel (pt A))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → proj (pt B) y) (gluel (pt A))) (&apα-gluel-proj (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluel (pt B)) (gluel (pt B)) (ap (λ y → proj (pt B) y) (gluel (pt A))) (ap (λ y → proj (pt B) y) (gluel (pt A)))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α.gluel-β B A C (proj (pt B) (pt A)))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α B A C $_) (gluel (proj (pt B) (pt A)))) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) b) (&apσ-gluel (λ x → proj b x) (gluer (pt A)) (gluer (pt A))) (ap² (λ x → proj b x) (σ.gluel-β A C (pt A))) (ap-∘ (λ x → proj b x) (σ A C $_) (gluel (pt A))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → proj b y) (gluel (pt A))) (&apσ-gluel (λ x → proj b x) (gluer (pt A)) (gluer a)) (ap² (λ x → proj b x) (σ.gluel-β A C a)) (ap-∘ (λ x → proj b x) (σ A C $_) (gluel a)) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → proj b y) (gluel a)) (&apα-gluel-proj (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluel (pt B)) (gluel b) (ap (λ y → proj b y) (gluel (pt A))) (ap (λ y → proj b y) (gluel a))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α.gluel-β B A C (proj b a))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α B A C $_) (gluel (proj b a))) (&ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (gluel (proj (pt B) (pt A))) (gluel (proj b a)) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) (proj a b))) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) $_) (gluel (proj a b))) (α.gluer-β B C A (pt A)) (&apσ-gluel (α B C A $_) (gluer (pt A)) (gluer (pt A))) (ap² (α B C A $_) (σ.gluel-β A (B ∧ C) (pt A))) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (gluel (pt A))) (gluer (proj (pt C) a)) (α.gluer-β B C A a) (&apσ-gluel (α B C A $_) (gluer (pt A)) (gluer a)) (ap² (α B C A $_) (σ.gluel-β A (B ∧ C) a)) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (gluel a)) (ap-cst baser (gluer a)) (ap+ (λ y → gluer y) (gluer a)) (α-proj.gluel-β B C A a (pt B)) (ap-∘ (λ z → α B C A $ (σ A (B ∧ C) $ z)) (λ y → proj a y) (gluel (pt B))) (α-proj.gluel-β B C A a b) (ap-∘ (λ z → α B C A $ (σ A (B ∧ C) $ z)) (λ y → proj a y) (gluel b)) (&apα-gluel-proj (λ x → α B C A $ (σ A (B ∧ C) $ x)) (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))) (ap (λ y → proj a y) (gluel b))) (ap² (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α.gluel-β A B C (proj a b))) (ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α A B C $_) (gluel (proj a b))))
             (&hexagon-gluel-basel ∣ (B ∧ (C ∧ A)) ∣ (gluer (proj (pt C) (pt A))) (gluel (pt B)) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) (pt B)) (gluer baser) (ap-cst baser (gluer (pt A))) (ap+ (λ z → gluer z) (gluer (pt A))) (&apσ-gluel (λ x → proj (pt B) x) (gluer (pt A)) (gluer (pt A))) (ap² (λ x → proj (pt B) x) (σ.gluel-β A C (pt A))) (ap-∘ (λ x → proj (pt B) x) (σ A C $_) (gluel (pt A))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → proj (pt B) y) (gluel (pt A))) (&apα-gluel-proj (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluel (pt B)) (gluel (pt B)) (ap (λ y → proj (pt B) y) (gluel (pt A))) (ap (λ y → proj (pt B) y) (gluel (pt A)))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α.gluel-β B A C (proj (pt B) (pt A)))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α B A C $_) (gluel (proj (pt B) (pt A)))) (&ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (gluel (proj (pt B) (pt A))) (gluel (proj (pt B) (pt A))) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) basel)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) $_) (gluel basel)) (ap² (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α.gluel-β A B C basel)) (ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α A B C $_) (gluel basel)))
             (λ a → ↓-Square-in (&hexagon-gluel-gluel ∣ (B ∧ (C ∧ A)) ∣ (gluer (proj (pt C) (pt A))) (gluer (proj (pt C) a)) (gluel (pt B)) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) (pt B)) (gluer baser) (ap-cst baser (gluer (pt A))) (ap+ (λ z → gluer z) (gluer (pt A))) (&apσ-gluel (λ x → proj (pt B) x) (gluer (pt A)) (gluer (pt A))) (ap² (λ x → proj (pt B) x) (σ.gluel-β A C (pt A))) (ap-∘ (λ x → proj (pt B) x) (σ A C $_) (gluel (pt A))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → proj (pt B) y) (gluel (pt A))) (&apα-gluel-proj (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluel (pt B)) (gluel (pt B)) (ap (λ y → proj (pt B) y) (gluel (pt A))) (ap (λ y → proj (pt B) y) (gluel (pt A)))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α.gluel-β B A C (proj (pt B) (pt A)))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α B A C $_) (gluel (proj (pt B) (pt A)))) (ap-cst baser (gluer a)) (ap+ (λ z → gluer z) (gluer a)) (&apσ-gluel (λ x → proj (pt B) x) (gluer (pt A)) (gluer a)) (ap² (λ x → proj (pt B) x) (σ.gluel-β A C a)) (ap-∘ (λ x → proj (pt B) x) (σ A C $_) (gluel a)) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → proj (pt B) y) (gluel a)) (&apα-gluel-proj (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluel (pt B)) (gluel (pt B)) (ap (λ y → proj (pt B) y) (gluel (pt A))) (ap (λ y → proj (pt B) y) (gluel a))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α.gluel-β B A C (proj (pt B) a))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α B A C $_) (gluel (proj (pt B) a))) (&ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (gluel (proj (pt B) (pt A))) (gluel (proj (pt B) a)) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) (proj a (pt B)))) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) $_) (gluel (proj a (pt B)))) (α.gluer-β B C A (pt A)) (&apσ-gluel (α B C A $_) (gluer (pt A)) (gluer (pt A))) (ap² (α B C A $_) (σ.gluel-β A (B ∧ C) (pt A))) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (gluel (pt A))) (α.gluer-β B C A a) (&apσ-gluel (α B C A $_) (gluer (pt A)) (gluer a)) (ap² (α B C A $_) (σ.gluel-β A (B ∧ C) a)) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (gluel a)) (α-proj.gluel-β B C A a (pt B)) (ap-∘ (λ z → α B C A $ (σ A (B ∧ C) $ z)) (λ y → proj a y) (gluel (pt B))) (&apα-gluel-proj (λ x → α B C A $ (σ A (B ∧ C) $ x)) (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))) (ap (λ y → proj a y) (gluel (pt B)))) (ap² (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α.gluel-β A B C (proj a (pt B)))) (ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α A B C $_) (gluel (proj a (pt B)))) (&ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (gluel (proj (pt B) (pt A))) (gluel (proj (pt B) (pt A))) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) basel)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) $_) (gluel basel)) (ap² (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α.gluel-β A B C basel)) (ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α A B C $_) (gluel basel)) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) (proj (pt A) (pt C))) (&apα-proj-gluer (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluer (proj (pt A) (pt C))) (gluer (proj (pt A) (pt C)))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj.gluer-β B A C (pt C) (pt A))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj B A C (pt C) $_) (gluer (pt A))) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) (proj a (pt C))) (&apα-proj-gluer (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluer (proj (pt A) (pt C))) (gluer (proj a (pt C)))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj.gluer-β B A C (pt C) a)) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj B A C (pt C) $_) (gluer a)) (&apσ-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C (pt C) $ x)) (gluer (pt A)) (gluer a)) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C (pt C) $ x)) (σ.gluel-β A B a)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C (pt C) $ x)) (σ A B $_) (gluel a)) (α-proj.gluer-β B C A a (pt C)) (ap-∘ (λ z → α B C A $ (σ A (B ∧ C) $ z)) (λ y → proj a y) (gluer (pt C))) (&apα-proj-gluel (λ x → α B C A $ (σ A (B ∧ C) $ x)) (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluer (pt C))) (ap (λ y → proj a y) (gluer (pt C)))) (ap² (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α-proj.gluel-β A B C (pt C) a)) (ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α-proj A B C (pt C) $_) (gluel a)) (hexagon-proj.gluel-β A B C (pt C) a) (ap-cst (proj (pt B) (proj (pt C) (pt A))) (gluel a)) (ap+-idp (λ x → proj (pt B) (proj (pt C) (pt A))) (gluel a)) (ap+-cst (ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ z)) (gluel (proj (pt B) (pt A)))) (gluel a)) (ap-cst (proj (pt B) (proj (pt C) (pt A))) (ap (σ A B $_) (gluel a))) (ap-cst (proj (pt B) (proj (pt C) (pt A))) (&σ-gluel ∣ (B ∧ A) ∣ (gluer (pt A)) (gluer a))) (ap-cst (proj (pt B) (proj (pt C) (pt A))) (gluer (pt A))) (ap-cst (proj (pt B) (proj (pt C) (pt A))) (gluer a)) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ x → proj (pt B) (proj (pt A) (pt C))) (gluer (pt A))) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) basel) (ap-cst (proj (pt B) (proj (pt C) (pt A))) (gluel (pt A))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → baser) (gluel (pt A))) (ap-∘-cst (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) baser (gluel (pt A))) (ap-cst baser (gluel (pt A))) (ap+-cst (gluer (proj (pt C) (pt A))) (gluel (pt A))) (ap-cst baser (ap (σ A C $_) (gluel (pt A)))) (ap-cst baser (&σ-gluel ∣ (C ∧ A) ∣ (gluer (pt A)) (gluer (pt A)))) (&apσ-gluel-cst baser (gluer (pt A)) (gluer (pt A))) (ap+σ-gluel (λ y → gluer y) (gluer (pt A)) (gluer (pt A))) (ap²-cst baser (σ.gluel-β A C (pt A))) (ap²+ (λ y → gluer y) (σ.gluel-β A C (pt A))) (ap-∘-cst2 baser (σ A C $_) (gluel (pt A))) (ap+-∘2 (λ y → gluer y) (σ A C $_) (gluel (pt A))) (ap+-idp (λ y → proj (pt B) (σ A C $ y)) (gluel (pt A))) (ap/∧-map-gluer (gluel (pt A)) (λ y → gluer (proj (pt C) (pt A))) (λ y → gluer (σ A C $ y)) (λ y → idp)) (ap+-idp (λ y → proj (pt B) (proj (pt C) (pt A))) (gluel (pt A))) (ap++ (λ y → ∧-map.gluer-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) y) (gluel (pt A))) (ap+-∘1 (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → gluer y) (gluel (pt A))) (ap-∘-cst (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (proj (pt B) (proj (pt A) (pt C))) (gluer (pt A))) (&apα-gluel-gluer (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluer (proj (pt A) (pt C))) (gluer (proj (pt A) (pt C))) (gluel (pt B)) (gluer basel) (ap-cst baser (gluel (pt A))) (ap+ (λ y → gluer y) (gluel (pt A))) (ap-cst baser (gluel (pt A))) (ap+ (λ y → gluer y) (gluel (pt A))) (α-proj.gluer-β B A C (pt C) (pt A)) (ap-cst (proj (pt B) (proj (pt A) (pt C))) (gluer (pt A)))) (&aphids (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (&α-gluel-proj ∣ (B ∧ (A ∧ C)) ∣ (gluel (pt B)) (gluel (pt B)) (ap (λ y → proj (pt B) y) (gluel (pt A))) (ap (λ y → proj (pt B) y) (gluel (pt A))))) (&aphids (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (ap (α-proj B A C (pt C) $_) (gluer (pt A)))) (&aphids (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (ap (λ x → proj (pt B) (proj (pt A) (pt C))) (gluer (pt A)))) (ap³ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-gluel.gluer-β B A C (pt A))) (ap+-∘1 (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-gluel B A C) (gluer (pt A))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ x → proj (pt B) (proj (pt A) (pt C))) (gluer a)) (ap-cst (proj (pt B) (proj (pt C) (pt A))) (gluel a)) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → baser) (gluel a)) (ap-∘-cst (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) baser (gluel a)) (ap-cst baser (gluel a)) (ap+-cst (gluer (proj (pt C) (pt A))) (gluel a)) (ap-cst baser (ap (σ A C $_) (gluel a))) (ap-cst baser (&σ-gluel ∣ (C ∧ A) ∣ (gluer (pt A)) (gluer a))) (&apσ-gluel-cst baser (gluer (pt A)) (gluer a)) (ap+σ-gluel (λ y → gluer y) (gluer (pt A)) (gluer a)) (ap²-cst baser (σ.gluel-β A C a)) (ap²+ (λ y → gluer y) (σ.gluel-β A C a)) (ap-∘-cst2 baser (σ A C $_) (gluel a)) (ap+-∘2 (λ y → gluer y) (σ A C $_) (gluel a)) (ap+-idp (λ y → proj (pt B) (σ A C $ y)) (gluel a)) (ap/∧-map-gluer (gluel a) (λ y → gluer (proj (pt C) (pt A))) (λ y → gluer (σ A C $ y)) (λ y → idp)) (ap+-idp (λ y → proj (pt B) (proj (pt C) (pt A))) (gluel a)) (ap++ (λ y → ∧-map.gluer-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) y) (gluel a)) (ap+-∘1 (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → gluer y) (gluel a)) (ap-∘-cst (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (proj (pt B) (proj (pt A) (pt C))) (gluer a)) (&apα-gluel-gluer (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluer (proj (pt A) (pt C))) (gluer (proj a (pt C))) (gluel (pt B)) (gluer basel) (ap-cst baser (gluel (pt A))) (ap+ (λ y → gluer y) (gluel (pt A))) (ap-cst baser (gluel a)) (ap+ (λ y → gluer y) (gluel a)) (α-proj.gluer-β B A C (pt C) a) (ap-cst (proj (pt B) (proj (pt A) (pt C))) (gluer a))) (&aphids (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (&α-gluel-proj ∣ (B ∧ (A ∧ C)) ∣ (gluel (pt B)) (gluel (pt B)) (ap (λ y → proj (pt B) y) (gluel (pt A))) (ap (λ y → proj (pt B) y) (gluel a)))) (&aphids (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (ap (α-proj B A C (pt C) $_) (gluer a))) (&aphids (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (ap (λ x → proj (pt B) (proj (pt A) (pt C))) (gluer a))) (ap³ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-gluel.gluer-β B A C a)) (ap+-∘1 (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-gluel B A C) (gluer a)) (&apσ-gluel-cst (proj (pt B) (proj (pt C) (pt A))) (gluer (pt A)) (gluer a)) (ap+σ-gluel (λ x → ap (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-gluel B A C x)) (gluer (pt A)) (gluer a)) (ap²-cst (proj (pt B) (proj (pt C) (pt A))) (σ.gluel-β A B a)) (ap²+ (λ x → ap (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-gluel B A C x)) (σ.gluel-β A B a)) (ap-∘-cst2 (proj (pt B) (proj (pt C) (pt A))) (σ A B $_) (gluel a)) (ap+-∘3 (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-gluel B A C) (σ A B $_) (gluel a)) (ap+-idp (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C (pt C) $ (σ A B $ x))) (gluel a)) (ap++ (λ x → ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α.gluel-β B A C (σ A B $ x))) (gluel a)) (ap++ (λ x → ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α B A C $_) (gluel (σ A B $ x))) (gluel a)) (ap/∧-map-gluel (gluel a) (λ x → ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ z)) (gluel (proj (pt B) (pt A)))) (λ x → ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ z)) (gluel (σ A B $ x))) (λ x → idp)) (ap++ (λ x → &ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (gluel (proj (pt B) (pt A))) (gluel (σ A B $ x)) idp) (gluel a)) (ap++ (λ x → ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) x)) (gluel a)) (ap++ (λ x → ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) $_) (gluel x)) (gluel a)) (ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (λ x → proj (pt A) (proj (pt B) (pt C))) (gluel a)) (ap-∘-cst (λ z → α B C A $ (σ A (B ∧ C) $ z)) (proj (pt A) (proj (pt B) (pt C))) (gluel a)) (&apα-gluel-gluel (λ x → α B C A $ (σ A (B ∧ C) $ x)) (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))) (ap (λ y → proj a y) (gluer (pt C))) (α-proj.gluel-β A B C (pt C) a) (ap-cst (proj (pt A) (proj (pt B) (pt C))) (gluel a))) (&aphids (λ x → α B C A $ (σ A (B ∧ C) $ x)) (&α-gluel-proj ∣ (A ∧ (B ∧ C)) ∣ (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))) (ap (λ y → proj a y) (gluel (pt B))))) (&aphids (λ x → α B C A $ (σ A (B ∧ C) $ x)) (ap (α-proj A B C (pt C) $_) (gluel a))) (&aphids (λ x → α B C A $ (σ A (B ∧ C) $ x)) (ap (λ x → proj (pt A) (proj (pt B) (pt C))) (gluel a))) (ap³ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α-gluel.gluel-β A B C a)) (ap+-∘1 (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α-gluel A B C) (gluel a)) (ap+-idp (λ x → α B C A $ (σ A (B ∧ C) $ (α-proj A B C (pt C) $ x))) (gluel a)) (ap++ (λ x → ap² (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α.gluel-β A B C x)) (gluel a)) (ap++ (λ x → ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α A B C $_) (gluel x)) (gluel a))))
             (&hexagon-gluel-baser ∣ (B ∧ (C ∧ A)) ∣ (gluer (proj (pt C) (pt A))) (gluel (pt B)) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) (pt B)) (gluer baser) (ap-cst baser (gluer (pt A))) (ap+ (λ z → gluer z) (gluer (pt A))) (&apσ-gluel (λ x → proj (pt B) x) (gluer (pt A)) (gluer (pt A))) (ap² (λ x → proj (pt B) x) (σ.gluel-β A C (pt A))) (ap-∘ (λ x → proj (pt B) x) (σ A C $_) (gluel (pt A))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → proj (pt B) y) (gluel (pt A))) (&apα-gluel-proj (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluel (pt B)) (gluel (pt B)) (ap (λ y → proj (pt B) y) (gluel (pt A))) (ap (λ y → proj (pt B) y) (gluel (pt A)))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α.gluel-β B A C (proj (pt B) (pt A)))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α B A C $_) (gluel (proj (pt B) (pt A)))) (&ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (gluel (proj (pt B) (pt A))) (gluel (proj (pt B) (pt A))) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) baser)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) $_) (gluel baser)) (ap² (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α.gluel-β A B C baser)) (ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α A B C $_) (gluel baser)))
             (λ b → ↓-Square-in (&hexagon-gluel-gluer ∣ (B ∧ (C ∧ A)) ∣ (gluel (pt B)) (gluel b) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) (pt B)) (gluer (proj (pt C) (pt A))) (gluer baser) (ap-cst baser (gluer (pt A))) (ap+ (λ z → gluer z) (gluer (pt A))) (&apσ-gluel (λ x → proj (pt B) x) (gluer (pt A)) (gluer (pt A))) (ap² (λ x → proj (pt B) x) (σ.gluel-β A C (pt A))) (ap-∘ (λ x → proj (pt B) x) (σ A C $_) (gluel (pt A))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → proj (pt B) y) (gluel (pt A))) (&apα-gluel-proj (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluel (pt B)) (gluel (pt B)) (ap (λ y → proj (pt B) y) (gluel (pt A))) (ap (λ y → proj (pt B) y) (gluel (pt A)))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α.gluel-β B A C (proj (pt B) (pt A)))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α B A C $_) (gluel (proj (pt B) (pt A)))) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) b) (ap (λ y → proj b y) (gluer (pt A))) (&apσ-gluel (λ x → proj b x) (gluer (pt A)) (gluer (pt A))) (ap² (λ x → proj b x) (σ.gluel-β A C (pt A))) (ap-∘ (λ x → proj b x) (σ A C $_) (gluel (pt A))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → proj b y) (gluel (pt A))) (&apα-gluel-proj (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluel (pt B)) (gluel b) (ap (λ y → proj b y) (gluel (pt A))) (ap (λ y → proj b y) (gluel (pt A)))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α.gluel-β B A C (proj b (pt A)))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α B A C $_) (gluel (proj b (pt A)))) (&ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (gluel (proj (pt B) (pt A))) (gluel (proj b (pt A))) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) (proj (pt A) b))) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) $_) (gluel (proj (pt A) b))) (α.gluer-β B C A (pt A)) (&apσ-gluel (α B C A $_) (gluer (pt A)) (gluer (pt A))) (ap² (α B C A $_) (σ.gluel-β A (B ∧ C) (pt A))) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (gluel (pt A))) (α-proj.gluel-β B C A (pt A) (pt B)) (ap-∘ (λ z → α B C A $ (σ A (B ∧ C) $ z)) (λ y → proj (pt A) y) (gluel (pt B))) (α-proj.gluel-β B C A (pt A) b) (ap-∘ (λ z → α B C A $ (σ A (B ∧ C) $ z)) (λ y → proj (pt A) y) (gluel b)) (&apα-gluel-proj (λ x → α B C A $ (σ A (B ∧ C) $ x)) (gluel (pt A)) (gluel (pt A)) (ap (λ y → proj (pt A) y) (gluel (pt B))) (ap (λ y → proj (pt A) y) (gluel b))) (ap² (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α.gluel-β A B C (proj (pt A) b))) (ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α A B C $_) (gluel (proj (pt A) b))) (&ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (gluel (proj (pt B) (pt A))) (gluel (proj (pt B) (pt A))) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) baser)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) $_) (gluel baser)) (ap² (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α.gluel-β A B C baser)) (ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α A B C $_) (gluel baser)) (gluer basel) (ap-cst baser (gluel (pt C))) (ap+ (λ z → gluer z) (gluel (pt C))) (&apσ-gluer (λ x → proj (pt B) x) (gluel (pt C)) (gluel (pt C))) (ap² (λ x → proj (pt B) x) (σ.gluer-β A C (pt C))) (ap-∘ (λ x → proj (pt B) x) (σ A C $_) (gluer (pt C))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → proj (pt B) y) (gluer (pt C))) (&apα-proj-gluel (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluel (pt B)) (gluel (pt B)) (ap (λ y → proj (pt B) y) (gluer (pt C))) (ap (λ y → proj (pt B) y) (gluer (pt C)))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj.gluel-β B A C (pt C) (pt B))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj B A C (pt C) $_) (gluel (pt B))) (ap (λ y → proj b y) (gluel (pt C))) (&apσ-gluer (λ x → proj b x) (gluel (pt C)) (gluel (pt C))) (ap² (λ x → proj b x) (σ.gluer-β A C (pt C))) (ap-∘ (λ x → proj b x) (σ A C $_) (gluer (pt C))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ y → proj b y) (gluer (pt C))) (&apα-proj-gluel (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluel (pt B)) (gluel b) (ap (λ y → proj b y) (gluer (pt C))) (ap (λ y → proj b y) (gluer (pt C)))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj.gluel-β B A C (pt C) b)) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-proj B A C (pt C) $_) (gluel b)) (&apσ-gluer (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C (pt C) $ x)) (gluel (pt B)) (gluel b)) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C (pt C) $ x)) (σ.gluer-β A B b)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C (pt C) $ x)) (σ A B $_) (gluer b)) (α.gluel-β B C A (proj (pt B) (pt C))) (&apσ-gluer (α B C A $_) (gluel (proj (pt B) (pt C))) (gluel (proj (pt B) (pt C)))) (ap² (α B C A $_) (σ.gluer-β A (B ∧ C) (proj (pt B) (pt C)))) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (gluer (proj (pt B) (pt C)))) (α.gluel-β B C A (proj b (pt C))) (&apσ-gluer (α B C A $_) (gluel (proj (pt B) (pt C))) (gluel (proj b (pt C)))) (ap² (α B C A $_) (σ.gluer-β A (B ∧ C) (proj b (pt C)))) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (gluer (proj b (pt C)))) (&apα-proj-gluer (λ x → α B C A $ (σ A (B ∧ C) $ x)) (gluer (proj (pt B) (pt C))) (gluer (proj b (pt C)))) (ap² (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α-proj.gluer-β A B C (pt C) b)) (ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α-proj A B C (pt C) $_) (gluer b)) (hexagon-proj.gluer-β A B C (pt C) b) (ap-cst (proj (pt B) (proj (pt C) (pt A))) (gluer b)) (ap+-idp (λ x → proj (pt B) (proj (pt C) (pt A))) (gluer b)) (ap+-cst (ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ z)) (gluel (proj (pt B) (pt A)))) (gluer b)) (ap-cst (proj (pt B) (proj (pt C) (pt A))) (ap (σ A B $_) (gluer b))) (ap-cst (proj (pt B) (proj (pt C) (pt A))) (&σ-gluer ∣ (B ∧ A) ∣ (gluel (pt B)) (gluel b))) (ap-cst (proj (pt B) (proj (pt C) (pt A))) (gluel (pt B))) (ap-cst (proj (pt B) (proj (pt C) (pt A))) (gluel b)) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ x → proj (pt B) (proj (pt A) (pt C))) (gluel (pt B))) (ap-∘-cst (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (proj (pt B) (proj (pt A) (pt C))) (gluel (pt B))) (&apα-gluel-gluel (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluel (pt B)) (gluel (pt B)) (ap (λ y → proj (pt B) y) (gluel (pt A))) (ap (λ y → proj (pt B) y) (gluer (pt C))) (α-proj.gluel-β B A C (pt C) (pt B)) (ap-cst (proj (pt B) (proj (pt A) (pt C))) (gluel (pt B)))) (&aphids (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (&α-gluel-proj ∣ (B ∧ (A ∧ C)) ∣ (gluel (pt B)) (gluel (pt B)) (ap (λ y → proj (pt B) y) (gluel (pt A))) (ap (λ y → proj (pt B) y) (gluel (pt A))))) (&aphids (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (ap (α-proj B A C (pt C) $_) (gluel (pt B)))) (&aphids (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (ap (λ x → proj (pt B) (proj (pt A) (pt C))) (gluel (pt B)))) (ap³ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-gluel.gluel-β B A C (pt B))) (ap+-∘1 (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-gluel B A C) (gluel (pt B))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (λ x → proj (pt B) (proj (pt A) (pt C))) (gluel b)) (ap-∘-cst (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (proj (pt B) (proj (pt A) (pt C))) (gluel b)) (&apα-gluel-gluel (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluel (pt B)) (gluel b) (ap (λ y → proj b y) (gluel (pt A))) (ap (λ y → proj b y) (gluer (pt C))) (α-proj.gluel-β B A C (pt C) b) (ap-cst (proj (pt B) (proj (pt A) (pt C))) (gluel b))) (&aphids (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (&α-gluel-proj ∣ (B ∧ (A ∧ C)) ∣ (gluel (pt B)) (gluel b) (ap (λ y → proj b y) (gluel (pt A))) (ap (λ y → proj b y) (gluel (pt A))))) (&aphids (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (ap (α-proj B A C (pt C) $_) (gluel b))) (&aphids (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (ap (λ x → proj (pt B) (proj (pt A) (pt C))) (gluel b))) (ap³ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-gluel.gluel-β B A C b)) (ap+-∘1 (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-gluel B A C) (gluel b)) (&apσ-gluer-cst (proj (pt B) (proj (pt C) (pt A))) (gluel (pt B)) (gluel b)) (ap+σ-gluer (λ x → ap (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-gluel B A C x)) (gluel (pt B)) (gluel b)) (ap²-cst (proj (pt B) (proj (pt C) (pt A))) (σ.gluer-β A B b)) (ap²+ (λ x → ap (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-gluel B A C x)) (σ.gluer-β A B b)) (ap-∘-cst2 (proj (pt B) (proj (pt C) (pt A))) (σ A B $_) (gluer b)) (ap+-∘3 (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α-gluel B A C) (σ A B $_) (gluer b)) (ap+-idp (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α-proj B A C (pt C) $ (σ A B $ x))) (gluer b)) (ap++ (λ x → ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α.gluel-β B A C (σ A B $ x))) (gluer b)) (ap++ (λ x → ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α B A C $_) (gluel (σ A B $ x))) (gluer b)) (ap/∧-map-gluel (gluer b) (λ x → ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ z)) (gluel (proj (pt B) (pt A)))) (λ x → ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ z)) (gluel (σ A B $ x))) (λ x → idp)) (ap++ (λ x → &ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (gluel (proj (pt B) (pt A))) (gluel (σ A B $ x)) idp) (gluer b)) (ap++ (λ x → ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) x)) (gluer b)) (ap++ (λ x → ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) $_) (gluel x)) (gluer b)) (ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (λ x → proj (pt A) (proj (pt B) (pt C))) (gluer b)) (α.gluel-β B C A basel) (&apσ-gluer (α B C A $_) (gluel (proj (pt B) (pt C))) (gluel basel)) (ap² (α B C A $_) (σ.gluer-β A (B ∧ C) basel)) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (gluer basel)) (ap-cst (proj (pt B) (proj (pt C) (pt A))) (gluel (pt B))) (ap-∘ (λ z → α B C A $ (σ A (B ∧ C) $ z)) (λ y → baser) (gluel (pt B))) (ap-∘-cst (λ z → α B C A $ (σ A (B ∧ C) $ z)) baser (gluel (pt B))) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (ap (λ y → proj (pt A) y) (gluel (pt B)))) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (ap (λ y → baser) (gluel (pt B)))) (ap-∘ (α B C A $_) (λ y → proj y (pt A)) (gluel (pt B))) (ap-∘ (α B C A $_) (λ y → proj (proj (pt B) (pt C)) (pt A)) (gluel (pt B))) (ap+-cst (ap (α B C A $_) (gluel (proj (pt B) (pt C)))) (gluel (pt B))) (α-gluel.gluel-β B C A (pt B)) (ap+-idp (α-proj B C A (pt A) $_) (gluel (pt B))) (ap+-idp (λ x → proj (pt B) (proj (pt C) (pt A))) (gluel (pt B))) (ap++ (λ x → α.gluel-β B C A x) (gluel (pt B))) (ap/σ-gluer (gluel (pt B)) (λ x → ap (α B C A $_) (gluel (proj (pt B) (pt C)))) (λ x → ap (α B C A $_) (gluel x))) (ap++ (λ x → &apσ-gluer (α B C A $_) (gluel (proj (pt B) (pt C))) (gluel x)) (gluel (pt B))) (ap++ (λ x → ap² (α B C A $_) (σ.gluer-β A (B ∧ C) x)) (gluel (pt B))) (ap+-∘1 (α B C A $_) (λ x → ap (σ A (B ∧ C) $_) (gluer x)) (gluel (pt B))) (&aphids (α B C A $_) (ap (σ A (B ∧ C) $_) (gluer (proj (pt B) (pt C))))) (&aphids (α B C A $_) (ap (σ A (B ∧ C) $_) (gluer basel))) (ap-∘3 (α B C A $_) (σ A (B ∧ C) $_) (λ y → proj (pt A) y) (gluel (pt B))) (ap-∘3 (α B C A $_) (σ A (B ∧ C) $_) (λ y → baser) (gluel (pt B))) (ap³ (α B C A $_) (ap+-∘1 (σ A (B ∧ C) $_) (λ y → gluer y) (gluel (pt B)))) (ap²-∘ (α B C A $_) (σ A (B ∧ C) $_) (ap+ (λ y → gluer y) (gluel (pt B)))) (ap-cst (proj (pt B) (proj (pt C) (pt A))) (gluel b)) (ap-∘ (λ z → α B C A $ (σ A (B ∧ C) $ z)) (λ y → baser) (gluel b)) (ap-∘-cst (λ z → α B C A $ (σ A (B ∧ C) $ z)) baser (gluel b)) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (ap (λ y → proj (pt A) y) (gluel b))) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (ap (λ y → baser) (gluel b))) (ap-∘ (α B C A $_) (λ y → proj y (pt A)) (gluel b)) (ap-∘ (α B C A $_) (λ y → proj (proj (pt B) (pt C)) (pt A)) (gluel b)) (ap+-cst (ap (α B C A $_) (gluel (proj (pt B) (pt C)))) (gluel b)) (α-gluel.gluel-β B C A b) (ap+-idp (α-proj B C A (pt A) $_) (gluel b)) (ap+-idp (λ x → proj (pt B) (proj (pt C) (pt A))) (gluel b)) (ap++ (λ x → α.gluel-β B C A x) (gluel b)) (ap/σ-gluer (gluel b) (λ x → ap (α B C A $_) (gluel (proj (pt B) (pt C)))) (λ x → ap (α B C A $_) (gluel x))) (ap++ (λ x → &apσ-gluer (α B C A $_) (gluel (proj (pt B) (pt C))) (gluel x)) (gluel b)) (ap++ (λ x → ap² (α B C A $_) (σ.gluer-β A (B ∧ C) x)) (gluel b)) (ap+-∘1 (α B C A $_) (λ x → ap (σ A (B ∧ C) $_) (gluer x)) (gluel b)) (&aphids (α B C A $_) (ap (σ A (B ∧ C) $_) (gluer (proj b (pt C))))) (ap-∘3 (α B C A $_) (σ A (B ∧ C) $_) (λ y → proj (pt A) y) (gluel b)) (ap-∘3 (α B C A $_) (σ A (B ∧ C) $_) (λ y → baser) (gluel b)) (ap³ (α B C A $_) (ap+-∘1 (σ A (B ∧ C) $_) (λ y → gluer y) (gluel b))) (ap²-∘ (α B C A $_) (σ A (B ∧ C) $_) (ap+ (λ y → gluer y) (gluel b))) (ap-∘-cst (λ z → α B C A $ (σ A (B ∧ C) $ z)) (proj (pt A) (proj (pt B) (pt C))) (gluer b)) (&apα-gluel-gluer (λ x → α B C A $ (σ A (B ∧ C) $ x)) (gluer (proj (pt B) (pt C))) (gluer (proj b (pt C))) (gluel (pt A)) (gluer basel) (ap-cst baser (gluel (pt B))) (ap+ (λ y → gluer y) (gluel (pt B))) (ap-cst baser (gluel b)) (ap+ (λ y → gluer y) (gluel b)) (α-proj.gluer-β A B C (pt C) b) (ap-cst (proj (pt A) (proj (pt B) (pt C))) (gluer b))) (&aphids (λ x → α B C A $ (σ A (B ∧ C) $ x)) (&α-gluel-proj ∣ (A ∧ (B ∧ C)) ∣ (gluel (pt A)) (gluel (pt A)) (ap (λ y → proj (pt A) y) (gluel (pt B))) (ap (λ y → proj (pt A) y) (gluel b)))) (&aphids (λ x → α B C A $ (σ A (B ∧ C) $ x)) (ap (α-proj A B C (pt C) $_) (gluer b))) (&aphids (λ x → α B C A $ (σ A (B ∧ C) $ x)) (ap (λ x → proj (pt A) (proj (pt B) (pt C))) (gluer b))) (ap³ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α-gluel.gluer-β A B C b)) (ap+-∘1 (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α-gluel A B C) (gluer b)) (ap+-idp (λ x → α B C A $ (σ A (B ∧ C) $ (α-proj A B C (pt C) $ x))) (gluer b)) (ap++ (λ x → ap² (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α.gluel-β A B C x)) (gluer b)) (ap++ (λ x → ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α A B C $_) (gluel x)) (gluer b))))



&hexagon-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : a == a} (p2 : Square x2 (&∧-map-gluer X p0 p0 idp) idp idp) {x3 : a == a} (p3 : Square x3 (&α-gluer X x2 x2) idp idp) {x4 : a == a} (p4 : Square x4 x3 idp idp) {x5 : a == a} (p5 : Square x5 x4 idp idp) {x6 : x1 == a} (p6 : Square x6 (&∧-map-gluer X p0 p1 idp) idp idp) {x7 : x1 == a} (p7 : Square x7 (&α-gluer X x2 x6) idp idp) {x8 : x1 == a} (p8 : Square x8 x7 idp idp) {x9 : x1 == a} (p9 : Square x9 x8 idp idp) {x10 : x1 == a} (p10 : Square x10 (&∧-map-gluer X x5 x9 idp) idp idp) {x11 : x1 == a} (p11 : Square x11 x10 idp idp) {x12 : x1 == a} (p12 : Square x12 x11 idp idp) {x13 : X} (p13 : a == x13) {x14 : X} (p14 : x14 == x0) {x15 : x0 == x0} (p15 : Square x15 idp idp idp) {x16 : a == x14} (p16 : Square p0 p14 x16 x15) {x17 : a == a} (p17 : Square x17 (&α-gluel-proj X p13 p13 x16 x16) idp idp) {x18 : a == a} (p18 : Square x18 (&σ-gluer X x17 x17) idp idp) {x19 : a == a} (p19 : Square x19 x18 idp idp) {x20 : a == a} (p20 : Square x20 x19 idp idp) {x21 : x0 == x0} (p21 : Square x21 idp idp idp) {x22 : x1 == x14} (p22 : Square p1 p14 x22 x21) {x23 : x1 == a} (p23 : Square x23 (&α-gluel-proj X p13 p13 x16 x22) idp idp) {x24 : x1 == a} (p24 : Square x24 (&σ-gluer X x17 x23) idp idp) {x25 : x1 == a} (p25 : Square x25 x24 idp idp) {x26 : x1 == a} (p26 : Square x26 x25 idp idp) {x27 : x1 == a} (p27 : Square x27 (&α-gluer X x20 x26) idp idp) {x28 : x1 == a} (p28 : Square x28 x27 idp idp) {x29 : x1 == a} (p29 : Square x29 x28 idp idp) → Square idp idp x12 x29
&hexagon-gluer X idp idp ids ids ids ids ids ids ids ids ids ids ids idp idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids = ids

&aphexagon-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : a == a} (p2 : Square x2 (&∧-map-gluer X p0 p0 idp) idp idp) {x3 : a == a} (p3 : Square x3 (&α-gluer X x2 x2) idp idp) {x4 : a == a} (p4 : Square x4 x3 idp idp) {x5 : a == a} (p5 : Square x5 x4 idp idp) {x6 : x1 == a} (p6 : Square x6 (&∧-map-gluer X p0 p1 idp) idp idp) {x7 : x1 == a} (p7 : Square x7 (&α-gluer X x2 x6) idp idp) {x8 : x1 == a} (p8 : Square x8 x7 idp idp) {x9 : x1 == a} (p9 : Square x9 x8 idp idp) {x10 : x1 == a} (p10 : Square x10 (&∧-map-gluer X x5 x9 idp) idp idp) {x11 : x1 == a} (p11 : Square x11 x10 idp idp) {x12 : x1 == a} (p12 : Square x12 x11 idp idp) {x13 : X} (p13 : a == x13) {x14 : X} (p14 : x14 == x0) {x15 : x0 == x0} (p15 : Square x15 idp idp idp) {x16 : a == x14} (p16 : Square p0 p14 x16 x15) {x17 : a == a} (p17 : Square x17 (&α-gluel-proj X p13 p13 x16 x16) idp idp) {x18 : a == a} (p18 : Square x18 (&σ-gluer X x17 x17) idp idp) {x19 : a == a} (p19 : Square x19 x18 idp idp) {x20 : a == a} (p20 : Square x20 x19 idp idp) {x21 : x0 == x0} (p21 : Square x21 idp idp idp) {x22 : x1 == x14} (p22 : Square p1 p14 x22 x21) {x23 : x1 == a} (p23 : Square x23 (&α-gluel-proj X p13 p13 x16 x22) idp idp) {x24 : x1 == a} (p24 : Square x24 (&σ-gluer X x17 x23) idp idp) {x25 : x1 == a} (p25 : Square x25 x24 idp idp) {x26 : x1 == a} (p26 : Square x26 x25 idp idp) {x27 : x1 == a} (p27 : Square x27 (&α-gluer X x20 x26) idp idp) {x28 : x1 == a} (p28 : Square x28 x27 idp idp) {x29 : x1 == a} (p29 : Square x29 x28 idp idp) → Cube (ap² f (&hexagon-gluer X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 p18 p19 p20 p21 p22 p23 p24 p25 p26 p27 p28 p29)) (&hexagon-gluer Y (ap f p0) (ap f p1) (&coh∙□ (ap² f p2) (&ap∧-map-gluer f p0 p0 idp)) (&coh∙□ (ap² f p3) (&apα-gluer f x2 x2)) (ap² f p4) (ap² f p5) (&coh∙□ (ap² f p6) (&ap∧-map-gluer f p0 p1 idp)) (&coh∙□ (ap² f p7) (&apα-gluer f x2 x6)) (ap² f p8) (ap² f p9) (&coh∙□ (ap² f p10) (&ap∧-map-gluer f x5 x9 idp)) (ap² f p11) (ap² f p12) (ap f p13) (ap f p14) (ap² f p15) (ap² f p16) (&coh∙□ (ap² f p17) (&apα-gluel-proj f p13 p13 x16 x16)) (&coh∙□ (ap² f p18) (&apσ-gluer f x17 x17)) (ap² f p19) (ap² f p20) (ap² f p21) (ap² f p22) (&coh∙□ (ap² f p23) (&apα-gluel-proj f p13 p13 x16 x22)) (&coh∙□ (ap² f p24) (&apσ-gluer f x17 x23)) (ap² f p25) (ap² f p26) (&coh∙□ (ap² f p27) (&apα-gluer f x20 x26)) (ap² f p28) (ap² f p29)) ids ids (&hids (ap f x12)) (&hids (ap f x29))
&aphexagon-gluer f idp idp ids ids ids ids ids ids ids ids ids ids ids idp idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids = idc

hexagon : (A : Ptd i) (B : Ptd i) (C : Ptd i) (x : ∣ (A ∧ B) ∧ C ∣) → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) $ x)) == α B C A $ (σ A (B ∧ C) $ (α A B C $ x))
hexagon A B C = hexagon.f  module _ where

  module hexagon =
    SmashElimId {g = λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) $ x))}
                {h = λ x → α B C A $ (σ A (B ∧ C) $ (α A B C $ x))}
                (λ x c → hexagon-proj A B C c x)
                (idp)
                (hexagon-gluel A B C)
                (idp)
                (λ c → &hexagon-gluer ∣ (B ∧ (C ∧ A)) ∣ (gluer (proj (pt C) (pt A))) (gluer (proj c (pt A))) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) (proj (pt A) (pt C))) (&apα-gluer (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluer (proj (pt A) (pt C))) (gluer (proj (pt A) (pt C)))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α.gluer-β B A C (pt C))) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α B A C $_) (gluer (pt C))) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) (proj (pt A) c)) (&apα-gluer (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (gluer (proj (pt A) (pt C))) (gluer (proj (pt A) c))) (ap² (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α.gluer-β B A C c)) (ap-∘ (∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $_) (α B A C $_) (gluer c)) (&ap∧-map-gluer (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (gluer (pt C)) (gluer c) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map.gluer-β (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) c)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (id-pt B) (σ A C) $ (α B A C $ x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (id-pt C) $_) (gluer c)) (gluel (pt B)) (gluer basel) (ap-cst baser (gluel (pt C))) (ap+ (λ y → gluer y) (gluel (pt C))) (α.gluel-β B C A (proj (pt B) (pt C))) (&apσ-gluer (α B C A $_) (gluel (proj (pt B) (pt C))) (gluel (proj (pt B) (pt C)))) (ap² (α B C A $_) (σ.gluer-β A (B ∧ C) (proj (pt B) (pt C)))) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (gluer (proj (pt B) (pt C)))) (ap-cst baser (gluel c)) (ap+ (λ y → gluer y) (gluel c)) (α.gluel-β B C A (proj (pt B) c)) (&apσ-gluer (α B C A $_) (gluel (proj (pt B) (pt C))) (gluel (proj (pt B) c))) (ap² (α B C A $_) (σ.gluer-β A (B ∧ C) (proj (pt B) c))) (ap-∘ (α B C A $_) (σ A (B ∧ C) $_) (gluer (proj (pt B) c))) (&apα-gluer (λ x → α B C A $ (σ A (B ∧ C) $ x)) (gluer (proj (pt B) (pt C))) (gluer (proj (pt B) c))) (ap² (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α.gluer-β A B C c)) (ap-∘ (λ x → α B C A $ (σ A (B ∧ C) $ x)) (α A B C $_) (gluer c)))
