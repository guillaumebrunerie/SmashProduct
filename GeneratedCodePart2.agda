{-# OPTIONS --without-K --rewriting #-}

open import SmashCommon
open import SmashDefs

module GeneratedCodePart2 {i : ULevel} where

open import GeneratedCodePart1 {i}

&α-rinv-proj-basel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → a == x2
&α-rinv-proj-basel X idp idp idp = idp

&apα-rinv-proj-basel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Square (ap f (&α-rinv-proj-basel X p0 p1 p2)) (&α-rinv-proj-basel Y (ap f p0) (ap f p1) (ap f p2)) idp idp
&apα-rinv-proj-basel f idp idp idp = ids

&α-rinv-proj-basel□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x1 x2) → Square (&α-rinv-proj-basel X up0 up1 up2) (&α-rinv-proj-basel X vp0 vp1 vp2) a x2
&α-rinv-proj-basel□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap/α-rinv-proj-basel : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x1 x == x2 x) → Cube (ap+ (λ x → &α-rinv-proj-basel Y (p0 x) (p1 x) (p2 x)) r) (&α-rinv-proj-basel□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r)) (&hids (&α-rinv-proj-basel Y (p0 y) (p1 y) (p2 y))) (&hids (&α-rinv-proj-basel Y (p0 z) (p1 z) (p2 z))) (&hids (ap a r)) (&hids (ap x2 r))
ap/α-rinv-proj-basel {Y = Y} {y = y} idp p0 p1 p2 = &ap/α-rinv-proj-basel-lemma Y (p0 y) (p1 y) (p2 y)  where
  &ap/α-rinv-proj-basel-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Cube (&hids (&α-rinv-proj-basel X p0 p1 p2)) (&α-rinv-proj-basel□ X (&hids p0) (&hids p1) (&hids p2)) (&hids (&α-rinv-proj-basel X p0 p1 p2)) (&hids (&α-rinv-proj-basel X p0 p1 p2)) ids ids
  &ap/α-rinv-proj-basel-lemma X idp idp idp = idc

&α-rinv-proj-basel□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square x1 x2 up2 vp2) → Square a x2 (&α-rinv-proj-basel X up0 up1 up2) (&α-rinv-proj-basel X vp0 vp1 vp2)
&α-rinv-proj-basel□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap+α-rinv-proj-basel : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Cube (ap+ α (&α-rinv-proj-basel X p0 p1 p2)) (&α-rinv-proj-basel□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2)) (&hids (α a)) (&hids (α x2)) (&apα-rinv-proj-basel f p0 p1 p2) (&apα-rinv-proj-basel g p0 p1 p2)
ap+α-rinv-proj-basel α {a = a} idp idp idp = ap+α-rinv-proj-basel-lemma (α a)  where
  ap+α-rinv-proj-basel-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α-rinv-proj-basel□' X (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α-rinv-proj-basel-lemma idp = idc

&apα-rinv-proj-basel-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Cube (&apα-rinv-proj-basel (λ _ → y) p0 p1 p2) ids (ap-cst y (&α-rinv-proj-basel X p0 p1 p2)) (&α-rinv-proj-basel□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2)) ids ids
&apα-rinv-proj-basel-cst y idp idp idp = idc

&α-rinv-proj-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : a == x4) {x5 : a == a} (p5 : Square x5 (&α⁻¹-gluel X p4 p4) idp idp) {x6 : X} (p6 : x6 == x4) {x7 : x6 == a} (p7 : Square x7 (&α⁻¹-gluel X p4 p6) idp idp) {x8 : x6 == a} (p8 : Square x8 (&α⁻¹-proj-gluer X p0 p0 p4 p6) idp idp) {x9 : x6 == a} (p9 : Square x8 x9 idp idp) {x10 : x3 == a} (p10 : Square x10 (&α⁻¹-proj-gluer X p0 p1 p2 p3) idp idp) {x11 : x3 == a} (p11 : Square x10 x11 idp idp) {x12 : x3 == a} (p12 : Square x12 (&α-proj-gluel X x5 x7 x9 x11) idp idp) {x13 : x3 == a} (p13 : Square x13 x12 idp idp) {x14 : x3 == a} (p14 : Square x14 x13 idp idp) → Square idp (&α-rinv-proj-basel X p0 p1 p2) x14 p3
&α-rinv-proj-gluel X idp idp idp idp idp ids idp ids ids ids ids ids ids ids ids = ids

&apα-rinv-proj-gluel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : a == x4) {x5 : a == a} (p5 : Square x5 (&α⁻¹-gluel X p4 p4) idp idp) {x6 : X} (p6 : x6 == x4) {x7 : x6 == a} (p7 : Square x7 (&α⁻¹-gluel X p4 p6) idp idp) {x8 : x6 == a} (p8 : Square x8 (&α⁻¹-proj-gluer X p0 p0 p4 p6) idp idp) {x9 : x6 == a} (p9 : Square x8 x9 idp idp) {x10 : x3 == a} (p10 : Square x10 (&α⁻¹-proj-gluer X p0 p1 p2 p3) idp idp) {x11 : x3 == a} (p11 : Square x10 x11 idp idp) {x12 : x3 == a} (p12 : Square x12 (&α-proj-gluel X x5 x7 x9 x11) idp idp) {x13 : x3 == a} (p13 : Square x13 x12 idp idp) {x14 : x3 == a} (p14 : Square x14 x13 idp idp) → Cube (ap² f (&α-rinv-proj-gluel X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14)) (&α-rinv-proj-gluel Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap f p4) (&coh∙□ (ap² f p5) (&apα⁻¹-gluel f p4 p4)) (ap f p6) (&coh∙□ (ap² f p7) (&apα⁻¹-gluel f p4 p6)) (&coh∙□ (ap² f p8) (&apα⁻¹-proj-gluer f p0 p0 p4 p6)) (ap² f p9) (&coh∙□ (ap² f p10) (&apα⁻¹-proj-gluer f p0 p1 p2 p3)) (ap² f p11) (&coh∙□ (ap² f p12) (&apα-proj-gluel f x5 x7 x9 x11)) (ap² f p13) (ap² f p14)) ids (&apα-rinv-proj-basel f p0 p1 p2) (&hids (ap f x14)) (&hids (ap f p3))
&apα-rinv-proj-gluel f idp idp idp idp idp ids idp ids ids ids ids ids ids ids ids = idc

&α-rinv-proj-baser : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → a == x2
&α-rinv-proj-baser X idp idp idp = idp

&apα-rinv-proj-baser : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Square (ap f (&α-rinv-proj-baser X p0 p1 p2)) (&α-rinv-proj-baser Y (ap f p0) (ap f p1) (ap f p2)) idp idp
&apα-rinv-proj-baser f idp idp idp = ids

&α-rinv-proj-baser□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x1 x2) → Square (&α-rinv-proj-baser X up0 up1 up2) (&α-rinv-proj-baser X vp0 vp1 vp2) a x2
&α-rinv-proj-baser□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap/α-rinv-proj-baser : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x1 x == x2 x) → Cube (ap+ (λ x → &α-rinv-proj-baser Y (p0 x) (p1 x) (p2 x)) r) (&α-rinv-proj-baser□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r)) (&hids (&α-rinv-proj-baser Y (p0 y) (p1 y) (p2 y))) (&hids (&α-rinv-proj-baser Y (p0 z) (p1 z) (p2 z))) (&hids (ap a r)) (&hids (ap x2 r))
ap/α-rinv-proj-baser {Y = Y} {y = y} idp p0 p1 p2 = &ap/α-rinv-proj-baser-lemma Y (p0 y) (p1 y) (p2 y)  where
  &ap/α-rinv-proj-baser-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Cube (&hids (&α-rinv-proj-baser X p0 p1 p2)) (&α-rinv-proj-baser□ X (&hids p0) (&hids p1) (&hids p2)) (&hids (&α-rinv-proj-baser X p0 p1 p2)) (&hids (&α-rinv-proj-baser X p0 p1 p2)) ids ids
  &ap/α-rinv-proj-baser-lemma X idp idp idp = idc

&α-rinv-proj-baser□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square x1 x2 up2 vp2) → Square a x2 (&α-rinv-proj-baser X up0 up1 up2) (&α-rinv-proj-baser X vp0 vp1 vp2)
&α-rinv-proj-baser□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap+α-rinv-proj-baser : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Cube (ap+ α (&α-rinv-proj-baser X p0 p1 p2)) (&α-rinv-proj-baser□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2)) (&hids (α a)) (&hids (α x2)) (&apα-rinv-proj-baser f p0 p1 p2) (&apα-rinv-proj-baser g p0 p1 p2)
ap+α-rinv-proj-baser α {a = a} idp idp idp = ap+α-rinv-proj-baser-lemma (α a)  where
  ap+α-rinv-proj-baser-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α-rinv-proj-baser□' X (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α-rinv-proj-baser-lemma idp = idc

&apα-rinv-proj-baser-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Cube (&apα-rinv-proj-baser (λ _ → y) p0 p1 p2) ids (ap-cst y (&α-rinv-proj-baser X p0 p1 p2)) (&α-rinv-proj-baser□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2)) ids ids
&apα-rinv-proj-baser-cst y idp idp idp = idc

&α-rinv-proj-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : a == x4) {x5 : a == a} (p5 : Square x5 (&α⁻¹-gluer-proj X p0 p0 p4 p4) idp idp) {x6 : x3 == a} (p6 : Square x6 (&α⁻¹-gluer-proj X p0 p1 p2 p3) idp idp) {x7 : x3 == a} (p7 : Square x7 (&α-proj-gluer X x5 x6) idp idp) {x8 : x3 == a} (p8 : Square x8 x7 idp idp) {x9 : x3 == a} (p9 : Square x9 x8 idp idp) → Square idp (&α-rinv-proj-baser X p0 p1 p2) x9 p3
&α-rinv-proj-gluer X idp idp idp idp idp ids ids ids ids ids = ids

&apα-rinv-proj-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : a == x4) {x5 : a == a} (p5 : Square x5 (&α⁻¹-gluer-proj X p0 p0 p4 p4) idp idp) {x6 : x3 == a} (p6 : Square x6 (&α⁻¹-gluer-proj X p0 p1 p2 p3) idp idp) {x7 : x3 == a} (p7 : Square x7 (&α-proj-gluer X x5 x6) idp idp) {x8 : x3 == a} (p8 : Square x8 x7 idp idp) {x9 : x3 == a} (p9 : Square x9 x8 idp idp) → Cube (ap² f (&α-rinv-proj-gluer X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9)) (&α-rinv-proj-gluer Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap f p4) (&coh∙□ (ap² f p5) (&apα⁻¹-gluer-proj f p0 p0 p4 p4)) (&coh∙□ (ap² f p6) (&apα⁻¹-gluer-proj f p0 p1 p2 p3)) (&coh∙□ (ap² f p7) (&apα-proj-gluer f x5 x6)) (ap² f p8) (ap² f p9)) ids (&apα-rinv-proj-baser f p0 p1 p2) (&hids (ap f x9)) (&hids (ap f p3))
&apα-rinv-proj-gluer f idp idp idp idp idp ids ids ids ids ids = idc

α-rinv-proj : (A : Ptd i) (B : Ptd i) (C : Ptd i) (c : ∣ C ∣) (x : ∣ A ∧ B ∣) → α⁻¹ A B C $ (α-proj A B C c $ x) == proj x c
α-rinv-proj A B C c = α-rinv-proj.f  module _ where

  module α-rinv-proj =
    SmashElimId {g = λ x → α⁻¹ A B C $ (α-proj A B C c $ x)}
                {h = λ x → proj x c}
                (λ a b → idp)
                (&α-rinv-proj-basel ∣ ((A ∧ B) ∧ C) ∣ (gluer (pt C)) (gluer c) (ap (λ x → proj x c) (gluel (pt A))))
                (λ a → &α-rinv-proj-gluel ∣ ((A ∧ B) ∧ C) ∣ (gluer (pt C)) (gluer c) (ap (λ x → proj x c) (gluel (pt A))) (ap (λ x → proj x c) (gluel a)) (ap (λ x → proj x (pt C)) (gluel (pt A))) (α⁻¹.gluel-β A B C (pt A)) (ap (λ x → proj x (pt C)) (gluel a)) (α⁻¹.gluel-β A B C a) (α⁻¹-proj.gluer-β A B C a (pt C)) (ap-∘ (α⁻¹ A B C $_) (λ y → proj a y) (gluer (pt C))) (α⁻¹-proj.gluer-β A B C a c) (ap-∘ (α⁻¹ A B C $_) (λ y → proj a y) (gluer c)) (&apα-proj-gluel (α⁻¹ A B C $_) (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluer (pt C))) (ap (λ y → proj a y) (gluer c))) (ap² (α⁻¹ A B C $_) (α-proj.gluel-β A B C c a)) (ap-∘ (α⁻¹ A B C $_) (α-proj A B C c $_) (gluel a)))
                (&α-rinv-proj-baser ∣ ((A ∧ B) ∧ C) ∣ (gluer (pt C)) (gluer c) (ap (λ x → proj x c) (gluer (pt B))))
                (λ b → &α-rinv-proj-gluer ∣ ((A ∧ B) ∧ C) ∣ (gluer (pt C)) (gluer c) (ap (λ x → proj x c) (gluer (pt B))) (ap (λ x → proj x c) (gluer b)) (ap (λ x → proj x (pt C)) (gluer (pt B))) (α⁻¹.gluer-β A B C (proj (pt B) (pt C))) (α⁻¹.gluer-β A B C (proj b c)) (&apα-proj-gluer (α⁻¹ A B C $_) (gluer (proj (pt B) (pt C))) (gluer (proj b c))) (ap² (α⁻¹ A B C $_) (α-proj.gluer-β A B C c b)) (ap-∘ (α⁻¹ A B C $_) (α-proj A B C c $_) (gluer b)))




&α-rinv-gluel-proj : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : a == a} (p3 : Square x3 (&α⁻¹-gluel X p2 p2) idp idp) {x4 : X} (p4 : x4 == x2) {x5 : x4 == a} (p5 : Square x5 (&α⁻¹-gluel X p2 p4) idp idp) {x6 : x0 == x0} (p6 : Square x6 idp idp idp) {x7 : x2 == x0} (p7 : Square p0 x7 p2 x6) {x8 : x0 == x0} (p8 : Square x8 idp idp idp) {x9 : x4 == x0} (p9 : Square x9 x7 p4 x8) {x10 : x4 == a} (p10 : Square x10 (&α⁻¹-proj-gluel X p0 x9) idp idp) {x11 : x4 == a} (p11 : Square x10 x11 idp idp) {x12 : x1 == a} (p12 : Square x12 (&α⁻¹-proj-gluel X p0 p1) idp idp) {x13 : x1 == a} (p13 : Square x12 x13 idp idp) {x14 : x1 == a} (p14 : Square x14 (&α-gluel-proj X x3 x5 x11 x13) idp idp) {x15 : x1 == a} (p15 : Square x15 x14 idp idp) {x16 : x1 == a} (p16 : Square x16 x15 idp idp) {x17 : x1 == x0} (p17 : Square x17 p1 idp idp) → Square idp p0 x16 x17
&α-rinv-gluel-proj X idp idp idp ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids = ids

&apα-rinv-gluel-proj : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : a == a} (p3 : Square x3 (&α⁻¹-gluel X p2 p2) idp idp) {x4 : X} (p4 : x4 == x2) {x5 : x4 == a} (p5 : Square x5 (&α⁻¹-gluel X p2 p4) idp idp) {x6 : x0 == x0} (p6 : Square x6 idp idp idp) {x7 : x2 == x0} (p7 : Square p0 x7 p2 x6) {x8 : x0 == x0} (p8 : Square x8 idp idp idp) {x9 : x4 == x0} (p9 : Square x9 x7 p4 x8) {x10 : x4 == a} (p10 : Square x10 (&α⁻¹-proj-gluel X p0 x9) idp idp) {x11 : x4 == a} (p11 : Square x10 x11 idp idp) {x12 : x1 == a} (p12 : Square x12 (&α⁻¹-proj-gluel X p0 p1) idp idp) {x13 : x1 == a} (p13 : Square x12 x13 idp idp) {x14 : x1 == a} (p14 : Square x14 (&α-gluel-proj X x3 x5 x11 x13) idp idp) {x15 : x1 == a} (p15 : Square x15 x14 idp idp) {x16 : x1 == a} (p16 : Square x16 x15 idp idp) {x17 : x1 == x0} (p17 : Square x17 p1 idp idp) → Cube (ap² f (&α-rinv-gluel-proj X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17)) (&α-rinv-gluel-proj Y (ap f p0) (ap f p1) (ap f p2) (&coh∙□ (ap² f p3) (&apα⁻¹-gluel f p2 p2)) (ap f p4) (&coh∙□ (ap² f p5) (&apα⁻¹-gluel f p2 p4)) (ap² f p6) (ap² f p7) (ap² f p8) (ap² f p9) (&coh∙□ (ap² f p10) (&apα⁻¹-proj-gluel f p0 x9)) (ap² f p11) (&coh∙□ (ap² f p12) (&apα⁻¹-proj-gluel f p0 p1)) (ap² f p13) (&coh∙□ (ap² f p14) (&apα-gluel-proj f x3 x5 x11 x13)) (ap² f p15) (ap² f p16) (ap² f p17)) ids (&hids (ap f p0)) (&hids (ap f x16)) (&hids (ap f x17))
&apα-rinv-gluel-proj f idp idp idp ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids = idc



&α-rinv-gluel-basel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : a == x1) {x2 : X} (p2 : a == x2) {x3 : a == a} (p3 : Square x3 idp idp idp) {x4 : a == a} (p4 : Square x4 x3 idp idp) {x5 : x2 == x2} (p5 : Square x5 idp idp idp) {x6 : x0 == x2} (p6 : Square p2 x6 p0 x5) {x7 : x0 == x2} (p7 : Square x7 x6 idp idp) → Square (&α-rinv-proj-basel X p1 p1 p0) p2 x4 x7
&α-rinv-gluel-basel X idp idp idp ids ids ids ids ids = ids

&apα-rinv-gluel-basel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : a == x1) {x2 : X} (p2 : a == x2) {x3 : a == a} (p3 : Square x3 idp idp idp) {x4 : a == a} (p4 : Square x4 x3 idp idp) {x5 : x2 == x2} (p5 : Square x5 idp idp idp) {x6 : x0 == x2} (p6 : Square p2 x6 p0 x5) {x7 : x0 == x2} (p7 : Square x7 x6 idp idp) → Cube (ap² f (&α-rinv-gluel-basel X p0 p1 p2 p3 p4 p5 p6 p7)) (&α-rinv-gluel-basel Y (ap f p0) (ap f p1) (ap f p2) (ap² f p3) (ap² f p4) (ap² f p5) (ap² f p6) (ap² f p7)) (&apα-rinv-proj-basel f p1 p1 p0) (&hids (ap f p2)) (&hids (ap f x4)) (&hids (ap f x7))
&apα-rinv-gluel-basel f idp idp idp ids ids ids ids ids = idc

&α-rinv-gluel-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : a == a} (p3 : Square x3 (&α⁻¹-gluel X p0 p0) idp idp) {x4 : x1 == a} (p4 : Square x4 (&α⁻¹-gluel X p0 p1) idp idp) {x5 : x2 == x2} (p5 : Square x5 idp idp idp) {x6 : x0 == x2} (p6 : Square p2 x6 p0 x5) {x7 : x2 == x2} (p7 : Square x7 idp idp idp) {x8 : x1 == x2} (p8 : Square x8 x6 p1 x7) {x9 : x1 == a} (p9 : Square x9 (&α⁻¹-proj-gluel X p2 x8) idp idp) {x10 : x1 == a} (p10 : Square x9 x10 idp idp) {x11 : x1 == a} (p11 : Square x11 (&α-gluel-proj X x3 x4 x10 x10) idp idp) {x12 : x1 == a} (p12 : Square x12 x11 idp idp) {x13 : x1 == a} (p13 : Square x13 x12 idp idp) {x14 : x1 == x2} (p14 : Square x14 x8 idp idp) {x15 : X} (p15 : a == x15) {x16 : a == a} (p16 : Square x16 idp idp idp) {x17 : a == a} (p17 : Square x17 x16 idp idp) {x18 : x0 == x2} (p18 : Square x18 x6 idp idp) {x19 : x1 == a} (p19 : Square x19 (&α⁻¹-proj-gluer X p15 p15 p0 p1) idp idp) {x20 : x1 == a} (p20 : Square x19 x20 idp idp) {x21 : x1 == a} (p21 : Square x21 (&α-proj-gluel X x3 x4 x20 x20) idp idp) {x22 : x1 == a} (p22 : Square x22 x21 idp idp) {x23 : x1 == a} (p23 : Square x23 x22 idp idp) {x24 : Square idp (&α-rinv-proj-basel X p15 p15 p0) x23 p1} (p24 : Cube x24 (&α-rinv-proj-gluel X p15 p15 p0 p1 p0 p3 p1 p4 p19 p20 p19 p20 p21 p22 p23) ids (&hids (&α-rinv-proj-basel X p15 p15 p0)) (&hids x23) (&hids p1)) {x25 : a == a} (p25 : Square x25 idp idp idp) {x26 : Square p2 p2 x25 x7} (p26 : Cube x26 (&hids p2) (&hids p2) (&hids p2) p25 p7) {x27 : a == a} (p27 : Square x25 x27 idp idp) {x28 : Square x27 idp idp idp} (p28 : Cube p25 x28 p27 ids ids ids) {x29 : Square x11 idp x22 x27} (p29 : Cube x29 (&α-gluel-gluel X x3 x4 x10 x20 (&coh∙□ p22 p21) x28) p11 ids (&hids x22) (&hids x27)) {x30 : Square x11 x11 idp idp} (p30 : Cube x30 (&hids x11) (&hids x11) (&hids x11) ids ids) {x31 : Square x22 x22 idp idp} (p31 : Cube x31 (&hids x22) (&hids x22) (&hids x22) ids ids) {x32 : Square x27 x27 idp idp} (p32 : Cube x32 (&hids x27) (&hids x27) (&hids x27) ids ids) {x33 : Square x11 idp x22 x27} (p33 : Cube x33 x29 x30 ids x31 x32) {x34 : Square x11 idp x23 x25} (p34 : Cube x34 x33 (&hids x11) ids p23 p27) {x35 : Square idp idp x23 x23} (p35 : Cube x35 (&vids x23) ids ids (&hids x23) (&hids x23)) {x36 : Square idp idp x25 x25} (p36 : Cube x36 (&vids x25) ids ids (&hids x25) (&hids x25)) {x37 : Square x12 x16 x23 x25} (p37 : Cube p12 p16 x37 x34 x35 x36) {x38 : Square x13 x17 x23 x25} (p38 : Cube p13 p17 x38 x37 x35 x36) {x39 : Square idp idp p1 p1} (p39 : Cube x39 (&vids p1) ids ids (&hids p1) (&hids p1)) {x40 : Square idp idp x7 x7} (p40 : Cube x40 (&vids x7) ids ids (&hids x7) (&hids x7)) {x41 : Square x14 x18 p1 x7} (p41 : Cube p14 p18 x41 p8 x39 x40) → Cube (&α-rinv-gluel-proj X p2 x8 p0 p3 p1 p4 p5 p6 p7 p8 p9 p10 p9 p10 p11 p12 p13 p14) (&α-rinv-gluel-basel X p0 p15 p2 p16 p17 p5 p6 p18) x24 x26 x38 x41
&α-rinv-gluel-gluel X idp idp idp ids ids ids ids ids ids ids ids ids ids ids ids idp ids ids ids ids ids ids ids ids idc ids idc ids idc idc idc idc idc idc idc idc idc idc idc idc idc idc = idc

&α-rinv-gluel-baser : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : a == x1) {x2 : X} (p2 : a == x2) {x3 : a == a} (p3 : Square x3 idp idp idp) {x4 : a == a} (p4 : Square x4 x3 idp idp) {x5 : x2 == x2} (p5 : Square x5 idp idp idp) {x6 : x0 == x2} (p6 : Square p2 x6 p0 x5) {x7 : x0 == x2} (p7 : Square x7 x6 idp idp) → Square (&α-rinv-proj-baser X p1 p1 p0) p2 x4 x7
&α-rinv-gluel-baser X idp idp idp ids ids ids ids ids = ids

&apα-rinv-gluel-baser : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : a == x1) {x2 : X} (p2 : a == x2) {x3 : a == a} (p3 : Square x3 idp idp idp) {x4 : a == a} (p4 : Square x4 x3 idp idp) {x5 : x2 == x2} (p5 : Square x5 idp idp idp) {x6 : x0 == x2} (p6 : Square p2 x6 p0 x5) {x7 : x0 == x2} (p7 : Square x7 x6 idp idp) → Cube (ap² f (&α-rinv-gluel-baser X p0 p1 p2 p3 p4 p5 p6 p7)) (&α-rinv-gluel-baser Y (ap f p0) (ap f p1) (ap f p2) (ap² f p3) (ap² f p4) (ap² f p5) (ap² f p6) (ap² f p7)) (&apα-rinv-proj-baser f p1 p1 p0) (&hids (ap f p2)) (&hids (ap f x4)) (&hids (ap f x7))
&apα-rinv-gluel-baser f idp idp idp ids ids ids ids ids = idc

&α-rinv-gluel-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : X} (p3 : a == x3) {x4 : a == a} (p4 : Square x4 (&α⁻¹-gluel X p3 p3) idp idp) {x5 : a == a} (p5 : Square x5 (&α⁻¹-proj-gluel X p2 p2) idp idp) {x6 : a == a} (p6 : Square x5 x6 idp idp) {x7 : x2 == x2} (p7 : Square x7 idp idp idp) {x8 : x0 == x2} (p8 : Square p2 x8 p0 x7) {x9 : x2 == x2} (p9 : Square x9 idp idp idp) {x10 : x1 == x2} (p10 : Square x10 x8 p1 x9) {x11 : x1 == a} (p11 : Square x11 (&α⁻¹-proj-gluel X p2 x10) idp idp) {x12 : x1 == a} (p12 : Square x11 x12 idp idp) {x13 : x1 == a} (p13 : Square x13 (&α-gluel-proj X x4 x4 x6 x12) idp idp) {x14 : x1 == a} (p14 : Square x14 x13 idp idp) {x15 : x1 == a} (p15 : Square x15 x14 idp idp) {x16 : x1 == x2} (p16 : Square x16 x10 idp idp) {x17 : x2 == x2} (p17 : Square x17 idp idp idp) {x18 : x3 == x2} (p18 : Square p2 x18 p3 x17) {x19 : X} (p19 : a == x19) {x20 : a == a} (p20 : Square x20 idp idp idp) {x21 : a == a} (p21 : Square x21 x20 idp idp) {x22 : x0 == x2} (p22 : Square x22 x8 idp idp) {x23 : a == a} (p23 : Square x23 (&α⁻¹-gluer-proj X p19 p19 p0 p0) idp idp) {x24 : x1 == a} (p24 : Square x24 (&α⁻¹-gluer-proj X p19 p19 p0 p1) idp idp) {x25 : x1 == a} (p25 : Square x25 (&α-proj-gluer X x23 x24) idp idp) {x26 : x1 == a} (p26 : Square x26 x25 idp idp) {x27 : x1 == a} (p27 : Square x27 x26 idp idp) {x28 : Square idp (&α-rinv-proj-baser X p19 p19 p0) x27 p1} (p28 : Cube x28 (&α-rinv-proj-gluer X p19 p19 p0 p1 p0 p23 p24 p25 p26 p27) ids (&hids (&α-rinv-proj-baser X p19 p19 p0)) (&hids x27) (&hids p1)) {x29 : a == a} (p29 : Square x29 idp idp idp) {x30 : Square p2 p2 x29 x9} (p30 : Cube x30 (&hids p2) (&hids p2) (&hids p2) p29 p9) {x31 : a == a} (p31 : Square x29 x31 idp idp) {x32 : a == a} (p32 : Square x32 idp idp idp) {x33 : a == a} (p33 : Square x33 idp idp idp) {x34 : a == a} (p34 : Square x33 x34 idp idp) {x35 : Square x34 idp idp idp} (p35 : Cube p33 x35 p34 ids ids ids) {x36 : Square (&α⁻¹-gluer-proj X p19 p19 p0 p0) idp x5 x33} (p36 : Cube x36 (&α⁻¹-gluer-gluel X p0 p0 p19 p2 p7 p8 p7 p8 p5 p33) (&hids (&α⁻¹-gluer-proj X p19 p19 p0 p0)) ids (&hids x5) (&hids x33)) {x37 : Square idp idp x5 x5} (p37 : Cube x37 (&vids x5) ids ids (&hids x5) (&hids x5)) {x38 : Square idp idp x33 x33} (p38 : Cube x38 (&vids x33) ids ids (&hids x33) (&hids x33)) {x39 : Square x23 x32 x5 x33} (p39 : Cube p23 p32 x39 x36 x37 x38) {x40 : Square x23 x32 x6 x34} (p40 : Cube x39 x40 (&hids x23) (&hids x32) p6 p34) {x41 : a == a} (p41 : Square x41 idp idp idp) {x42 : a == a} (p42 : Square x41 x42 idp idp) {x43 : Square x42 idp idp idp} (p43 : Cube p41 x43 p42 ids ids ids) {x44 : Square (&α⁻¹-gluer-proj X p19 p19 p0 p1) idp x11 x41} (p44 : Cube x44 (&α⁻¹-gluer-gluel X p0 p1 p19 p2 p7 p8 p9 p10 p11 p41) (&hids (&α⁻¹-gluer-proj X p19 p19 p0 p1)) ids (&hids x11) (&hids x41)) {x45 : Square idp idp x11 x11} (p45 : Cube x45 (&vids x11) ids ids (&hids x11) (&hids x11)) {x46 : Square idp idp x41 x41} (p46 : Cube x46 (&vids x41) ids ids (&hids x41) (&hids x41)) {x47 : Square x24 x32 x11 x41} (p47 : Cube p24 p32 x47 x44 x45 x46) {x48 : Square x24 x32 x12 x42} (p48 : Cube x47 x48 (&hids x24) (&hids x32) p12 p42) {x49 : Square x31 idp idp idp} (p49 : Cube p29 x49 p31 ids ids ids) {x50 : Square x13 idp x26 x31} (p50 : Cube x50 (&α-gluel-gluer X x23 x24 x4 x32 x35 x40 x43 x48 (&coh∙□ p26 p25) x49) p13 ids (&hids x26) (&hids x31)) {x51 : Square x13 x13 idp idp} (p51 : Cube x51 (&hids x13) (&hids x13) (&hids x13) ids ids) {x52 : Square x26 x26 idp idp} (p52 : Cube x52 (&hids x26) (&hids x26) (&hids x26) ids ids) {x53 : Square x31 x31 idp idp} (p53 : Cube x53 (&hids x31) (&hids x31) (&hids x31) ids ids) {x54 : Square x13 idp x26 x31} (p54 : Cube x54 x50 x51 ids x52 x53) {x55 : Square x13 idp x27 x29} (p55 : Cube x55 x54 (&hids x13) ids p27 p31) {x56 : Square idp idp x27 x27} (p56 : Cube x56 (&vids x27) ids ids (&hids x27) (&hids x27)) {x57 : Square idp idp x29 x29} (p57 : Cube x57 (&vids x29) ids ids (&hids x29) (&hids x29)) {x58 : Square x14 x20 x27 x29} (p58 : Cube p14 p20 x58 x55 x56 x57) {x59 : Square x15 x21 x27 x29} (p59 : Cube p15 p21 x59 x58 x56 x57) {x60 : Square idp idp p1 p1} (p60 : Cube x60 (&vids p1) ids ids (&hids p1) (&hids p1)) {x61 : Square idp idp x9 x9} (p61 : Cube x61 (&vids x9) ids ids (&hids x9) (&hids x9)) {x62 : Square x16 x22 p1 x9} (p62 : Cube p16 p22 x62 p10 x60 x61) → Cube (&α-rinv-gluel-proj X p2 x10 p3 p4 p3 p4 p17 p18 p17 p18 p5 p6 p11 p12 p13 p14 p15 p16) (&α-rinv-gluel-baser X p0 p19 p2 p20 p21 p7 p8 p22) x28 x30 x59 x62
&α-rinv-gluel-gluer X idp idp idp idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids idp ids ids ids ids ids ids ids ids idc ids idc ids ids ids ids idc idc idc idc idc idc ids ids idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc = idc

α-rinv-gluel : (A : Ptd i) (B : Ptd i) (C : Ptd i) (x : ∣ A ∧ B ∣) → Square (α-rinv-proj A B C (pt C) x) (gluel (proj (pt A) (pt B))) (ap (λ x → α⁻¹ A B C $ (α A B C $ x)) (gluel x)) (ap (λ x → x) (gluel x))
α-rinv-gluel A B C =
  Smash-elim (λ a b → &α-rinv-gluel-proj ∣ ((A ∧ B) ∧ C) ∣ (gluel (proj (pt A) (pt B))) (gluel (proj a b)) (ap (λ x → proj x (pt C)) (gluel (pt A))) (α⁻¹.gluel-β A B C (pt A)) (ap (λ x → proj x (pt C)) (gluel a)) (α⁻¹.gluel-β A B C a) (ap-cst basel (gluel (pt A))) (ap+ (λ x → gluel x) (gluel (pt A))) (ap-cst basel (gluel a)) (ap+ (λ x → gluel x) (gluel a)) (α⁻¹-proj.gluel-β A B C a (pt B)) (ap-∘ (α⁻¹ A B C $_) (λ y → proj a y) (gluel (pt B))) (α⁻¹-proj.gluel-β A B C a b) (ap-∘ (α⁻¹ A B C $_) (λ y → proj a y) (gluel b)) (&apα-gluel-proj (α⁻¹ A B C $_) (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))) (ap (λ y → proj a y) (gluel b))) (ap² (α⁻¹ A B C $_) (α.gluel-β A B C (proj a b))) (ap-∘ (α⁻¹ A B C $_) (α A B C $_) (gluel (proj a b))) (ap-idf (gluel (proj a b))))
             (&α-rinv-gluel-basel ∣ ((A ∧ B) ∧ C) ∣ (ap (λ x → proj x (pt C)) (gluel (pt A))) (gluer (pt C)) (gluel (proj (pt A) (pt B))) (ap² (α⁻¹ A B C $_) (α.gluel-β A B C basel)) (ap-∘ (α⁻¹ A B C $_) (α A B C $_) (gluel basel)) (ap-cst basel (gluel (pt A))) (ap+ (λ x → gluel x) (gluel (pt A))) (ap-idf (gluel basel)))
             (λ a → ↓-Square-in (&α-rinv-gluel-gluel ∣ ((A ∧ B) ∧ C) ∣ (ap (λ x → proj x (pt C)) (gluel (pt A))) (ap (λ x → proj x (pt C)) (gluel a)) (gluel (proj (pt A) (pt B))) (α⁻¹.gluel-β A B C (pt A)) (α⁻¹.gluel-β A B C a) (ap-cst basel (gluel (pt A))) (ap+ (λ x → gluel x) (gluel (pt A))) (ap-cst basel (gluel a)) (ap+ (λ x → gluel x) (gluel a)) (α⁻¹-proj.gluel-β A B C a (pt B)) (ap-∘ (α⁻¹ A B C $_) (λ y → proj a y) (gluel (pt B))) (&apα-gluel-proj (α⁻¹ A B C $_) (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))) (ap (λ y → proj a y) (gluel (pt B)))) (ap² (α⁻¹ A B C $_) (α.gluel-β A B C (proj a (pt B)))) (ap-∘ (α⁻¹ A B C $_) (α A B C $_) (gluel (proj a (pt B)))) (ap-idf (gluel (proj a (pt B)))) (gluer (pt C)) (ap² (α⁻¹ A B C $_) (α.gluel-β A B C basel)) (ap-∘ (α⁻¹ A B C $_) (α A B C $_) (gluel basel)) (ap-idf (gluel basel)) (α⁻¹-proj.gluer-β A B C a (pt C)) (ap-∘ (α⁻¹ A B C $_) (λ y → proj a y) (gluer (pt C))) (&apα-proj-gluel (α⁻¹ A B C $_) (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluer (pt C))) (ap (λ y → proj a y) (gluer (pt C)))) (ap² (α⁻¹ A B C $_) (α-proj.gluel-β A B C (pt C) a)) (ap-∘ (α⁻¹ A B C $_) (α-proj A B C (pt C) $_) (gluel a)) (α-rinv-proj.gluel-β A B C (pt C) a) (ap-cst (proj (proj (pt A) (pt B)) (pt C)) (gluel a)) (ap+-cst (gluel (proj (pt A) (pt B))) (gluel a)) (ap-∘ (α⁻¹ A B C $_) (λ x → proj (pt A) (proj (pt B) (pt C))) (gluel a)) (ap-∘-cst (α⁻¹ A B C $_) (proj (pt A) (proj (pt B) (pt C))) (gluel a)) (&apα-gluel-gluel (α⁻¹ A B C $_) (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))) (ap (λ y → proj a y) (gluer (pt C))) (α-proj.gluel-β A B C (pt C) a) (ap-cst (proj (pt A) (proj (pt B) (pt C))) (gluel a))) (&aphids (α⁻¹ A B C $_) (&α-gluel-proj ∣ (A ∧ (B ∧ C)) ∣ (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))) (ap (λ y → proj a y) (gluel (pt B))))) (&aphids (α⁻¹ A B C $_) (ap (α-proj A B C (pt C) $_) (gluel a))) (&aphids (α⁻¹ A B C $_) (ap (λ x → proj (pt A) (proj (pt B) (pt C))) (gluel a))) (ap³ (α⁻¹ A B C $_) (α-gluel.gluel-β A B C a)) (ap+-∘1 (α⁻¹ A B C $_) (α-gluel A B C) (gluel a)) (ap+-idp (λ x → α⁻¹ A B C $ (α-proj A B C (pt C) $ x)) (gluel a)) (ap+-idp (λ x → proj (proj (pt A) (pt B)) (pt C)) (gluel a)) (ap++ (λ x → ap² (α⁻¹ A B C $_) (α.gluel-β A B C x)) (gluel a)) (ap++ (λ x → ap-∘ (α⁻¹ A B C $_) (α A B C $_) (gluel x)) (gluel a)) (ap+-idp (λ x → proj x (pt C)) (gluel a)) (ap+-idp (λ x → basel) (gluel a)) (ap++ (λ x → ap-idf (gluel x)) (gluel a))))
             (&α-rinv-gluel-baser ∣ ((A ∧ B) ∧ C) ∣ (ap (λ x → proj x (pt C)) (gluer (pt B))) (gluer (pt C)) (gluel (proj (pt A) (pt B))) (ap² (α⁻¹ A B C $_) (α.gluel-β A B C baser)) (ap-∘ (α⁻¹ A B C $_) (α A B C $_) (gluel baser)) (ap-cst basel (gluer (pt B))) (ap+ (λ x → gluel x) (gluer (pt B))) (ap-idf (gluel baser)))
             (λ b → ↓-Square-in (&α-rinv-gluel-gluer ∣ ((A ∧ B) ∧ C) ∣ (ap (λ x → proj x (pt C)) (gluer (pt B))) (ap (λ x → proj x (pt C)) (gluer b)) (gluel (proj (pt A) (pt B))) (ap (λ x → proj x (pt C)) (gluel (pt A))) (α⁻¹.gluel-β A B C (pt A)) (α⁻¹-proj.gluel-β A B C (pt A) (pt B)) (ap-∘ (α⁻¹ A B C $_) (λ y → proj (pt A) y) (gluel (pt B))) (ap-cst basel (gluer (pt B))) (ap+ (λ x → gluel x) (gluer (pt B))) (ap-cst basel (gluer b)) (ap+ (λ x → gluel x) (gluer b)) (α⁻¹-proj.gluel-β A B C (pt A) b) (ap-∘ (α⁻¹ A B C $_) (λ y → proj (pt A) y) (gluel b)) (&apα-gluel-proj (α⁻¹ A B C $_) (gluel (pt A)) (gluel (pt A)) (ap (λ y → proj (pt A) y) (gluel (pt B))) (ap (λ y → proj (pt A) y) (gluel b))) (ap² (α⁻¹ A B C $_) (α.gluel-β A B C (proj (pt A) b))) (ap-∘ (α⁻¹ A B C $_) (α A B C $_) (gluel (proj (pt A) b))) (ap-idf (gluel (proj (pt A) b))) (ap-cst basel (gluel (pt A))) (ap+ (λ x → gluel x) (gluel (pt A))) (gluer (pt C)) (ap² (α⁻¹ A B C $_) (α.gluel-β A B C baser)) (ap-∘ (α⁻¹ A B C $_) (α A B C $_) (gluel baser)) (ap-idf (gluel baser)) (α⁻¹.gluer-β A B C (proj (pt B) (pt C))) (α⁻¹.gluer-β A B C (proj b (pt C))) (&apα-proj-gluer (α⁻¹ A B C $_) (gluer (proj (pt B) (pt C))) (gluer (proj b (pt C)))) (ap² (α⁻¹ A B C $_) (α-proj.gluer-β A B C (pt C) b)) (ap-∘ (α⁻¹ A B C $_) (α-proj A B C (pt C) $_) (gluer b)) (α-rinv-proj.gluer-β A B C (pt C) b) (ap-cst (proj (proj (pt A) (pt B)) (pt C)) (gluer b)) (ap+-cst (gluel (proj (pt A) (pt B))) (gluer b)) (ap-∘ (α⁻¹ A B C $_) (λ x → proj (pt A) (proj (pt B) (pt C))) (gluer b)) (α⁻¹.gluer-β A B C basel) (ap-cst (proj (proj (pt A) (pt B)) (pt C)) (gluel (pt B))) (ap-∘ (α⁻¹ A B C $_) (λ y → baser) (gluel (pt B))) (ap-∘-cst (α⁻¹ A B C $_) baser (gluel (pt B))) (α⁻¹-gluer.gluel-β A B C (pt B)) (ap+-idp (α⁻¹-proj A B C (pt A) $_) (gluel (pt B))) (ap+-idp (λ y → proj (proj (pt A) (pt B)) (pt C)) (gluel (pt B))) (ap++ (λ y → α⁻¹.gluer-β A B C y) (gluel (pt B))) (ap+-∘1 (α⁻¹ A B C $_) (λ y → gluer y) (gluel (pt B))) (ap-cst (proj (proj (pt A) (pt B)) (pt C)) (gluel b)) (ap-∘ (α⁻¹ A B C $_) (λ y → baser) (gluel b)) (ap-∘-cst (α⁻¹ A B C $_) baser (gluel b)) (α⁻¹-gluer.gluel-β A B C b) (ap+-idp (α⁻¹-proj A B C (pt A) $_) (gluel b)) (ap+-idp (λ y → proj (proj (pt A) (pt B)) (pt C)) (gluel b)) (ap++ (λ y → α⁻¹.gluer-β A B C y) (gluel b)) (ap+-∘1 (α⁻¹ A B C $_) (λ y → gluer y) (gluel b)) (ap-∘-cst (α⁻¹ A B C $_) (proj (pt A) (proj (pt B) (pt C))) (gluer b)) (&apα-gluel-gluer (α⁻¹ A B C $_) (gluer (proj (pt B) (pt C))) (gluer (proj b (pt C))) (gluel (pt A)) (gluer basel) (ap-cst baser (gluel (pt B))) (ap+ (λ y → gluer y) (gluel (pt B))) (ap-cst baser (gluel b)) (ap+ (λ y → gluer y) (gluel b)) (α-proj.gluer-β A B C (pt C) b) (ap-cst (proj (pt A) (proj (pt B) (pt C))) (gluer b))) (&aphids (α⁻¹ A B C $_) (&α-gluel-proj ∣ (A ∧ (B ∧ C)) ∣ (gluel (pt A)) (gluel (pt A)) (ap (λ y → proj (pt A) y) (gluel (pt B))) (ap (λ y → proj (pt A) y) (gluel b)))) (&aphids (α⁻¹ A B C $_) (ap (α-proj A B C (pt C) $_) (gluer b))) (&aphids (α⁻¹ A B C $_) (ap (λ x → proj (pt A) (proj (pt B) (pt C))) (gluer b))) (ap³ (α⁻¹ A B C $_) (α-gluel.gluer-β A B C b)) (ap+-∘1 (α⁻¹ A B C $_) (α-gluel A B C) (gluer b)) (ap+-idp (λ x → α⁻¹ A B C $ (α-proj A B C (pt C) $ x)) (gluer b)) (ap+-idp (λ x → proj (proj (pt A) (pt B)) (pt C)) (gluer b)) (ap++ (λ x → ap² (α⁻¹ A B C $_) (α.gluel-β A B C x)) (gluer b)) (ap++ (λ x → ap-∘ (α⁻¹ A B C $_) (α A B C $_) (gluel x)) (gluer b)) (ap+-idp (λ x → proj x (pt C)) (gluer b)) (ap+-idp (λ x → basel) (gluer b)) (ap++ (λ x → ap-idf (gluel x)) (gluer b))))



&α-rinv-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : a == a} (p3 : Square x3 (&α⁻¹-gluer-proj X p0 p0 p2 p2) idp idp) {x4 : X} (p4 : x1 == x4) {x5 : x1 == a} (p5 : Square x5 (&α⁻¹-gluer-proj X p0 p1 p4 p4) idp idp) {x6 : x1 == a} (p6 : Square x6 (&α-gluer X x3 x5) idp idp) {x7 : x1 == a} (p7 : Square x7 x6 idp idp) {x8 : x1 == a} (p8 : Square x8 x7 idp idp) {x9 : x1 == x0} (p9 : Square x9 p1 idp idp) → Square idp p0 x8 x9
&α-rinv-gluer X idp idp idp ids idp ids ids ids ids ids = ids

&apα-rinv-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : a == a} (p3 : Square x3 (&α⁻¹-gluer-proj X p0 p0 p2 p2) idp idp) {x4 : X} (p4 : x1 == x4) {x5 : x1 == a} (p5 : Square x5 (&α⁻¹-gluer-proj X p0 p1 p4 p4) idp idp) {x6 : x1 == a} (p6 : Square x6 (&α-gluer X x3 x5) idp idp) {x7 : x1 == a} (p7 : Square x7 x6 idp idp) {x8 : x1 == a} (p8 : Square x8 x7 idp idp) {x9 : x1 == x0} (p9 : Square x9 p1 idp idp) → Cube (ap² f (&α-rinv-gluer X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9)) (&α-rinv-gluer Y (ap f p0) (ap f p1) (ap f p2) (&coh∙□ (ap² f p3) (&apα⁻¹-gluer-proj f p0 p0 p2 p2)) (ap f p4) (&coh∙□ (ap² f p5) (&apα⁻¹-gluer-proj f p0 p1 p4 p4)) (&coh∙□ (ap² f p6) (&apα-gluer f x3 x5)) (ap² f p7) (ap² f p8) (ap² f p9)) ids (&hids (ap f p0)) (&hids (ap f x8)) (&hids (ap f x9))
&apα-rinv-gluer f idp idp idp ids idp ids ids ids ids ids = idc

α-rinv : (A : Ptd i) (B : Ptd i) (C : Ptd i) (x : ∣ (A ∧ B) ∧ C ∣) → α⁻¹ A B C $ (α A B C $ x) == x
α-rinv A B C = α-rinv.f  module _ where

  module α-rinv =
    SmashElimId {g = λ x → α⁻¹ A B C $ (α A B C $ x)}
                {h = λ x → x}
                (λ x c → α-rinv-proj A B C c x)
                (gluel (proj (pt A) (pt B)))
                (α-rinv-gluel A B C)
                (gluer (pt C))
                (λ c → &α-rinv-gluer ∣ ((A ∧ B) ∧ C) ∣ (gluer (pt C)) (gluer c) (ap (λ x → proj x (pt C)) (gluer (pt B))) (α⁻¹.gluer-β A B C (proj (pt B) (pt C))) (ap (λ x → proj x c) (gluer (pt B))) (α⁻¹.gluer-β A B C (proj (pt B) c)) (&apα-gluer (α⁻¹ A B C $_) (gluer (proj (pt B) (pt C))) (gluer (proj (pt B) c))) (ap² (α⁻¹ A B C $_) (α.gluer-β A B C c)) (ap-∘ (α⁻¹ A B C $_) (α A B C $_) (gluer c)) (ap-idf (gluer c)))




&α-linv-proj-basel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → a == x2
&α-linv-proj-basel X idp idp idp = idp

&apα-linv-proj-basel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Square (ap f (&α-linv-proj-basel X p0 p1 p2)) (&α-linv-proj-basel Y (ap f p0) (ap f p1) (ap f p2)) idp idp
&apα-linv-proj-basel f idp idp idp = ids

&α-linv-proj-basel□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x1 x2) → Square (&α-linv-proj-basel X up0 up1 up2) (&α-linv-proj-basel X vp0 vp1 vp2) a x2
&α-linv-proj-basel□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap/α-linv-proj-basel : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x1 x == x2 x) → Cube (ap+ (λ x → &α-linv-proj-basel Y (p0 x) (p1 x) (p2 x)) r) (&α-linv-proj-basel□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r)) (&hids (&α-linv-proj-basel Y (p0 y) (p1 y) (p2 y))) (&hids (&α-linv-proj-basel Y (p0 z) (p1 z) (p2 z))) (&hids (ap a r)) (&hids (ap x2 r))
ap/α-linv-proj-basel {Y = Y} {y = y} idp p0 p1 p2 = &ap/α-linv-proj-basel-lemma Y (p0 y) (p1 y) (p2 y)  where
  &ap/α-linv-proj-basel-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Cube (&hids (&α-linv-proj-basel X p0 p1 p2)) (&α-linv-proj-basel□ X (&hids p0) (&hids p1) (&hids p2)) (&hids (&α-linv-proj-basel X p0 p1 p2)) (&hids (&α-linv-proj-basel X p0 p1 p2)) ids ids
  &ap/α-linv-proj-basel-lemma X idp idp idp = idc

&α-linv-proj-basel□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square x1 x2 up2 vp2) → Square a x2 (&α-linv-proj-basel X up0 up1 up2) (&α-linv-proj-basel X vp0 vp1 vp2)
&α-linv-proj-basel□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap+α-linv-proj-basel : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Cube (ap+ α (&α-linv-proj-basel X p0 p1 p2)) (&α-linv-proj-basel□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2)) (&hids (α a)) (&hids (α x2)) (&apα-linv-proj-basel f p0 p1 p2) (&apα-linv-proj-basel g p0 p1 p2)
ap+α-linv-proj-basel α {a = a} idp idp idp = ap+α-linv-proj-basel-lemma (α a)  where
  ap+α-linv-proj-basel-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α-linv-proj-basel□' X (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α-linv-proj-basel-lemma idp = idc

&apα-linv-proj-basel-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Cube (&apα-linv-proj-basel (λ _ → y) p0 p1 p2) ids (ap-cst y (&α-linv-proj-basel X p0 p1 p2)) (&α-linv-proj-basel□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2)) ids ids
&apα-linv-proj-basel-cst y idp idp idp = idc

&α-linv-proj-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : a == x4) {x5 : X} (p5 : x5 == x4) {x6 : x4 == x4} (p6 : Square x6 idp idp idp) {x7 : a == x5} (p7 : Square p4 p5 x7 x6) {x8 : a == a} (p8 : Square x8 (&α-gluel-proj X p0 p0 x7 x7) idp idp) {x9 : x3 == a} (p9 : Square x9 (&α-gluel-proj X p0 p1 p2 p3) idp idp) {x10 : x3 == a} (p10 : Square x10 (&α⁻¹-proj-gluel X x8 x9) idp idp) {x11 : x3 == a} (p11 : Square x11 x10 idp idp) {x12 : x3 == a} (p12 : Square x12 x11 idp idp) → Square idp (&α-linv-proj-basel X p0 p1 p2) x12 p3
&α-linv-proj-gluel X idp idp idp idp idp idp ids ids ids ids ids ids ids = ids

&apα-linv-proj-gluel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : a == x4) {x5 : X} (p5 : x5 == x4) {x6 : x4 == x4} (p6 : Square x6 idp idp idp) {x7 : a == x5} (p7 : Square p4 p5 x7 x6) {x8 : a == a} (p8 : Square x8 (&α-gluel-proj X p0 p0 x7 x7) idp idp) {x9 : x3 == a} (p9 : Square x9 (&α-gluel-proj X p0 p1 p2 p3) idp idp) {x10 : x3 == a} (p10 : Square x10 (&α⁻¹-proj-gluel X x8 x9) idp idp) {x11 : x3 == a} (p11 : Square x11 x10 idp idp) {x12 : x3 == a} (p12 : Square x12 x11 idp idp) → Cube (ap² f (&α-linv-proj-gluel X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12)) (&α-linv-proj-gluel Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap f p4) (ap f p5) (ap² f p6) (ap² f p7) (&coh∙□ (ap² f p8) (&apα-gluel-proj f p0 p0 x7 x7)) (&coh∙□ (ap² f p9) (&apα-gluel-proj f p0 p1 p2 p3)) (&coh∙□ (ap² f p10) (&apα⁻¹-proj-gluel f x8 x9)) (ap² f p11) (ap² f p12)) ids (&apα-linv-proj-basel f p0 p1 p2) (&hids (ap f x12)) (&hids (ap f p3))
&apα-linv-proj-gluel f idp idp idp idp idp idp ids ids ids ids ids ids ids = idc

&α-linv-proj-baser : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → a == x2
&α-linv-proj-baser X idp idp idp = idp

&apα-linv-proj-baser : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Square (ap f (&α-linv-proj-baser X p0 p1 p2)) (&α-linv-proj-baser Y (ap f p0) (ap f p1) (ap f p2)) idp idp
&apα-linv-proj-baser f idp idp idp = ids

&α-linv-proj-baser□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x1 x2) → Square (&α-linv-proj-baser X up0 up1 up2) (&α-linv-proj-baser X vp0 vp1 vp2) a x2
&α-linv-proj-baser□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap/α-linv-proj-baser : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x1 x == x2 x) → Cube (ap+ (λ x → &α-linv-proj-baser Y (p0 x) (p1 x) (p2 x)) r) (&α-linv-proj-baser□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r)) (&hids (&α-linv-proj-baser Y (p0 y) (p1 y) (p2 y))) (&hids (&α-linv-proj-baser Y (p0 z) (p1 z) (p2 z))) (&hids (ap a r)) (&hids (ap x2 r))
ap/α-linv-proj-baser {Y = Y} {y = y} idp p0 p1 p2 = &ap/α-linv-proj-baser-lemma Y (p0 y) (p1 y) (p2 y)  where
  &ap/α-linv-proj-baser-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Cube (&hids (&α-linv-proj-baser X p0 p1 p2)) (&α-linv-proj-baser□ X (&hids p0) (&hids p1) (&hids p2)) (&hids (&α-linv-proj-baser X p0 p1 p2)) (&hids (&α-linv-proj-baser X p0 p1 p2)) ids ids
  &ap/α-linv-proj-baser-lemma X idp idp idp = idc

&α-linv-proj-baser□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square x1 x2 up2 vp2) → Square a x2 (&α-linv-proj-baser X up0 up1 up2) (&α-linv-proj-baser X vp0 vp1 vp2)
&α-linv-proj-baser□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap+α-linv-proj-baser : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Cube (ap+ α (&α-linv-proj-baser X p0 p1 p2)) (&α-linv-proj-baser□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2)) (&hids (α a)) (&hids (α x2)) (&apα-linv-proj-baser f p0 p1 p2) (&apα-linv-proj-baser g p0 p1 p2)
ap+α-linv-proj-baser α {a = a} idp idp idp = ap+α-linv-proj-baser-lemma (α a)  where
  ap+α-linv-proj-baser-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α-linv-proj-baser□' X (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α-linv-proj-baser-lemma idp = idc

&apα-linv-proj-baser-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) → Cube (&apα-linv-proj-baser (λ _ → y) p0 p1 p2) ids (ap-cst y (&α-linv-proj-baser X p0 p1 p2)) (&α-linv-proj-baser□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2)) ids ids
&apα-linv-proj-baser-cst y idp idp idp = idc

&α-linv-proj-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : a == x4) {x5 : a == a} (p5 : Square x5 (&α-gluer X p4 p4) idp idp) {x6 : X} (p6 : x6 == x4) {x7 : x6 == a} (p7 : Square x7 (&α-gluer X p4 p6) idp idp) {x8 : X} (p8 : x8 == x4) {x9 : x4 == x4} (p9 : Square x9 idp idp idp) {x10 : a == x8} (p10 : Square p4 p8 x10 x9) {x11 : x4 == x4} (p11 : Square x11 idp idp idp) {x12 : x6 == x8} (p12 : Square p6 p8 x12 x11) {x13 : x6 == a} (p13 : Square x13 (&α-proj-gluel X p0 p0 x10 x12) idp idp) {x14 : x6 == a} (p14 : Square x13 x14 idp idp) {x15 : x3 == a} (p15 : Square x15 (&α-proj-gluel X p0 p1 p2 p3) idp idp) {x16 : x3 == a} (p16 : Square x15 x16 idp idp) {x17 : x3 == a} (p17 : Square x17 (&α⁻¹-proj-gluer X x5 x7 x14 x16) idp idp) {x18 : x3 == a} (p18 : Square x18 x17 idp idp) {x19 : x3 == a} (p19 : Square x19 x18 idp idp) → Square idp (&α-linv-proj-baser X p0 p1 p2) x19 p3
&α-linv-proj-gluer X idp idp idp idp idp ids idp ids idp ids ids ids ids ids ids ids ids ids ids ids = ids

&apα-linv-proj-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : a == x4) {x5 : a == a} (p5 : Square x5 (&α-gluer X p4 p4) idp idp) {x6 : X} (p6 : x6 == x4) {x7 : x6 == a} (p7 : Square x7 (&α-gluer X p4 p6) idp idp) {x8 : X} (p8 : x8 == x4) {x9 : x4 == x4} (p9 : Square x9 idp idp idp) {x10 : a == x8} (p10 : Square p4 p8 x10 x9) {x11 : x4 == x4} (p11 : Square x11 idp idp idp) {x12 : x6 == x8} (p12 : Square p6 p8 x12 x11) {x13 : x6 == a} (p13 : Square x13 (&α-proj-gluel X p0 p0 x10 x12) idp idp) {x14 : x6 == a} (p14 : Square x13 x14 idp idp) {x15 : x3 == a} (p15 : Square x15 (&α-proj-gluel X p0 p1 p2 p3) idp idp) {x16 : x3 == a} (p16 : Square x15 x16 idp idp) {x17 : x3 == a} (p17 : Square x17 (&α⁻¹-proj-gluer X x5 x7 x14 x16) idp idp) {x18 : x3 == a} (p18 : Square x18 x17 idp idp) {x19 : x3 == a} (p19 : Square x19 x18 idp idp) → Cube (ap² f (&α-linv-proj-gluer X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 p18 p19)) (&α-linv-proj-gluer Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap f p4) (&coh∙□ (ap² f p5) (&apα-gluer f p4 p4)) (ap f p6) (&coh∙□ (ap² f p7) (&apα-gluer f p4 p6)) (ap f p8) (ap² f p9) (ap² f p10) (ap² f p11) (ap² f p12) (&coh∙□ (ap² f p13) (&apα-proj-gluel f p0 p0 x10 x12)) (ap² f p14) (&coh∙□ (ap² f p15) (&apα-proj-gluel f p0 p1 p2 p3)) (ap² f p16) (&coh∙□ (ap² f p17) (&apα⁻¹-proj-gluer f x5 x7 x14 x16)) (ap² f p18) (ap² f p19)) ids (&apα-linv-proj-baser f p0 p1 p2) (&hids (ap f x19)) (&hids (ap f p3))
&apα-linv-proj-gluer f idp idp idp idp idp ids idp ids idp ids ids ids ids ids ids ids ids ids ids ids = idc

α-linv-proj : (A : Ptd i) (B : Ptd i) (C : Ptd i) (a : ∣ A ∣) (x : ∣ B ∧ C ∣) → α A B C $ (α⁻¹-proj A B C a $ x) == proj a x
α-linv-proj A B C a = α-linv-proj.f  module _ where

  module α-linv-proj =
    SmashElimId {g = λ x → α A B C $ (α⁻¹-proj A B C a $ x)}
                {h = λ x → proj a x}
                (λ b c → idp)
                (&α-linv-proj-basel ∣ (A ∧ (B ∧ C)) ∣ (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))))
                (λ b → &α-linv-proj-gluel ∣ (A ∧ (B ∧ C)) ∣ (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))) (ap (λ y → proj a y) (gluel b)) (gluer (proj (pt B) (pt C))) (gluer basel) (ap-cst baser (gluel (pt B))) (ap+ (λ y → gluer y) (gluel (pt B))) (α.gluel-β A B C (proj (pt A) (pt B))) (α.gluel-β A B C (proj a b)) (&apα⁻¹-proj-gluel (α A B C $_) (gluel (proj (pt A) (pt B))) (gluel (proj a b))) (ap² (α A B C $_) (α⁻¹-proj.gluel-β A B C a b)) (ap-∘ (α A B C $_) (α⁻¹-proj A B C a $_) (gluel b)))
                (&α-linv-proj-baser ∣ (A ∧ (B ∧ C)) ∣ (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluer (pt C))))
                (λ c → &α-linv-proj-gluer ∣ (A ∧ (B ∧ C)) ∣ (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluer (pt C))) (ap (λ y → proj a y) (gluer c)) (gluer (proj (pt B) (pt C))) (α.gluer-β A B C (pt C)) (gluer (proj (pt B) c)) (α.gluer-β A B C c) (gluer baser) (ap-cst baser (gluer (pt C))) (ap+ (λ y → gluer y) (gluer (pt C))) (ap-cst baser (gluer c)) (ap+ (λ y → gluer y) (gluer c)) (α-proj.gluel-β A B C c (pt A)) (ap-∘ (α A B C $_) (λ x → proj x c) (gluel (pt A))) (α-proj.gluel-β A B C c a) (ap-∘ (α A B C $_) (λ x → proj x c) (gluel a)) (&apα⁻¹-proj-gluer (α A B C $_) (gluer (pt C)) (gluer c) (ap (λ x → proj x c) (gluel (pt A))) (ap (λ x → proj x c) (gluel a))) (ap² (α A B C $_) (α⁻¹-proj.gluer-β A B C a c)) (ap-∘ (α A B C $_) (α⁻¹-proj A B C a $_) (gluer c)))




&α-linv-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : X} (p3 : x3 == x2) {x4 : x2 == x2} (p4 : Square x4 idp idp idp) {x5 : a == x3} (p5 : Square p2 p3 x5 x4) {x6 : a == a} (p6 : Square x6 (&α-proj-gluel X p0 p0 x5 x5) idp idp) {x7 : a == a} (p7 : Square x6 x7 idp idp) {x8 : X} (p8 : x1 == x8) {x9 : x1 == a} (p9 : Square x9 (&α-proj-gluel X p0 p1 p8 p8) idp idp) {x10 : x1 == a} (p10 : Square x9 x10 idp idp) {x11 : x1 == a} (p11 : Square x11 (&α⁻¹-gluel X x7 x10) idp idp) {x12 : x1 == a} (p12 : Square x12 x11 idp idp) {x13 : x1 == a} (p13 : Square x13 x12 idp idp) {x14 : x1 == x0} (p14 : Square x14 p1 idp idp) → Square idp p0 x13 x14
&α-linv-gluel X idp idp idp idp ids ids ids ids idp ids ids ids ids ids ids = ids

&apα-linv-gluel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : X} (p3 : x3 == x2) {x4 : x2 == x2} (p4 : Square x4 idp idp idp) {x5 : a == x3} (p5 : Square p2 p3 x5 x4) {x6 : a == a} (p6 : Square x6 (&α-proj-gluel X p0 p0 x5 x5) idp idp) {x7 : a == a} (p7 : Square x6 x7 idp idp) {x8 : X} (p8 : x1 == x8) {x9 : x1 == a} (p9 : Square x9 (&α-proj-gluel X p0 p1 p8 p8) idp idp) {x10 : x1 == a} (p10 : Square x9 x10 idp idp) {x11 : x1 == a} (p11 : Square x11 (&α⁻¹-gluel X x7 x10) idp idp) {x12 : x1 == a} (p12 : Square x12 x11 idp idp) {x13 : x1 == a} (p13 : Square x13 x12 idp idp) {x14 : x1 == x0} (p14 : Square x14 p1 idp idp) → Cube (ap² f (&α-linv-gluel X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14)) (&α-linv-gluel Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap² f p4) (ap² f p5) (&coh∙□ (ap² f p6) (&apα-proj-gluel f p0 p0 x5 x5)) (ap² f p7) (ap f p8) (&coh∙□ (ap² f p9) (&apα-proj-gluel f p0 p1 p8 p8)) (ap² f p10) (&coh∙□ (ap² f p11) (&apα⁻¹-gluel f x7 x10)) (ap² f p12) (ap² f p13) (ap² f p14)) ids (&hids (ap f p0)) (&hids (ap f x13)) (&hids (ap f x14))
&apα-linv-gluel f idp idp idp idp ids ids ids ids idp ids ids ids ids ids ids = idc


&α-linv-gluer-proj : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : a == a} (p2 : Square x2 (&α-gluer X p0 p0) idp idp) {x3 : X} (p3 : x3 == x0) {x4 : x3 == a} (p4 : Square x4 (&α-gluer X p0 p3) idp idp) {x5 : x3 == a} (p5 : Square x5 (&α-proj-gluer X p0 p3) idp idp) {x6 : x3 == a} (p6 : Square x5 x6 idp idp) {x7 : x1 == a} (p7 : Square x7 (&α-proj-gluer X p0 p1) idp idp) {x8 : x1 == a} (p8 : Square x7 x8 idp idp) {x9 : x1 == a} (p9 : Square x9 (&α⁻¹-gluer-proj X x2 x4 x6 x8) idp idp) {x10 : x1 == a} (p10 : Square x10 x9 idp idp) {x11 : x1 == a} (p11 : Square x11 x10 idp idp) {x12 : x1 == x0} (p12 : Square x12 p1 idp idp) → Square idp p0 x11 x12
&α-linv-gluer-proj X idp idp ids idp ids ids ids ids ids ids ids ids ids = ids

&apα-linv-gluer-proj : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : a == a} (p2 : Square x2 (&α-gluer X p0 p0) idp idp) {x3 : X} (p3 : x3 == x0) {x4 : x3 == a} (p4 : Square x4 (&α-gluer X p0 p3) idp idp) {x5 : x3 == a} (p5 : Square x5 (&α-proj-gluer X p0 p3) idp idp) {x6 : x3 == a} (p6 : Square x5 x6 idp idp) {x7 : x1 == a} (p7 : Square x7 (&α-proj-gluer X p0 p1) idp idp) {x8 : x1 == a} (p8 : Square x7 x8 idp idp) {x9 : x1 == a} (p9 : Square x9 (&α⁻¹-gluer-proj X x2 x4 x6 x8) idp idp) {x10 : x1 == a} (p10 : Square x10 x9 idp idp) {x11 : x1 == a} (p11 : Square x11 x10 idp idp) {x12 : x1 == x0} (p12 : Square x12 p1 idp idp) → Cube (ap² f (&α-linv-gluer-proj X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12)) (&α-linv-gluer-proj Y (ap f p0) (ap f p1) (&coh∙□ (ap² f p2) (&apα-gluer f p0 p0)) (ap f p3) (&coh∙□ (ap² f p4) (&apα-gluer f p0 p3)) (&coh∙□ (ap² f p5) (&apα-proj-gluer f p0 p3)) (ap² f p6) (&coh∙□ (ap² f p7) (&apα-proj-gluer f p0 p1)) (ap² f p8) (&coh∙□ (ap² f p9) (&apα⁻¹-gluer-proj f x2 x4 x6 x8)) (ap² f p10) (ap² f p11) (ap² f p12)) ids (&hids (ap f p0)) (&hids (ap f x11)) (&hids (ap f x12))
&apα-linv-gluer-proj f idp idp ids idp ids ids ids ids ids ids ids ids ids = idc



&α-linv-gluer-basel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : x0 == x0} (p3 : Square x3 idp idp idp) {x4 : a == x1} (p4 : Square p0 p1 x4 x3) {x5 : a == a} (p5 : Square x5 idp idp idp) {x6 : a == a} (p6 : Square x6 x5 idp idp) {x7 : x1 == x0} (p7 : Square x7 p1 idp idp) → Square (&α-linv-proj-basel X p2 p2 x4) p0 x6 x7
&α-linv-gluer-basel X idp idp idp ids ids ids ids ids = ids

&apα-linv-gluer-basel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : x0 == x0} (p3 : Square x3 idp idp idp) {x4 : a == x1} (p4 : Square p0 p1 x4 x3) {x5 : a == a} (p5 : Square x5 idp idp idp) {x6 : a == a} (p6 : Square x6 x5 idp idp) {x7 : x1 == x0} (p7 : Square x7 p1 idp idp) → Cube (ap² f (&α-linv-gluer-basel X p0 p1 p2 p3 p4 p5 p6 p7)) (&α-linv-gluer-basel Y (ap f p0) (ap f p1) (ap f p2) (ap² f p3) (ap² f p4) (ap² f p5) (ap² f p6) (ap² f p7)) (&apα-linv-proj-basel f p2 p2 x4) (&hids (ap f p0)) (&hids (ap f x6)) (&hids (ap f x7))
&apα-linv-gluer-basel f idp idp idp ids ids ids ids ids = idc

&α-linv-gluer-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : a == a} (p2 : Square x2 (&α-gluer X p0 p0) idp idp) {x3 : a == a} (p3 : Square x3 (&α-proj-gluer X p0 p0) idp idp) {x4 : a == a} (p4 : Square x3 x4 idp idp) {x5 : x1 == a} (p5 : Square x5 (&α-proj-gluer X p0 p1) idp idp) {x6 : x1 == a} (p6 : Square x5 x6 idp idp) {x7 : x1 == a} (p7 : Square x7 (&α⁻¹-gluer-proj X x2 x2 x4 x6) idp idp) {x8 : x1 == a} (p8 : Square x8 x7 idp idp) {x9 : x1 == a} (p9 : Square x9 x8 idp idp) {x10 : x1 == x0} (p10 : Square x10 p1 idp idp) {x11 : X} (p11 : x11 == x0) {x12 : X} (p12 : a == x12) {x13 : x0 == x0} (p13 : Square x13 idp idp idp) {x14 : a == x11} (p14 : Square p0 p11 x14 x13) {x15 : a == a} (p15 : Square x15 idp idp idp) {x16 : a == a} (p16 : Square x16 x15 idp idp) {x17 : x11 == x0} (p17 : Square x17 p11 idp idp) {x18 : a == a} (p18 : Square x18 (&α-gluel-proj X p12 p12 x14 x14) idp idp) {x19 : x0 == x0} (p19 : Square x19 idp idp idp) {x20 : x1 == x11} (p20 : Square p1 p11 x20 x19) {x21 : x1 == a} (p21 : Square x21 (&α-gluel-proj X p12 p12 x14 x20) idp idp) {x22 : x1 == a} (p22 : Square x22 (&α⁻¹-proj-gluel X x18 x21) idp idp) {x23 : x1 == a} (p23 : Square x23 x22 idp idp) {x24 : x1 == a} (p24 : Square x24 x23 idp idp) {x25 : Square idp (&α-linv-proj-basel X p12 p12 x14) x24 x20} (p25 : Cube x25 (&α-linv-proj-gluel X p12 p12 x14 x20 p0 p11 p13 p14 p18 p21 p22 p23 p24) ids (&hids (&α-linv-proj-basel X p12 p12 x14)) (&hids x24) (&hids x20)) {x26 : a == a} (p26 : Square x26 idp idp idp) {x27 : Square p0 p0 x26 x19} (p27 : Cube x27 (&hids p0) (&hids p0) (&hids p0) p26 p19) {x28 : a == a} (p28 : Square x26 x28 idp idp) {x29 : a == a} (p29 : Square x29 idp idp idp) {x30 : a == a} (p30 : Square x29 x30 idp idp) {x31 : Square x30 idp idp idp} (p31 : Cube p29 x31 p30 ids ids ids) {x32 : a == a} (p32 : Square x32 idp idp idp) {x33 : Square (&α-gluel-proj X p12 p12 x14 x14) idp x3 x29} (p33 : Cube x33 (&α-gluel-gluer X p0 p0 p12 p11 p13 p14 p13 p14 p3 p29) (&hids (&α-gluel-proj X p12 p12 x14 x14)) ids (&hids x3) (&hids x29)) {x34 : Square idp idp x3 x3} (p34 : Cube x34 (&vids x3) ids ids (&hids x3) (&hids x3)) {x35 : Square idp idp x29 x29} (p35 : Cube x35 (&vids x29) ids ids (&hids x29) (&hids x29)) {x36 : Square x18 x32 x3 x29} (p36 : Cube p18 p32 x36 x33 x34 x35) {x37 : Square x18 x32 x4 x30} (p37 : Cube x36 x37 (&hids x18) (&hids x32) p4 p30) {x38 : a == a} (p38 : Square x38 idp idp idp) {x39 : a == a} (p39 : Square x38 x39 idp idp) {x40 : Square x39 idp idp idp} (p40 : Cube p38 x40 p39 ids ids ids) {x41 : Square (&α-gluel-proj X p12 p12 x14 x20) idp x5 x38} (p41 : Cube x41 (&α-gluel-gluer X p0 p1 p12 p11 p13 p14 p19 p20 p5 p38) (&hids (&α-gluel-proj X p12 p12 x14 x20)) ids (&hids x5) (&hids x38)) {x42 : Square idp idp x5 x5} (p42 : Cube x42 (&vids x5) ids ids (&hids x5) (&hids x5)) {x43 : Square idp idp x38 x38} (p43 : Cube x43 (&vids x38) ids ids (&hids x38) (&hids x38)) {x44 : Square x21 x32 x5 x38} (p44 : Cube p21 p32 x44 x41 x42 x43) {x45 : Square x21 x32 x6 x39} (p45 : Cube x44 x45 (&hids x21) (&hids x32) p6 p39) {x46 : Square x28 idp idp idp} (p46 : Cube p26 x46 p28 ids ids ids) {x47 : Square x7 idp x23 x28} (p47 : Cube x47 (&α⁻¹-gluer-gluel X x4 x6 x2 x18 x31 x37 x40 x45 (&coh∙□ p23 p22) x46) p7 ids (&hids x23) (&hids x28)) {x48 : Square x7 x7 idp idp} (p48 : Cube x48 (&hids x7) (&hids x7) (&hids x7) ids ids) {x49 : Square x23 x23 idp idp} (p49 : Cube x49 (&hids x23) (&hids x23) (&hids x23) ids ids) {x50 : Square x28 x28 idp idp} (p50 : Cube x50 (&hids x28) (&hids x28) (&hids x28) ids ids) {x51 : Square x7 idp x23 x28} (p51 : Cube x51 x47 x48 ids x49 x50) {x52 : Square x7 idp x24 x26} (p52 : Cube x52 x51 (&hids x7) ids p24 p28) {x53 : Square idp idp x24 x24} (p53 : Cube x53 (&vids x24) ids ids (&hids x24) (&hids x24)) {x54 : Square idp idp x26 x26} (p54 : Cube x54 (&vids x26) ids ids (&hids x26) (&hids x26)) {x55 : Square x8 x15 x24 x26} (p55 : Cube p8 p15 x55 x52 x53 x54) {x56 : Square x9 x16 x24 x26} (p56 : Cube p9 p16 x56 x55 x53 x54) {x57 : Square idp idp x20 x20} (p57 : Cube x57 (&vids x20) ids ids (&hids x20) (&hids x20)) {x58 : Square idp idp x19 x19} (p58 : Cube x58 (&vids x19) ids ids (&hids x19) (&hids x19)) {x59 : Square x10 x17 x20 x19} (p59 : Cube p10 p17 x59 p20 x57 x58) → Cube (&α-linv-gluer-proj X p0 p1 p2 p0 p2 p3 p4 p5 p6 p7 p8 p9 p10) (&α-linv-gluer-basel X p0 p11 p12 p13 p14 p15 p16 p17) x25 x27 x56 x59
&α-linv-gluer-gluel X idp idp ids ids ids ids ids ids ids ids ids idp idp ids ids ids ids ids ids ids ids ids ids ids ids idc ids idc ids ids ids idc ids idc idc idc idc idc ids ids idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc = idc

&α-linv-gluer-baser : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : x0 == x0} (p3 : Square x3 idp idp idp) {x4 : a == x1} (p4 : Square p0 p1 x4 x3) {x5 : a == a} (p5 : Square x5 idp idp idp) {x6 : a == a} (p6 : Square x6 x5 idp idp) {x7 : x1 == x0} (p7 : Square x7 p1 idp idp) → Square (&α-linv-proj-baser X p2 p2 x4) p0 x6 x7
&α-linv-gluer-baser X idp idp idp ids ids ids ids ids = ids

&apα-linv-gluer-baser : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : x0 == x0} (p3 : Square x3 idp idp idp) {x4 : a == x1} (p4 : Square p0 p1 x4 x3) {x5 : a == a} (p5 : Square x5 idp idp idp) {x6 : a == a} (p6 : Square x6 x5 idp idp) {x7 : x1 == x0} (p7 : Square x7 p1 idp idp) → Cube (ap² f (&α-linv-gluer-baser X p0 p1 p2 p3 p4 p5 p6 p7)) (&α-linv-gluer-baser Y (ap f p0) (ap f p1) (ap f p2) (ap² f p3) (ap² f p4) (ap² f p5) (ap² f p6) (ap² f p7)) (&apα-linv-proj-baser f p2 p2 x4) (&hids (ap f p0)) (&hids (ap f x6)) (&hids (ap f x7))
&apα-linv-gluer-baser f idp idp idp ids ids ids ids ids = idc

&α-linv-gluer-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : a == a} (p2 : Square x2 (&α-gluer X p0 p0) idp idp) {x3 : x1 == a} (p3 : Square x3 (&α-gluer X p0 p1) idp idp) {x4 : x1 == a} (p4 : Square x4 (&α-proj-gluer X p0 p1) idp idp) {x5 : x1 == a} (p5 : Square x4 x5 idp idp) {x6 : x1 == a} (p6 : Square x6 (&α⁻¹-gluer-proj X x2 x3 x5 x5) idp idp) {x7 : x1 == a} (p7 : Square x7 x6 idp idp) {x8 : x1 == a} (p8 : Square x8 x7 idp idp) {x9 : x1 == x0} (p9 : Square x9 p1 idp idp) {x10 : X} (p10 : x10 == x0) {x11 : X} (p11 : a == x11) {x12 : x0 == x0} (p12 : Square x12 idp idp idp) {x13 : a == x10} (p13 : Square p0 p10 x13 x12) {x14 : a == a} (p14 : Square x14 idp idp idp) {x15 : a == a} (p15 : Square x15 x14 idp idp) {x16 : x10 == x0} (p16 : Square x16 p10 idp idp) {x17 : x0 == x0} (p17 : Square x17 idp idp idp) {x18 : x1 == x10} (p18 : Square p1 p10 x18 x17) {x19 : x1 == a} (p19 : Square x19 (&α-proj-gluel X p11 p11 x13 x18) idp idp) {x20 : x1 == a} (p20 : Square x19 x20 idp idp) {x21 : x1 == a} (p21 : Square x21 (&α⁻¹-proj-gluer X x2 x3 x20 x20) idp idp) {x22 : x1 == a} (p22 : Square x22 x21 idp idp) {x23 : x1 == a} (p23 : Square x23 x22 idp idp) {x24 : Square idp (&α-linv-proj-baser X p11 p11 x13) x23 x18} (p24 : Cube x24 (&α-linv-proj-gluer X p11 p11 x13 x18 p0 p2 p1 p3 p10 p12 p13 p17 p18 p19 p20 p19 p20 p21 p22 p23) ids (&hids (&α-linv-proj-baser X p11 p11 x13)) (&hids x23) (&hids x18)) {x25 : a == a} (p25 : Square x25 idp idp idp) {x26 : Square p0 p0 x25 x17} (p26 : Cube x26 (&hids p0) (&hids p0) (&hids p0) p25 p17) {x27 : a == a} (p27 : Square x25 x27 idp idp) {x28 : Square x27 idp idp idp} (p28 : Cube p25 x28 p27 ids ids ids) {x29 : Square x6 idp x22 x27} (p29 : Cube x29 (&α⁻¹-gluer-gluer X x2 x3 x5 x20 (&coh∙□ p22 p21) x28) p6 ids (&hids x22) (&hids x27)) {x30 : Square x6 x6 idp idp} (p30 : Cube x30 (&hids x6) (&hids x6) (&hids x6) ids ids) {x31 : Square x22 x22 idp idp} (p31 : Cube x31 (&hids x22) (&hids x22) (&hids x22) ids ids) {x32 : Square x27 x27 idp idp} (p32 : Cube x32 (&hids x27) (&hids x27) (&hids x27) ids ids) {x33 : Square x6 idp x22 x27} (p33 : Cube x33 x29 x30 ids x31 x32) {x34 : Square x6 idp x23 x25} (p34 : Cube x34 x33 (&hids x6) ids p23 p27) {x35 : Square idp idp x23 x23} (p35 : Cube x35 (&vids x23) ids ids (&hids x23) (&hids x23)) {x36 : Square idp idp x25 x25} (p36 : Cube x36 (&vids x25) ids ids (&hids x25) (&hids x25)) {x37 : Square x7 x14 x23 x25} (p37 : Cube p7 p14 x37 x34 x35 x36) {x38 : Square x8 x15 x23 x25} (p38 : Cube p8 p15 x38 x37 x35 x36) {x39 : Square idp idp x18 x18} (p39 : Cube x39 (&vids x18) ids ids (&hids x18) (&hids x18)) {x40 : Square idp idp x17 x17} (p40 : Cube x40 (&vids x17) ids ids (&hids x17) (&hids x17)) {x41 : Square x9 x16 x18 x17} (p41 : Cube p9 p16 x41 p18 x39 x40) → Cube (&α-linv-gluer-proj X p0 p1 p2 p1 p3 p4 p5 p4 p5 p6 p7 p8 p9) (&α-linv-gluer-baser X p0 p10 p11 p12 p13 p14 p15 p16) x24 x26 x38 x41
&α-linv-gluer-gluer X idp idp ids ids ids ids ids ids ids ids idp idp ids ids ids ids ids ids ids ids ids ids ids ids idc ids idc ids idc idc idc idc idc idc idc idc idc idc idc idc idc idc = idc

α-linv-gluer : (A : Ptd i) (B : Ptd i) (C : Ptd i) (x : ∣ B ∧ C ∣) → Square (α-linv-proj A B C (pt A) x) (gluer (proj (pt B) (pt C))) (ap (λ x → α A B C $ (α⁻¹ A B C $ x)) (gluer x)) (ap (λ x → x) (gluer x))
α-linv-gluer A B C =
  Smash-elim (λ b c → &α-linv-gluer-proj ∣ (A ∧ (B ∧ C)) ∣ (gluer (proj (pt B) (pt C))) (gluer (proj b c)) (α.gluer-β A B C (pt C)) (gluer (proj (pt B) c)) (α.gluer-β A B C c) (α-proj.gluer-β A B C c (pt B)) (ap-∘ (α A B C $_) (λ x → proj x c) (gluer (pt B))) (α-proj.gluer-β A B C c b) (ap-∘ (α A B C $_) (λ x → proj x c) (gluer b)) (&apα⁻¹-gluer-proj (α A B C $_) (gluer (pt C)) (gluer c) (ap (λ x → proj x c) (gluer (pt B))) (ap (λ x → proj x c) (gluer b))) (ap² (α A B C $_) (α⁻¹.gluer-β A B C (proj b c))) (ap-∘ (α A B C $_) (α⁻¹ A B C $_) (gluer (proj b c))) (ap-idf (gluer (proj b c))))
             (&α-linv-gluer-basel ∣ (A ∧ (B ∧ C)) ∣ (gluer (proj (pt B) (pt C))) (gluer basel) (gluel (pt A)) (ap-cst baser (gluel (pt B))) (ap+ (λ y → gluer y) (gluel (pt B))) (ap² (α A B C $_) (α⁻¹.gluer-β A B C basel)) (ap-∘ (α A B C $_) (α⁻¹ A B C $_) (gluer basel)) (ap-idf (gluer basel)))
             (λ b → ↓-Square-in (&α-linv-gluer-gluel ∣ (A ∧ (B ∧ C)) ∣ (gluer (proj (pt B) (pt C))) (gluer (proj b (pt C))) (α.gluer-β A B C (pt C)) (α-proj.gluer-β A B C (pt C) (pt B)) (ap-∘ (α A B C $_) (λ x → proj x (pt C)) (gluer (pt B))) (α-proj.gluer-β A B C (pt C) b) (ap-∘ (α A B C $_) (λ x → proj x (pt C)) (gluer b)) (&apα⁻¹-gluer-proj (α A B C $_) (gluer (pt C)) (gluer (pt C)) (ap (λ x → proj x (pt C)) (gluer (pt B))) (ap (λ x → proj x (pt C)) (gluer b))) (ap² (α A B C $_) (α⁻¹.gluer-β A B C (proj b (pt C)))) (ap-∘ (α A B C $_) (α⁻¹ A B C $_) (gluer (proj b (pt C)))) (ap-idf (gluer (proj b (pt C)))) (gluer basel) (gluel (pt A)) (ap-cst baser (gluel (pt B))) (ap+ (λ y → gluer y) (gluel (pt B))) (ap² (α A B C $_) (α⁻¹.gluer-β A B C basel)) (ap-∘ (α A B C $_) (α⁻¹ A B C $_) (gluer basel)) (ap-idf (gluer basel)) (α.gluel-β A B C (proj (pt A) (pt B))) (ap-cst baser (gluel b)) (ap+ (λ y → gluer y) (gluel b)) (α.gluel-β A B C (proj (pt A) b)) (&apα⁻¹-proj-gluel (α A B C $_) (gluel (proj (pt A) (pt B))) (gluel (proj (pt A) b))) (ap² (α A B C $_) (α⁻¹-proj.gluel-β A B C (pt A) b)) (ap-∘ (α A B C $_) (α⁻¹-proj A B C (pt A) $_) (gluel b)) (α-linv-proj.gluel-β A B C (pt A) b) (ap-cst (proj (pt A) (proj (pt B) (pt C))) (gluel b)) (ap+-cst (gluer (proj (pt B) (pt C))) (gluel b)) (ap-∘ (α A B C $_) (λ x → proj (proj (pt A) (pt B)) (pt C)) (gluel b)) (ap-cst (proj (pt A) (proj (pt B) (pt C))) (gluer (pt B))) (ap-∘ (α A B C $_) (λ x → basel) (gluer (pt B))) (ap-∘-cst (α A B C $_) basel (gluer (pt B))) (α.gluel-β A B C baser) (α-gluel.gluer-β A B C (pt B)) (ap+-idp (α-proj A B C (pt C) $_) (gluer (pt B))) (ap+-idp (λ x → proj (pt A) (proj (pt B) (pt C))) (gluer (pt B))) (ap++ (λ x → α.gluel-β A B C x) (gluer (pt B))) (ap+-∘1 (α A B C $_) (λ x → gluel x) (gluer (pt B))) (ap-cst (proj (pt A) (proj (pt B) (pt C))) (gluer b)) (ap-∘ (α A B C $_) (λ x → basel) (gluer b)) (ap-∘-cst (α A B C $_) basel (gluer b)) (α-gluel.gluer-β A B C b) (ap+-idp (α-proj A B C (pt C) $_) (gluer b)) (ap+-idp (λ x → proj (pt A) (proj (pt B) (pt C))) (gluer b)) (ap++ (λ x → α.gluel-β A B C x) (gluer b)) (ap+-∘1 (α A B C $_) (λ x → gluel x) (gluer b)) (ap-∘-cst (α A B C $_) (proj (proj (pt A) (pt B)) (pt C)) (gluel b)) (&apα⁻¹-gluer-gluel (α A B C $_) (ap (λ x → proj x (pt C)) (gluer (pt B))) (ap (λ x → proj x (pt C)) (gluer b)) (gluer (pt C)) (gluel (proj (pt A) (pt B))) (ap-cst basel (gluer (pt B))) (ap+ (λ x → gluel x) (gluer (pt B))) (ap-cst basel (gluer b)) (ap+ (λ x → gluel x) (gluer b)) (α⁻¹-proj.gluel-β A B C (pt A) b) (ap-cst (proj (proj (pt A) (pt B)) (pt C)) (gluel b))) (&aphids (α A B C $_) (&α⁻¹-gluer-proj ∣ ((A ∧ B) ∧ C) ∣ (gluer (pt C)) (gluer (pt C)) (ap (λ x → proj x (pt C)) (gluer (pt B))) (ap (λ x → proj x (pt C)) (gluer b)))) (&aphids (α A B C $_) (ap (α⁻¹-proj A B C (pt A) $_) (gluel b))) (&aphids (α A B C $_) (ap (λ x → proj (proj (pt A) (pt B)) (pt C)) (gluel b))) (ap³ (α A B C $_) (α⁻¹-gluer.gluel-β A B C b)) (ap+-∘1 (α A B C $_) (α⁻¹-gluer A B C) (gluel b)) (ap+-idp (λ x → α A B C $ (α⁻¹-proj A B C (pt A) $ x)) (gluel b)) (ap+-idp (λ x → proj (pt A) (proj (pt B) (pt C))) (gluel b)) (ap++ (λ x → ap² (α A B C $_) (α⁻¹.gluer-β A B C x)) (gluel b)) (ap++ (λ x → ap-∘ (α A B C $_) (α⁻¹ A B C $_) (gluer x)) (gluel b)) (ap+-idp (λ x → proj (pt A) x) (gluel b)) (ap+-idp (λ x → baser) (gluel b)) (ap++ (λ x → ap-idf (gluer x)) (gluel b))))
             (&α-linv-gluer-baser ∣ (A ∧ (B ∧ C)) ∣ (gluer (proj (pt B) (pt C))) (gluer baser) (gluel (pt A)) (ap-cst baser (gluer (pt C))) (ap+ (λ y → gluer y) (gluer (pt C))) (ap² (α A B C $_) (α⁻¹.gluer-β A B C baser)) (ap-∘ (α A B C $_) (α⁻¹ A B C $_) (gluer baser)) (ap-idf (gluer baser)))
             (λ c → ↓-Square-in (&α-linv-gluer-gluer ∣ (A ∧ (B ∧ C)) ∣ (gluer (proj (pt B) (pt C))) (gluer (proj (pt B) c)) (α.gluer-β A B C (pt C)) (α.gluer-β A B C c) (α-proj.gluer-β A B C c (pt B)) (ap-∘ (α A B C $_) (λ x → proj x c) (gluer (pt B))) (&apα⁻¹-gluer-proj (α A B C $_) (gluer (pt C)) (gluer c) (ap (λ x → proj x c) (gluer (pt B))) (ap (λ x → proj x c) (gluer (pt B)))) (ap² (α A B C $_) (α⁻¹.gluer-β A B C (proj (pt B) c))) (ap-∘ (α A B C $_) (α⁻¹ A B C $_) (gluer (proj (pt B) c))) (ap-idf (gluer (proj (pt B) c))) (gluer baser) (gluel (pt A)) (ap-cst baser (gluer (pt C))) (ap+ (λ y → gluer y) (gluer (pt C))) (ap² (α A B C $_) (α⁻¹.gluer-β A B C baser)) (ap-∘ (α A B C $_) (α⁻¹ A B C $_) (gluer baser)) (ap-idf (gluer baser)) (ap-cst baser (gluer c)) (ap+ (λ y → gluer y) (gluer c)) (α-proj.gluel-β A B C c (pt A)) (ap-∘ (α A B C $_) (λ x → proj x c) (gluel (pt A))) (&apα⁻¹-proj-gluer (α A B C $_) (gluer (pt C)) (gluer c) (ap (λ x → proj x c) (gluel (pt A))) (ap (λ x → proj x c) (gluel (pt A)))) (ap² (α A B C $_) (α⁻¹-proj.gluer-β A B C (pt A) c)) (ap-∘ (α A B C $_) (α⁻¹-proj A B C (pt A) $_) (gluer c)) (α-linv-proj.gluer-β A B C (pt A) c) (ap-cst (proj (pt A) (proj (pt B) (pt C))) (gluer c)) (ap+-cst (gluer (proj (pt B) (pt C))) (gluer c)) (ap-∘ (α A B C $_) (λ x → proj (proj (pt A) (pt B)) (pt C)) (gluer c)) (ap-∘-cst (α A B C $_) (proj (proj (pt A) (pt B)) (pt C)) (gluer c)) (&apα⁻¹-gluer-gluer (α A B C $_) (gluer (pt C)) (gluer c) (ap (λ x → proj x c) (gluer (pt B))) (ap (λ x → proj x c) (gluel (pt A))) (α⁻¹-proj.gluer-β A B C (pt A) c) (ap-cst (proj (proj (pt A) (pt B)) (pt C)) (gluer c))) (&aphids (α A B C $_) (&α⁻¹-gluer-proj ∣ ((A ∧ B) ∧ C) ∣ (gluer (pt C)) (gluer c) (ap (λ x → proj x c) (gluer (pt B))) (ap (λ x → proj x c) (gluer (pt B))))) (&aphids (α A B C $_) (ap (α⁻¹-proj A B C (pt A) $_) (gluer c))) (&aphids (α A B C $_) (ap (λ x → proj (proj (pt A) (pt B)) (pt C)) (gluer c))) (ap³ (α A B C $_) (α⁻¹-gluer.gluer-β A B C c)) (ap+-∘1 (α A B C $_) (α⁻¹-gluer A B C) (gluer c)) (ap+-idp (λ x → α A B C $ (α⁻¹-proj A B C (pt A) $ x)) (gluer c)) (ap+-idp (λ x → proj (pt A) (proj (pt B) (pt C))) (gluer c)) (ap++ (λ x → ap² (α A B C $_) (α⁻¹.gluer-β A B C x)) (gluer c)) (ap++ (λ x → ap-∘ (α A B C $_) (α⁻¹ A B C $_) (gluer x)) (gluer c)) (ap+-idp (λ x → proj (pt A) x) (gluer c)) (ap+-idp (λ x → baser) (gluer c)) (ap++ (λ x → ap-idf (gluer x)) (gluer c))))


α-linv : (A : Ptd i) (B : Ptd i) (C : Ptd i) (x : ∣ A ∧ (B ∧ C) ∣) → α A B C $ (α⁻¹ A B C $ x) == x
α-linv A B C = α-linv.f  module _ where

  module α-linv =
    SmashElimId {g = λ x → α A B C $ (α⁻¹ A B C $ x)}
                {h = λ x → x}
                (λ a → α-linv-proj A B C a)
                (gluel (pt A))
                (λ a → &α-linv-gluel ∣ (A ∧ (B ∧ C)) ∣ (gluel (pt A)) (gluel a) (gluer (proj (pt B) (pt C))) (gluer baser) (ap-cst baser (gluer (pt C))) (ap+ (λ y → gluer y) (gluer (pt C))) (α-proj.gluel-β A B C (pt C) (pt A)) (ap-∘ (α A B C $_) (λ x → proj x (pt C)) (gluel (pt A))) (ap (λ y → proj a y) (gluer (pt C))) (α-proj.gluel-β A B C (pt C) a) (ap-∘ (α A B C $_) (λ x → proj x (pt C)) (gluel a)) (&apα⁻¹-gluel (α A B C $_) (ap (λ x → proj x (pt C)) (gluel (pt A))) (ap (λ x → proj x (pt C)) (gluel a))) (ap² (α A B C $_) (α⁻¹.gluel-β A B C a)) (ap-∘ (α A B C $_) (α⁻¹ A B C $_) (gluel a)) (ap-idf (gluel a)))
                (gluer (proj (pt B) (pt C)))
                (α-linv-gluer A B C)
