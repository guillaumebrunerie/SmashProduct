{-# OPTIONS --without-K --rewriting #-}

open import SmashCommon
open import PathInduction
open import SmashDefs
open import BasicsGenerated

module HexagonGenerated {i : ULevel} where

hexagon-proj-basel : Coh ((X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → x1 == a)
hexagon-proj-basel = path-induction

hexagon-proj-gluel : Coh ((X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : a == a} (p3 : Square x3 (& ∧-map-gluer X p0 p0 idp) idp idp) {x4 : x2 == a} (p4 : Square x4 (& ∧-map-gluer X p0 p2 idp) idp idp) {x5 : x2 == a} (p5 : Square x5 (& α-proj-gluer X x3 x4) idp idp) {x6 : x2 == a} (p6 : Square x6 x5 idp idp) {x7 : x2 == a} (p7 : Square x7 x6 idp idp) {x8 : x1 == a} (p8 : Square x8 (& ∧-map-gluer X p0 p1 idp) idp idp) {x9 : x1 == a} (p9 : Square x9 (& α-proj-gluer X x3 x8) idp idp) {x10 : x1 == a} (p10 : Square x10 x9 idp idp) {x11 : x1 == a} (p11 : Square x11 x10 idp idp) {x12 : x1 == x2} (p12 : Square x12 (& σ-gluel X x7 x11) idp idp) {x13 : x1 == x2} (p13 : Square x13 x12 idp idp) {x14 : x1 == x2} (p14 : Square x14 x13 idp idp) {x15 : a == a} (p15 : Square x15 (& α-gluer X p0 p0) idp idp) {x16 : a == a} (p16 : Square x16 (& σ-gluel X x15 x15) idp idp) {x17 : a == a} (p17 : Square x17 x16 idp idp) {x18 : a == a} (p18 : Square x18 x17 idp idp) {x19 : X} (p19 : x19 == x0) {x20 : x19 == a} (p20 : Square x20 (& α-gluer X p0 p19) idp idp) {x21 : x19 == a} (p21 : Square x21 (& σ-gluel X x15 x20) idp idp) {x22 : x19 == a} (p22 : Square x22 x21 idp idp) {x23 : x19 == a} (p23 : Square x23 x22 idp idp) {x24 : x19 == a} (p24 : Square x24 (& α-proj-gluer X p0 p19) idp idp) {x25 : x19 == a} (p25 : Square x24 x25 idp idp) {x26 : x1 == a} (p26 : Square x26 (& α-proj-gluer X p0 p1) idp idp) {x27 : x1 == a} (p27 : Square x26 x27 idp idp) {x28 : x1 == a} (p28 : Square x28 (& α-proj-gluel X x18 x23 x25 x27) idp idp) {x29 : x1 == a} (p29 : Square x29 x28 idp idp) {x30 : x1 == a} (p30 : Square x30 x29 idp idp) → Square idp (& hexagon-proj-basel X p0 p2) x14 x30)
hexagon-proj-gluel = path-induction

hexagon-proj-baser : Coh ((X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → x1 == a)
hexagon-proj-baser = path-induction

hexagon-proj-gluer : Coh ((X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : a == x4) {x5 : X} (p5 : x5 == x4) {x6 : a == a} (p6 : Square x6 (& ∧-map-gluel X p0 p0 idp) idp idp) {x7 : X} (p7 : x7 == x4) {x8 : x4 == x4} (p8 : Square x8 idp idp idp) {x9 : a == x7} (p9 : Square p4 p7 x9 x8) {x10 : a == a} (p10 : Square x10 (& σ-gluer X x9 x9) idp idp) {x11 : a == a} (p11 : Square x11 x10 idp idp) {x12 : a == a} (p12 : Square x12 x11 idp idp) {x13 : a == a} (p13 : Square x12 x13 idp idp) {x14 : x4 == x4} (p14 : Square x14 idp idp idp) {x15 : x5 == x7} (p15 : Square p5 p7 x15 x14) {x16 : x5 == a} (p16 : Square x16 (& σ-gluer X x9 x15) idp idp) {x17 : x5 == a} (p17 : Square x17 x16 idp idp) {x18 : x5 == a} (p18 : Square x18 x17 idp idp) {x19 : x5 == a} (p19 : Square x18 x19 idp idp) {x20 : x5 == a} (p20 : Square x20 (& α-proj-gluel X x6 x6 x13 x19) idp idp) {x21 : x5 == a} (p21 : Square x21 x20 idp idp) {x22 : x5 == a} (p22 : Square x22 x21 idp idp) {x23 : x1 == a} (p23 : Square x23 (& ∧-map-gluel X p0 p1 idp) idp idp) {x24 : x1 == x1} (p24 : Square x24 (& σ-gluer X p2 p2) idp idp) {x25 : x1 == x1} (p25 : Square x25 x24 idp idp) {x26 : x1 == x1} (p26 : Square x26 x25 idp idp) {x27 : x1 == x1} (p27 : Square x26 x27 idp idp) {x28 : x3 == x1} (p28 : Square x28 (& σ-gluer X p2 p3) idp idp) {x29 : x3 == x1} (p29 : Square x29 x28 idp idp) {x30 : x3 == x1} (p30 : Square x30 x29 idp idp) {x31 : x3 == x1} (p31 : Square x30 x31 idp idp) {x32 : x3 == a} (p32 : Square x32 (& α-proj-gluel X x6 x23 x27 x31) idp idp) {x33 : x3 == a} (p33 : Square x33 x32 idp idp) {x34 : x3 == a} (p34 : Square x34 x33 idp idp) {x35 : x3 == x5} (p35 : Square x35 (& σ-gluer X x22 x34) idp idp) {x36 : x3 == x5} (p36 : Square x36 x35 idp idp) {x37 : x3 == x5} (p37 : Square x37 x36 idp idp) {x38 : a == a} (p38 : Square x38 (& α-gluel-proj X p0 p0 x9 x9) idp idp) {x39 : a == a} (p39 : Square x39 (& σ-gluer X x38 x38) idp idp) {x40 : a == a} (p40 : Square x40 x39 idp idp) {x41 : a == a} (p41 : Square x41 x40 idp idp) {x42 : x3 == a} (p42 : Square x42 (& α-gluel-proj X p0 p1 p2 p3) idp idp) {x43 : x3 == a} (p43 : Square x43 (& σ-gluer X x38 x42) idp idp) {x44 : x3 == a} (p44 : Square x44 x43 idp idp) {x45 : x3 == a} (p45 : Square x45 x44 idp idp) {x46 : x3 == a} (p46 : Square x46 (& α-proj-gluer X x41 x45) idp idp) {x47 : x3 == a} (p47 : Square x47 x46 idp idp) {x48 : x3 == a} (p48 : Square x48 x47 idp idp) → Square idp (& hexagon-proj-baser X p4 p5) x37 x48)
hexagon-proj-gluer = path-induction

hexagon-proj : (A : Type i) {{_ : Pointed A}} (B : Type i) {{_ : Pointed B}} (C : Type i) {{_ : Pointed C}} (c : C) (x : A ∧ B) → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C c (σ A B x)) == α B C A (σ A (B ∧ C) (α-proj A B C c x))
hexagon-proj A B C c = hexagon-proj.f  module _ where

  module hexagon-proj =
    SmashElimId {g = λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C c (σ A B x))}
                {h = λ x → α B C A (σ A (B ∧ C) (α-proj A B C c x))}
                (λ a b → idp)
                (& hexagon-proj-basel (B ∧ (C ∧ A)) (gluer (proj pt pt)) (gluer (proj c pt)))
                (λ a → & hexagon-proj-gluel (B ∧ (C ∧ A)) (gluer (proj pt pt)) (gluer (proj c a)) (gluer (proj c pt)) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (proj pt pt)) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (proj pt c)) (& apα-proj-gluer (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluer (proj pt pt)) (gluer (proj pt c))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj.gluer-β B A C c pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj B A C c) (gluer pt)) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (proj a c)) (& apα-proj-gluer (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluer (proj pt pt)) (gluer (proj a c))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj.gluer-β B A C c a)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj B A C c) (gluer a)) (& apσ-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C c x)) (gluer pt) (gluer a)) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C c x)) (σ.gluel-β A B a)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C c x)) (σ A B) (gluel a)) (α.gluer-β B C A pt) (& apσ-gluel (λ z → α B C A z) (gluer pt) (gluer pt)) (ap² (λ z → α B C A z) (σ.gluel-β A (B ∧ C) pt)) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (gluel pt)) (gluer (proj pt a)) (α.gluer-β B C A a) (& apσ-gluel (λ z → α B C A z) (gluer pt) (gluer a)) (ap² (λ z → α B C A z) (σ.gluel-β A (B ∧ C) a)) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (gluel a)) (α-proj.gluer-β B C A a pt) (ap-∘ (λ z → α B C A (σ A (B ∧ C) z)) (λ z → proj a z) (gluer pt)) (α-proj.gluer-β B C A a c) (ap-∘ (λ z → α B C A (σ A (B ∧ C) z)) (λ z → proj a z) (gluer c)) (& apα-proj-gluel (λ x → α B C A (σ A (B ∧ C) x)) (gluel pt) (gluel a) (ap (λ z → proj a z) (gluer pt)) (ap (λ z → proj a z) (gluer c))) (ap² (λ x → α B C A (σ A (B ∧ C) x)) (α-proj.gluel-β A B C c a)) (ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (α-proj A B C c) (gluel a)))
                (& hexagon-proj-baser (B ∧ (C ∧ A)) (gluer (proj pt pt)) (gluer (proj c pt)))
                (λ b → & hexagon-proj-gluer (B ∧ (C ∧ A)) (gluel pt) (gluel b) (ap (λ z → proj b z) (gluel pt)) (ap (λ z → proj b z) (gluel c)) (gluer (proj pt pt)) (gluer (proj c pt)) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) pt) (gluer basel) (ap-cst baser (gluel pt)) (ap+ (λ y → gluer y) (gluel pt)) (& apσ-gluer (λ x → proj pt x) (gluel pt) (gluel pt)) (ap² (λ x → proj pt x) (σ.gluer-β A C pt)) (ap-∘ (λ x → proj pt x) (σ A C) (gluer pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ z → proj pt z) (gluer pt)) (ap-cst baser (gluel c)) (ap+ (λ y → gluer y) (gluel c)) (& apσ-gluer (λ x → proj pt x) (gluel pt) (gluel c)) (ap² (λ x → proj pt x) (σ.gluer-β A C c)) (ap-∘ (λ x → proj pt x) (σ A C) (gluer c)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ z → proj pt z) (gluer c)) (& apα-proj-gluel (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluer pt)) (ap (λ z → proj pt z) (gluer c))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj.gluel-β B A C c pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj B A C c) (gluel pt)) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) b) (& apσ-gluer (λ x → proj b x) (gluel pt) (gluel pt)) (ap² (λ x → proj b x) (σ.gluer-β A C pt)) (ap-∘ (λ x → proj b x) (σ A C) (gluer pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ z → proj b z) (gluer pt)) (& apσ-gluer (λ x → proj b x) (gluel pt) (gluel c)) (ap² (λ x → proj b x) (σ.gluer-β A C c)) (ap-∘ (λ x → proj b x) (σ A C) (gluer c)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ z → proj b z) (gluer c)) (& apα-proj-gluel (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel b) (ap (λ z → proj b z) (gluer pt)) (ap (λ z → proj b z) (gluer c))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj.gluel-β B A C c b)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj B A C c) (gluel b)) (& apσ-gluer (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C c x)) (gluel pt) (gluel b)) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C c x)) (σ.gluer-β A B b)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C c x)) (σ A B) (gluer b)) (α.gluel-β B C A (proj pt pt)) (& apσ-gluer (λ z → α B C A z) (gluel (proj pt pt)) (gluel (proj pt pt))) (ap² (λ z → α B C A z) (σ.gluer-β A (B ∧ C) (proj pt pt))) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (gluer (proj pt pt))) (α.gluel-β B C A (proj b c)) (& apσ-gluer (λ z → α B C A z) (gluel (proj pt pt)) (gluel (proj b c))) (ap² (λ z → α B C A z) (σ.gluer-β A (B ∧ C) (proj b c))) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (gluer (proj b c))) (& apα-proj-gluer (λ x → α B C A (σ A (B ∧ C) x)) (gluer (proj pt pt)) (gluer (proj b c))) (ap² (λ x → α B C A (σ A (B ∧ C) x)) (α-proj.gluer-β A B C c b)) (ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (α-proj A B C c) (gluer b)))

hexagon-gluel-proj : Coh ((X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : a == a} (p4 : Square x4 (& ∧-map-gluel X p0 p0 idp) idp idp) {x5 : X} (p5 : a == x5) {x6 : X} (p6 : x6 == x5) {x7 : x5 == x5} (p7 : Square x7 idp idp idp) {x8 : a == x6} (p8 : Square p5 p6 x8 x7) {x9 : a == a} (p9 : Square x9 (& σ-gluel X x8 x8) idp idp) {x10 : a == a} (p10 : Square x10 x9 idp idp) {x11 : a == a} (p11 : Square x11 x10 idp idp) {x12 : a == a} (p12 : Square x11 x12 idp idp) {x13 : a == a} (p13 : Square x13 (& α-gluel-proj X x4 x4 x12 x12) idp idp) {x14 : a == a} (p14 : Square x14 x13 idp idp) {x15 : a == a} (p15 : Square x15 x14 idp idp) {x16 : x1 == a} (p16 : Square x16 (& ∧-map-gluel X p0 p1 idp) idp idp) {x17 : x1 == x1} (p17 : Square x17 (& σ-gluel X p2 p2) idp idp) {x18 : x1 == x1} (p18 : Square x18 x17 idp idp) {x19 : x1 == x1} (p19 : Square x19 x18 idp idp) {x20 : x1 == x1} (p20 : Square x19 x20 idp idp) {x21 : x3 == x1} (p21 : Square x21 (& σ-gluel X p2 p3) idp idp) {x22 : x3 == x1} (p22 : Square x22 x21 idp idp) {x23 : x3 == x1} (p23 : Square x23 x22 idp idp) {x24 : x3 == x1} (p24 : Square x23 x24 idp idp) {x25 : x3 == a} (p25 : Square x25 (& α-gluel-proj X x4 x16 x20 x24) idp idp) {x26 : x3 == a} (p26 : Square x26 x25 idp idp) {x27 : x3 == a} (p27 : Square x27 x26 idp idp) {x28 : x3 == a} (p28 : Square x28 (& ∧-map-gluel X x15 x27 idp) idp idp) {x29 : x3 == a} (p29 : Square x29 x28 idp idp) {x30 : x3 == a} (p30 : Square x30 x29 idp idp) {x31 : a == a} (p31 : Square x31 (& α-gluer X p5 p5) idp idp) {x32 : a == a} (p32 : Square x32 (& σ-gluel X x31 x31) idp idp) {x33 : a == a} (p33 : Square x33 x32 idp idp) {x34 : a == a} (p34 : Square x34 x33 idp idp) {x35 : X} (p35 : x35 == x5) {x36 : x35 == a} (p36 : Square x36 (& α-gluer X p5 p35) idp idp) {x37 : x35 == a} (p37 : Square x37 (& σ-gluel X x31 x36) idp idp) {x38 : x35 == a} (p38 : Square x38 x37 idp idp) {x39 : x35 == a} (p39 : Square x39 x38 idp idp) {x40 : x5 == x5} (p40 : Square x40 idp idp idp) {x41 : x35 == x6} (p41 : Square p35 p6 x41 x40) {x42 : x35 == a} (p42 : Square x42 (& α-proj-gluel X p0 p0 x8 x41) idp idp) {x43 : x35 == a} (p43 : Square x42 x43 idp idp) {x44 : x3 == a} (p44 : Square x44 (& α-proj-gluel X p0 p1 p2 p3) idp idp) {x45 : x3 == a} (p45 : Square x44 x45 idp idp) {x46 : x3 == a} (p46 : Square x46 (& α-gluel-proj X x34 x39 x43 x45) idp idp) {x47 : x3 == a} (p47 : Square x47 x46 idp idp) {x48 : x3 == a} (p48 : Square x48 x47 idp idp) → Square idp idp x30 x48)
hexagon-gluel-proj = path-induction

hexagon-gluel-basel : Coh ((X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : a == x1) {x2 : a == a} (p2 : Square x2 (& ∧-map-gluel X p1 p1 idp) idp idp) {x3 : X} (p3 : x3 == x0) {x4 : x0 == x0} (p4 : Square x4 idp idp idp) {x5 : a == x3} (p5 : Square p0 p3 x5 x4) {x6 : a == a} (p6 : Square x6 (& σ-gluel X x5 x5) idp idp) {x7 : a == a} (p7 : Square x7 x6 idp idp) {x8 : a == a} (p8 : Square x8 x7 idp idp) {x9 : a == a} (p9 : Square x8 x9 idp idp) {x10 : a == a} (p10 : Square x10 (& α-gluel-proj X x2 x2 x9 x9) idp idp) {x11 : a == a} (p11 : Square x11 x10 idp idp) {x12 : a == a} (p12 : Square x12 x11 idp idp) {x13 : a == a} (p13 : Square x13 (& ∧-map-gluel X x12 x12 idp) idp idp) {x14 : a == a} (p14 : Square x14 x13 idp idp) {x15 : a == a} (p15 : Square x15 x14 idp idp) {x16 : a == a} (p16 : Square x16 idp idp idp) {x17 : a == a} (p17 : Square x17 x16 idp idp) → Square (& hexagon-proj-basel X p0 p0) idp x15 x17)
hexagon-gluel-basel = path-induction

hexagon-gluel-gluel : Coh ((X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : a == a} (p3 : Square x3 (& ∧-map-gluel X p2 p2 idp) idp idp) {x4 : X} (p4 : x4 == x0) {x5 : x0 == x0} (p5 : Square x5 idp idp idp) {x6 : a == x4} (p6 : Square p0 p4 x6 x5) {x7 : a == a} (p7 : Square x7 (& σ-gluel X x6 x6) idp idp) {x8 : a == a} (p8 : Square x8 x7 idp idp) {x9 : a == a} (p9 : Square x9 x8 idp idp) {x10 : a == a} (p10 : Square x9 x10 idp idp) {x11 : a == a} (p11 : Square x11 (& α-gluel-proj X x3 x3 x10 x10) idp idp) {x12 : a == a} (p12 : Square x12 x11 idp idp) {x13 : a == a} (p13 : Square x13 x12 idp idp) {x14 : x0 == x0} (p14 : Square x14 idp idp idp) {x15 : x1 == x4} (p15 : Square p1 p4 x15 x14) {x16 : x1 == a} (p16 : Square x16 (& σ-gluel X x6 x15) idp idp) {x17 : x1 == a} (p17 : Square x17 x16 idp idp) {x18 : x1 == a} (p18 : Square x18 x17 idp idp) {x19 : x1 == a} (p19 : Square x18 x19 idp idp) {x20 : x1 == a} (p20 : Square x20 (& α-gluel-proj X x3 x3 x10 x19) idp idp) {x21 : x1 == a} (p21 : Square x21 x20 idp idp) {x22 : x1 == a} (p22 : Square x22 x21 idp idp) {x23 : x1 == a} (p23 : Square x23 (& ∧-map-gluel X x13 x22 idp) idp idp) {x24 : x1 == a} (p24 : Square x24 x23 idp idp) {x25 : x1 == a} (p25 : Square x25 x24 idp idp) {x26 : a == a} (p26 : Square x26 (& α-gluer X p0 p0) idp idp) {x27 : a == a} (p27 : Square x27 (& σ-gluel X x26 x26) idp idp) {x28 : a == a} (p28 : Square x28 x27 idp idp) {x29 : a == a} (p29 : Square x29 x28 idp idp) {x30 : x1 == a} (p30 : Square x30 (& α-gluer X p0 p1) idp idp) {x31 : x1 == a} (p31 : Square x31 (& σ-gluel X x26 x30) idp idp) {x32 : x1 == a} (p32 : Square x32 x31 idp idp) {x33 : x1 == a} (p33 : Square x33 x32 idp idp) {x34 : x1 == a} (p34 : Square x34 (& α-proj-gluel X p2 p2 x6 x15) idp idp) {x35 : x1 == a} (p35 : Square x34 x35 idp idp) {x36 : x1 == a} (p36 : Square x36 (& α-gluel-proj X x29 x33 x35 x35) idp idp) {x37 : x1 == a} (p37 : Square x37 x36 idp idp) {x38 : x1 == a} (p38 : Square x38 x37 idp idp) {x39 : a == a} (p39 : Square x39 (& ∧-map-gluel X x13 x13 idp) idp idp) {x40 : a == a} (p40 : Square x40 x39 idp idp) {x41 : a == a} (p41 : Square x41 x40 idp idp) {x42 : a == a} (p42 : Square x42 idp idp idp) {x43 : a == a} (p43 : Square x43 x42 idp idp) {x44 : a == a} (p44 : Square x44 (& ∧-map-gluer X p0 p0 idp) idp idp) {x45 : a == a} (p45 : Square x45 (& α-proj-gluer X x44 x44) idp idp) {x46 : a == a} (p46 : Square x46 x45 idp idp) {x47 : a == a} (p47 : Square x47 x46 idp idp) {x48 : x1 == a} (p48 : Square x48 (& ∧-map-gluer X p0 p1 idp) idp idp) {x49 : x1 == a} (p49 : Square x49 (& α-proj-gluer X x44 x48) idp idp) {x50 : x1 == a} (p50 : Square x50 x49 idp idp) {x51 : x1 == a} (p51 : Square x51 x50 idp idp) {x52 : x1 == a} (p52 : Square x52 (& σ-gluel X x47 x51) idp idp) {x53 : x1 == a} (p53 : Square x53 x52 idp idp) {x54 : x1 == a} (p54 : Square x54 x53 idp idp) {x55 : x1 == a} (p55 : Square x55 (& α-proj-gluer X p0 p1) idp idp) {x56 : x1 == a} (p56 : Square x55 x56 idp idp) {x57 : x1 == a} (p57 : Square x57 (& α-proj-gluel X x29 x33 x56 x56) idp idp) {x58 : x1 == a} (p58 : Square x58 x57 idp idp) {x59 : x1 == a} (p59 : Square x59 x58 idp idp) {x60 : Square idp (& hexagon-proj-basel X p0 p0) x54 x59} (p60 : Cube x60 (& hexagon-proj-gluel X p0 p1 p0 p44 p44 p45 p46 p47 p48 p49 p50 p51 p52 p53 p54 p26 p27 p28 p29 p1 p30 p31 p32 p33 p55 p56 p55 p56 p57 p58 p59) ids (& hids (& hexagon-proj-basel X p0 p0)) (& hids x54) (& hids x59)) {x61 : a == a} (p61 : Square x61 idp idp idp) {x62 : Square idp idp x61 x61} (p62 : Cube x62 (& vids x61) ids ids (& hids x61) (& hids x61)) {x63 : Square (& α-gluel-proj X x3 x3 x10 x10) (& α-gluel-proj X x3 x3 x10 x10) x61 x61} (p63 : Cube x63 (& hids (& α-gluel-proj X x3 x3 x10 x10)) (& hids (& α-gluel-proj X x3 x3 x10 x10)) (& hids (& α-gluel-proj X x3 x3 x10 x10)) p61 p61) {x64 : Square x11 x11 x61 x61} (p64 : Cube p11 p11 x64 x63 x62 x62) {x65 : Square x12 x12 x61 x61} (p65 : Cube p12 p12 x65 x64 x62 x62) {x66 : Square x13 x13 x61 x61} (p66 : Cube p13 p13 x66 x65 x62 x62) {x67 : a == a} (p67 : Square x67 idp idp idp) {x68 : a == a} (p68 : Square x68 idp idp idp) {x69 : a == a} (p69 : Square x69 idp idp idp) {x70 : a == a} (p70 : Square x70 idp idp idp) {x71 : a == a} (p71 : Square x69 x71 idp idp) {x72 : a == a} (p72 : Square x72 (& ∧-map-gluer X p0 p0 idp) idp idp) {x73 : a == a} (p73 : Square x73 idp idp idp) {x74 : a == a} (p74 : Square x73 x74 idp idp) {x75 : Square x74 idp idp idp} (p75 : Cube p73 x75 p74 ids ids ids) {x76 : x0 == x0} (p76 : Square x76 idp idp idp) {x77 : Square p0 p0 x73 x76} (p77 : Cube x77 (& hids p0) (& hids p0) (& hids p0) p73 p76) {x78 : x0 == x0} (p78 : Square x78 idp idp idp) {x79 : x0 == x0} (p79 : Square x79 idp idp idp) {x80 : Square x79 (& σ-gluel X x5 x5) idp idp} (p80 : Cube x80 ids p79 (& σ-gluel□ X p5 p5) ids ids) {x81 : Square p0 p0 x7 x79} (p81 : Cube x81 (& σ-gluel□' X p6 p6) (& hids p0) (& hids p0) p7 x80) {x82 : Square x78 x79 idp idp} (p82 : Cube x82 ids p78 p79 ids ids) {x83 : Square p0 p0 x8 x78} (p83 : Cube x83 x81 (& hids p0) (& hids p0) p8 x82) {x84 : Square x76 x78 idp idp} (p84 : Cube x84 ids p76 p78 ids ids) {x85 : Square p0 p0 x9 x76} (p85 : Cube x85 x83 (& hids p0) (& hids p0) p9 x84) {x86 : Square idp idp x9 x9} (p86 : Cube x86 (& vids x9) ids ids (& hids x9) (& hids x9)) {x87 : Square (& ∧-map-gluer X p0 p0 idp) (& ∧-map-gluer X p0 p0 idp) x9 x73} (p87 : Cube x87 (& ∧-map-gluer□ X x77 x85 x86) (& hids (& ∧-map-gluer X p0 p0 idp)) (& hids (& ∧-map-gluer X p0 p0 idp)) (& hids x9) (& hids x73)) {x88 : Square idp idp x73 x73} (p88 : Cube x88 (& vids x73) ids ids (& hids x73) (& hids x73)) {x89 : Square x44 x72 x9 x73} (p89 : Cube p44 p72 x89 x87 x86 x88) {x90 : Square x44 x72 x10 x74} (p90 : Cube x89 x90 (& hids x44) (& hids x72) p10 p74) {x91 : Square x71 idp idp idp} (p91 : Cube p69 x91 p71 ids ids ids) {x92 : Square x11 idp x46 x71} (p92 : Cube x92 (& α-gluel-gluer X x44 x44 x3 x72 x75 x90 x75 x90 (& coh∙□ p46 p45) x91) p11 ids (& hids x46) (& hids x71)) {x93 : Square x11 x11 idp idp} (p93 : Cube x93 (& hids x11) (& hids x11) (& hids x11) ids ids) {x94 : Square x46 x46 idp idp} (p94 : Cube x94 (& hids x46) (& hids x46) (& hids x46) ids ids) {x95 : Square x71 x71 idp idp} (p95 : Cube x95 (& hids x71) (& hids x71) (& hids x71) ids ids) {x96 : Square x11 idp x46 x71} (p96 : Cube x96 x92 x93 ids x94 x95) {x97 : Square x11 idp x47 x69} (p97 : Cube x97 x96 (& hids x11) ids p47 p71) {x98 : a == a} (p98 : Square x70 x98 idp idp) {x99 : a == a} (p99 : Square x99 idp idp idp) {x100 : a == a} (p100 : Square x99 x100 idp idp) {x101 : Square x100 idp idp idp} (p101 : Cube p99 x101 p100 ids ids ids) {x102 : x0 == x0} (p102 : Square x102 idp idp idp) {x103 : Square p0 p0 x99 x102} (p103 : Cube x103 (& hids p0) (& hids p0) (& hids p0) p99 p102) {x104 : x0 == x0} (p104 : Square x104 idp idp idp) {x105 : x0 == x0} (p105 : Square x105 idp idp idp) {x106 : Square x105 (& σ-gluel X x5 x14) idp idp} (p106 : Cube x106 ids p105 (& σ-gluel□ X p5 p14) ids ids) {x107 : Square p1 p0 x16 x105} (p107 : Cube x107 (& σ-gluel□' X p6 p15) (& hids p1) (& hids p0) p16 x106) {x108 : Square x104 x105 idp idp} (p108 : Cube x108 ids p104 p105 ids ids) {x109 : Square p1 p0 x17 x104} (p109 : Cube x109 x107 (& hids p1) (& hids p0) p17 x108) {x110 : Square x102 x104 idp idp} (p110 : Cube x110 ids p102 p104 ids ids) {x111 : Square p1 p0 x18 x102} (p111 : Cube x111 x109 (& hids p1) (& hids p0) p18 x110) {x112 : Square idp idp x18 x18} (p112 : Cube x112 (& vids x18) ids ids (& hids x18) (& hids x18)) {x113 : Square (& ∧-map-gluer X p0 p1 idp) (& ∧-map-gluer X p0 p0 idp) x18 x99} (p113 : Cube x113 (& ∧-map-gluer□ X x103 x111 x112) (& hids (& ∧-map-gluer X p0 p1 idp)) (& hids (& ∧-map-gluer X p0 p0 idp)) (& hids x18) (& hids x99)) {x114 : Square idp idp x99 x99} (p114 : Cube x114 (& vids x99) ids ids (& hids x99) (& hids x99)) {x115 : Square x48 x72 x18 x99} (p115 : Cube p48 p72 x115 x113 x112 x114) {x116 : Square x48 x72 x19 x100} (p116 : Cube x115 x116 (& hids x48) (& hids x72) p19 p100) {x117 : Square x98 idp idp idp} (p117 : Cube p70 x117 p98 ids ids ids) {x118 : Square x20 idp x50 x98} (p118 : Cube x118 (& α-gluel-gluer X x44 x48 x3 x72 x75 x90 x101 x116 (& coh∙□ p50 p49) x117) p20 ids (& hids x50) (& hids x98)) {x119 : Square x20 x20 idp idp} (p119 : Cube x119 (& hids x20) (& hids x20) (& hids x20) ids ids) {x120 : Square x50 x50 idp idp} (p120 : Cube x120 (& hids x50) (& hids x50) (& hids x50) ids ids) {x121 : Square x98 x98 idp idp} (p121 : Cube x121 (& hids x98) (& hids x98) (& hids x98) ids ids) {x122 : Square x20 idp x50 x98} (p122 : Cube x122 x118 x119 ids x120 x121) {x123 : Square x20 idp x51 x70} (p123 : Cube x123 x122 (& hids x20) ids p51 p98) {x124 : Square x68 (& σ-gluel X x69 x70) idp idp} (p124 : Cube x124 ids p68 (& σ-gluel□ X p69 p70) ids ids) {x125 : Square x20 x11 x52 x68} (p125 : Cube x125 (& σ-gluel□' X x97 x123) (& hids x20) (& hids x11) p52 x124) {x126 : Square x67 x68 idp idp} (p126 : Cube x126 ids p67 p68 ids ids) {x127 : Square x20 x11 x53 x67} (p127 : Cube x127 x125 (& hids x20) (& hids x11) p53 x126) {x128 : Square x61 x67 idp idp} (p128 : Cube x128 ids p61 p67 ids ids) {x129 : Square x20 x11 x54 x61} (p129 : Cube x129 x127 (& hids x20) (& hids x11) p54 x128) {x130 : Square idp idp x54 x54} (p130 : Cube x130 (& vids x54) ids ids (& hids x54) (& hids x54)) {x131 : Square x21 x12 x54 x61} (p131 : Cube p21 p12 x131 x129 x130 x62) {x132 : Square x22 x13 x54 x61} (p132 : Cube p22 p13 x132 x131 x130 x62) {x133 : Square (& ∧-map-gluel X x13 x22 idp) (& ∧-map-gluel X x13 x13 idp) x54 x61} (p133 : Cube x133 (& ∧-map-gluel□ X x66 x132 x130) (& hids (& ∧-map-gluel X x13 x22 idp)) (& hids (& ∧-map-gluel X x13 x13 idp)) (& hids x54) (& hids x61)) {x134 : Square x23 x39 x54 x61} (p134 : Cube p23 p39 x134 x133 x130 x62) {x135 : Square x24 x40 x54 x61} (p135 : Cube p24 p40 x135 x134 x130 x62) {x136 : Square x25 x41 x54 x61} (p136 : Cube p25 p41 x136 x135 x130 x62) {x137 : a == a} (p137 : Square x61 x137 idp idp) {x138 : Square x137 idp idp idp} (p138 : Cube p61 x138 p137 ids ids ids) {x139 : Square x36 idp x58 x137} (p139 : Cube x139 (& α-gluel-gluel X x29 x33 x35 x56 (& coh∙□ p58 p57) x138) p36 ids (& hids x58) (& hids x137)) {x140 : Square x36 x36 idp idp} (p140 : Cube x140 (& hids x36) (& hids x36) (& hids x36) ids ids) {x141 : Square x58 x58 idp idp} (p141 : Cube x141 (& hids x58) (& hids x58) (& hids x58) ids ids) {x142 : Square x137 x137 idp idp} (p142 : Cube x142 (& hids x137) (& hids x137) (& hids x137) ids ids) {x143 : Square x36 idp x58 x137} (p143 : Cube x143 x139 x140 ids x141 x142) {x144 : Square x36 idp x59 x61} (p144 : Cube x144 x143 (& hids x36) ids p59 p137) {x145 : Square idp idp x59 x59} (p145 : Cube x145 (& vids x59) ids ids (& hids x59) (& hids x59)) {x146 : Square x37 x42 x59 x61} (p146 : Cube p37 p42 x146 x144 x145 x62) {x147 : Square x38 x43 x59 x61} (p147 : Cube p38 p43 x147 x146 x145 x62) → Cube (& hexagon-gluel-proj X p2 p2 x6 x15 p3 p0 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p3 p7 p8 p9 p10 p16 p17 p18 p19 p20 p21 p22 p23 p24 p25 p26 p27 p28 p29 p1 p30 p31 p32 p33 p14 p15 p34 p35 p34 p35 p36 p37 p38) (& hexagon-gluel-basel X p0 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p39 p40 p41 p42 p43) x60 x62 x136 x147)
hexagon-gluel-gluel = path-induction

hexagon-gluel-baser : Coh ((X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : a == x1) {x2 : a == a} (p2 : Square x2 (& ∧-map-gluel X p1 p1 idp) idp idp) {x3 : X} (p3 : x3 == x0) {x4 : x0 == x0} (p4 : Square x4 idp idp idp) {x5 : a == x3} (p5 : Square p0 p3 x5 x4) {x6 : a == a} (p6 : Square x6 (& σ-gluel X x5 x5) idp idp) {x7 : a == a} (p7 : Square x7 x6 idp idp) {x8 : a == a} (p8 : Square x8 x7 idp idp) {x9 : a == a} (p9 : Square x8 x9 idp idp) {x10 : a == a} (p10 : Square x10 (& α-gluel-proj X x2 x2 x9 x9) idp idp) {x11 : a == a} (p11 : Square x11 x10 idp idp) {x12 : a == a} (p12 : Square x12 x11 idp idp) {x13 : a == a} (p13 : Square x13 (& ∧-map-gluel X x12 x12 idp) idp idp) {x14 : a == a} (p14 : Square x14 x13 idp idp) {x15 : a == a} (p15 : Square x15 x14 idp idp) {x16 : a == a} (p16 : Square x16 idp idp idp) {x17 : a == a} (p17 : Square x17 x16 idp idp) → Square (& hexagon-proj-baser X p0 p0) idp x15 x17)
hexagon-gluel-baser = path-induction

hexagon-gluel-gluer : Coh ((X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : a == a} (p2 : Square x2 (& ∧-map-gluel X p0 p0 idp) idp idp) {x3 : X} (p3 : a == x3) {x4 : X} (p4 : x4 == x3) {x5 : x3 == x3} (p5 : Square x5 idp idp idp) {x6 : a == x4} (p6 : Square p3 p4 x6 x5) {x7 : a == a} (p7 : Square x7 (& σ-gluel X x6 x6) idp idp) {x8 : a == a} (p8 : Square x8 x7 idp idp) {x9 : a == a} (p9 : Square x9 x8 idp idp) {x10 : a == a} (p10 : Square x9 x10 idp idp) {x11 : a == a} (p11 : Square x11 (& α-gluel-proj X x2 x2 x10 x10) idp idp) {x12 : a == a} (p12 : Square x12 x11 idp idp) {x13 : a == a} (p13 : Square x13 x12 idp idp) {x14 : x1 == a} (p14 : Square x14 (& ∧-map-gluel X p0 p1 idp) idp idp) {x15 : X} (p15 : x1 == x15) {x16 : x1 == x1} (p16 : Square x16 (& σ-gluel X p15 p15) idp idp) {x17 : x1 == x1} (p17 : Square x17 x16 idp idp) {x18 : x1 == x1} (p18 : Square x18 x17 idp idp) {x19 : x1 == x1} (p19 : Square x18 x19 idp idp) {x20 : x1 == a} (p20 : Square x20 (& α-gluel-proj X x2 x14 x19 x19) idp idp) {x21 : x1 == a} (p21 : Square x21 x20 idp idp) {x22 : x1 == a} (p22 : Square x22 x21 idp idp) {x23 : x1 == a} (p23 : Square x23 (& ∧-map-gluel X x13 x22 idp) idp idp) {x24 : x1 == a} (p24 : Square x24 x23 idp idp) {x25 : x1 == a} (p25 : Square x25 x24 idp idp) {x26 : a == a} (p26 : Square x26 (& α-gluer X p3 p3) idp idp) {x27 : a == a} (p27 : Square x27 (& σ-gluel X x26 x26) idp idp) {x28 : a == a} (p28 : Square x28 x27 idp idp) {x29 : a == a} (p29 : Square x29 x28 idp idp) {x30 : a == a} (p30 : Square x30 (& α-proj-gluel X p0 p0 x6 x6) idp idp) {x31 : a == a} (p31 : Square x30 x31 idp idp) {x32 : x1 == a} (p32 : Square x32 (& α-proj-gluel X p0 p1 p15 p15) idp idp) {x33 : x1 == a} (p33 : Square x32 x33 idp idp) {x34 : x1 == a} (p34 : Square x34 (& α-gluel-proj X x29 x29 x31 x33) idp idp) {x35 : x1 == a} (p35 : Square x35 x34 idp idp) {x36 : x1 == a} (p36 : Square x36 x35 idp idp) {x37 : a == a} (p37 : Square x37 (& ∧-map-gluel X x13 x13 idp) idp idp) {x38 : a == a} (p38 : Square x38 x37 idp idp) {x39 : a == a} (p39 : Square x39 x38 idp idp) {x40 : a == a} (p40 : Square x40 idp idp idp) {x41 : a == a} (p41 : Square x41 x40 idp idp) {x42 : X} (p42 : x42 == x3) {x43 : x3 == x3} (p43 : Square x43 idp idp idp) {x44 : a == x42} (p44 : Square p3 p42 x44 x43) {x45 : a == a} (p45 : Square x45 (& σ-gluer X x44 x44) idp idp) {x46 : a == a} (p46 : Square x46 x45 idp idp) {x47 : a == a} (p47 : Square x47 x46 idp idp) {x48 : a == a} (p48 : Square x47 x48 idp idp) {x49 : a == a} (p49 : Square x49 (& α-proj-gluel X x2 x2 x48 x48) idp idp) {x50 : a == a} (p50 : Square x50 x49 idp idp) {x51 : a == a} (p51 : Square x51 x50 idp idp) {x52 : X} (p52 : x1 == x52) {x53 : x1 == x1} (p53 : Square x53 (& σ-gluer X p52 p52) idp idp) {x54 : x1 == x1} (p54 : Square x54 x53 idp idp) {x55 : x1 == x1} (p55 : Square x55 x54 idp idp) {x56 : x1 == x1} (p56 : Square x55 x56 idp idp) {x57 : x1 == a} (p57 : Square x57 (& α-proj-gluel X x2 x14 x56 x56) idp idp) {x58 : x1 == a} (p58 : Square x58 x57 idp idp) {x59 : x1 == a} (p59 : Square x59 x58 idp idp) {x60 : x1 == a} (p60 : Square x60 (& σ-gluer X x51 x59) idp idp) {x61 : x1 == a} (p61 : Square x61 x60 idp idp) {x62 : x1 == a} (p62 : Square x62 x61 idp idp) {x63 : a == a} (p63 : Square x63 (& α-gluel-proj X p0 p0 x44 x44) idp idp) {x64 : a == a} (p64 : Square x64 (& σ-gluer X x63 x63) idp idp) {x65 : a == a} (p65 : Square x65 x64 idp idp) {x66 : a == a} (p66 : Square x66 x65 idp idp) {x67 : x1 == a} (p67 : Square x67 (& α-gluel-proj X p0 p1 p52 p52) idp idp) {x68 : x1 == a} (p68 : Square x68 (& σ-gluer X x63 x67) idp idp) {x69 : x1 == a} (p69 : Square x69 x68 idp idp) {x70 : x1 == a} (p70 : Square x70 x69 idp idp) {x71 : x1 == a} (p71 : Square x71 (& α-proj-gluer X x66 x70) idp idp) {x72 : x1 == a} (p72 : Square x72 x71 idp idp) {x73 : x1 == a} (p73 : Square x73 x72 idp idp) {x74 : Square idp (& hexagon-proj-baser X p3 p3) x62 x73} (p74 : Cube x74 (& hexagon-proj-gluer X p0 p1 p52 p52 p3 p3 p2 p42 p43 p44 p45 p46 p47 p48 p43 p44 p45 p46 p47 p48 p49 p50 p51 p14 p53 p54 p55 p56 p53 p54 p55 p56 p57 p58 p59 p60 p61 p62 p63 p64 p65 p66 p67 p68 p69 p70 p71 p72 p73) ids (& hids (& hexagon-proj-baser X p3 p3)) (& hids x62) (& hids x73)) {x75 : a == a} (p75 : Square x75 idp idp idp) {x76 : Square idp idp x75 x75} (p76 : Cube x76 (& vids x75) ids ids (& hids x75) (& hids x75)) {x77 : Square (& α-gluel-proj X x2 x2 x10 x10) (& α-gluel-proj X x2 x2 x10 x10) x75 x75} (p77 : Cube x77 (& hids (& α-gluel-proj X x2 x2 x10 x10)) (& hids (& α-gluel-proj X x2 x2 x10 x10)) (& hids (& α-gluel-proj X x2 x2 x10 x10)) p75 p75) {x78 : Square x11 x11 x75 x75} (p78 : Cube p11 p11 x78 x77 x76 x76) {x79 : Square x12 x12 x75 x75} (p79 : Cube p12 p12 x79 x78 x76 x76) {x80 : Square x13 x13 x75 x75} (p80 : Cube p13 p13 x80 x79 x76 x76) {x81 : a == a} (p81 : Square x81 idp idp idp) {x82 : a == a} (p82 : Square x82 idp idp idp) {x83 : a == a} (p83 : Square x83 idp idp idp) {x84 : a == a} (p84 : Square x84 idp idp idp) {x85 : a == a} (p85 : Square x83 x85 idp idp) {x86 : Square x85 idp idp idp} (p86 : Cube p83 x86 p85 ids ids ids) {x87 : Square x11 idp x50 x85} (p87 : Cube x87 (& α-gluel-gluel X x2 x2 x10 x48 (& coh∙□ p50 p49) x86) p11 ids (& hids x50) (& hids x85)) {x88 : Square x11 x11 idp idp} (p88 : Cube x88 (& hids x11) (& hids x11) (& hids x11) ids ids) {x89 : Square x50 x50 idp idp} (p89 : Cube x89 (& hids x50) (& hids x50) (& hids x50) ids ids) {x90 : Square x85 x85 idp idp} (p90 : Cube x90 (& hids x85) (& hids x85) (& hids x85) ids ids) {x91 : Square x11 idp x50 x85} (p91 : Cube x91 x87 x88 ids x89 x90) {x92 : Square x11 idp x51 x83} (p92 : Cube x92 x91 (& hids x11) ids p51 p85) {x93 : a == a} (p93 : Square x84 x93 idp idp) {x94 : Square x93 idp idp idp} (p94 : Cube p84 x94 p93 ids ids ids) {x95 : Square x20 idp x58 x93} (p95 : Cube x95 (& α-gluel-gluel X x2 x14 x19 x56 (& coh∙□ p58 p57) x94) p20 ids (& hids x58) (& hids x93)) {x96 : Square x20 x20 idp idp} (p96 : Cube x96 (& hids x20) (& hids x20) (& hids x20) ids ids) {x97 : Square x58 x58 idp idp} (p97 : Cube x97 (& hids x58) (& hids x58) (& hids x58) ids ids) {x98 : Square x93 x93 idp idp} (p98 : Cube x98 (& hids x93) (& hids x93) (& hids x93) ids ids) {x99 : Square x20 idp x58 x93} (p99 : Cube x99 x95 x96 ids x97 x98) {x100 : Square x20 idp x59 x84} (p100 : Cube x100 x99 (& hids x20) ids p59 p93) {x101 : Square x82 (& σ-gluer X x83 x84) idp idp} (p101 : Cube x101 ids p82 (& σ-gluer□ X p83 p84) ids ids) {x102 : Square x20 x11 x60 x82} (p102 : Cube x102 (& σ-gluer□' X x92 x100) (& hids x20) (& hids x11) p60 x101) {x103 : Square x81 x82 idp idp} (p103 : Cube x103 ids p81 p82 ids ids) {x104 : Square x20 x11 x61 x81} (p104 : Cube x104 x102 (& hids x20) (& hids x11) p61 x103) {x105 : Square x75 x81 idp idp} (p105 : Cube x105 ids p75 p81 ids ids) {x106 : Square x20 x11 x62 x75} (p106 : Cube x106 x104 (& hids x20) (& hids x11) p62 x105) {x107 : Square idp idp x62 x62} (p107 : Cube x107 (& vids x62) ids ids (& hids x62) (& hids x62)) {x108 : Square x21 x12 x62 x75} (p108 : Cube p21 p12 x108 x106 x107 x76) {x109 : Square x22 x13 x62 x75} (p109 : Cube p22 p13 x109 x108 x107 x76) {x110 : Square (& ∧-map-gluel X x13 x22 idp) (& ∧-map-gluel X x13 x13 idp) x62 x75} (p110 : Cube x110 (& ∧-map-gluel□ X x80 x109 x107) (& hids (& ∧-map-gluel X x13 x22 idp)) (& hids (& ∧-map-gluel X x13 x13 idp)) (& hids x62) (& hids x75)) {x111 : Square x23 x37 x62 x75} (p111 : Cube p23 p37 x111 x110 x107 x76) {x112 : Square x24 x38 x62 x75} (p112 : Cube p24 p38 x112 x111 x107 x76) {x113 : Square x25 x39 x62 x75} (p113 : Cube p25 p39 x113 x112 x107 x76) {x114 : a == a} (p114 : Square x75 x114 idp idp) {x115 : a == a} (p115 : Square x115 idp idp idp) {x116 : a == a} (p116 : Square x116 (& σ-gluer X x63 x115) idp idp) {x117 : a == a} (p117 : Square x117 x116 idp idp) {x118 : a == a} (p118 : Square x118 x117 idp idp) {x119 : a == a} (p119 : Square x119 idp idp idp) {x120 : a == a} (p120 : Square x119 x120 idp idp) {x121 : Square x120 idp idp idp} (p121 : Cube p119 x121 p120 ids ids ids) {x122 : a == a} (p122 : Square x31 x122 idp idp) {x123 : a == a} (p123 : Square x120 x123 idp idp) {x124 : a == a} (p124 : Square x30 x124 idp idp) {x125 : a == a} (p125 : Square x119 x125 idp idp) {x126 : Square (& α-gluel-proj X p0 p0 x44 x44) (& α-gluel-proj X p0 p0 x44 x44) x119 x119} (p126 : Cube x126 (& hids (& α-gluel-proj X p0 p0 x44 x44)) (& hids (& α-gluel-proj X p0 p0 x44 x44)) (& hids (& α-gluel-proj X p0 p0 x44 x44)) p119 p119) {x127 : Square idp idp x119 x119} (p127 : Cube x127 (& vids x119) ids ids (& hids x119) (& hids x119)) {x128 : Square x63 x63 x119 x119} (p128 : Cube p63 p63 x128 x126 x127 x127) {x129 : Square (& α-gluel-proj X p0 p0 x44 x44) idp x30 x119} (p129 : Cube x129 (& α-gluel-gluel X p0 p0 x44 x6 p30 p119) (& hids (& α-gluel-proj X p0 p0 x44 x44)) ids (& hids x30) (& hids x119)) {x130 : Square idp idp x30 x30} (p130 : Cube x130 (& vids x30) ids ids (& hids x30) (& hids x30)) {x131 : Square x63 x115 x30 x119} (p131 : Cube p63 p115 x131 x129 x130 x127) {x132 : Square (& σ-gluer X x63 x63) (& σ-gluer X x63 x115) x30 x119} (p132 : Cube x132 (& σ-gluer□ X x128 x131) (& hids (& σ-gluer X x63 x63)) (& hids (& σ-gluer X x63 x115)) (& hids x30) (& hids x119)) {x133 : Square x64 x116 x30 x119} (p133 : Cube p64 p116 x133 x132 x130 x127) {x134 : Square x65 x117 x30 x119} (p134 : Cube p65 p117 x134 x133 x130 x127) {x135 : Square x65 x117 x124 x125} (p135 : Cube x134 x135 (& hids x65) (& hids x117) p124 p125) {x136 : Square x65 x65 idp idp} (p136 : Cube x136 (& hids x65) (& hids x65) (& hids x65) ids ids) {x137 : Square x117 x117 idp idp} (p137 : Cube x137 (& hids x117) (& hids x117) (& hids x117) ids ids) {x138 : Square x124 x122 idp idp} (p138 : Cube p31 x138 p124 p122 ids ids) {x139 : Square x125 x123 idp idp} (p139 : Cube p120 x139 p125 p123 ids ids) {x140 : Square x65 x117 x122 x123} (p140 : Cube x135 x140 x136 x137 x138 x139) {x141 : Square x66 x118 x31 x120} (p141 : Cube x141 x140 p66 p118 p122 p123) {x142 : a == a} (p142 : Square x142 idp idp idp) {x143 : a == a} (p143 : Square x142 x143 idp idp) {x144 : Square x143 idp idp idp} (p144 : Cube p142 x144 p143 ids ids ids) {x145 : x1 == a} (p145 : Square x33 x145 idp idp) {x146 : a == a} (p146 : Square x143 x146 idp idp) {x147 : x1 == a} (p147 : Square x32 x147 idp idp) {x148 : a == a} (p148 : Square x142 x148 idp idp) {x149 : Square (& α-gluel-proj X p0 p0 x44 x44) (& α-gluel-proj X p0 p0 x44 x44) x142 x142} (p149 : Cube x149 (& hids (& α-gluel-proj X p0 p0 x44 x44)) (& hids (& α-gluel-proj X p0 p0 x44 x44)) (& hids (& α-gluel-proj X p0 p0 x44 x44)) p142 p142) {x150 : Square idp idp x142 x142} (p150 : Cube x150 (& vids x142) ids ids (& hids x142) (& hids x142)) {x151 : Square x63 x63 x142 x142} (p151 : Cube p63 p63 x151 x149 x150 x150) {x152 : Square (& α-gluel-proj X p0 p1 p52 p52) idp x32 x142} (p152 : Cube x152 (& α-gluel-gluel X p0 p1 p52 p15 p32 p142) (& hids (& α-gluel-proj X p0 p1 p52 p52)) ids (& hids x32) (& hids x142)) {x153 : Square idp idp x32 x32} (p153 : Cube x153 (& vids x32) ids ids (& hids x32) (& hids x32)) {x154 : Square x67 x115 x32 x142} (p154 : Cube p67 p115 x154 x152 x153 x150) {x155 : Square (& σ-gluer X x63 x67) (& σ-gluer X x63 x115) x32 x142} (p155 : Cube x155 (& σ-gluer□ X x151 x154) (& hids (& σ-gluer X x63 x67)) (& hids (& σ-gluer X x63 x115)) (& hids x32) (& hids x142)) {x156 : Square x68 x116 x32 x142} (p156 : Cube p68 p116 x156 x155 x153 x150) {x157 : Square x69 x117 x32 x142} (p157 : Cube p69 p117 x157 x156 x153 x150) {x158 : Square x69 x117 x147 x148} (p158 : Cube x157 x158 (& hids x69) (& hids x117) p147 p148) {x159 : Square x69 x69 idp idp} (p159 : Cube x159 (& hids x69) (& hids x69) (& hids x69) ids ids) {x160 : Square x147 x145 idp idp} (p160 : Cube p33 x160 p147 p145 ids ids) {x161 : Square x148 x146 idp idp} (p161 : Cube p143 x161 p148 p146 ids ids) {x162 : Square x69 x117 x145 x146} (p162 : Cube x158 x162 x159 x137 x160 x161) {x163 : Square x70 x118 x33 x143} (p163 : Cube x163 x162 p70 p118 p145 p146) {x164 : Square x114 idp idp idp} (p164 : Cube p75 x164 p114 ids ids ids) {x165 : Square x34 idp x72 x114} (p165 : Cube x165 (& α-gluel-gluer X x66 x70 x29 x118 x121 x141 x144 x163 (& coh∙□ p72 p71) x164) p34 ids (& hids x72) (& hids x114)) {x166 : Square x34 x34 idp idp} (p166 : Cube x166 (& hids x34) (& hids x34) (& hids x34) ids ids) {x167 : Square x72 x72 idp idp} (p167 : Cube x167 (& hids x72) (& hids x72) (& hids x72) ids ids) {x168 : Square x114 x114 idp idp} (p168 : Cube x168 (& hids x114) (& hids x114) (& hids x114) ids ids) {x169 : Square x34 idp x72 x114} (p169 : Cube x169 x165 x166 ids x167 x168) {x170 : Square x34 idp x73 x75} (p170 : Cube x170 x169 (& hids x34) ids p73 p114) {x171 : Square idp idp x73 x73} (p171 : Cube x171 (& vids x73) ids ids (& hids x73) (& hids x73)) {x172 : Square x35 x40 x73 x75} (p172 : Cube p35 p40 x172 x170 x171 x76) {x173 : Square x36 x41 x73 x75} (p173 : Cube p36 p41 x173 x172 x171 x76) → Cube (& hexagon-gluel-proj X p0 p1 p15 p15 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p16 p17 p18 p19 p16 p17 p18 p19 p20 p21 p22 p23 p24 p25 p26 p27 p28 p29 p3 p26 p27 p28 p29 p5 p6 p30 p31 p32 p33 p34 p35 p36) (& hexagon-gluel-baser X p3 p0 p2 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p37 p38 p39 p40 p41) x74 x76 x113 x173)
hexagon-gluel-gluer = path-induction

hexagon-gluel : (A : Type i) {{_ : Pointed A}} (B : Type i) {{_ : Pointed B}} (C : Type i) {{_ : Pointed C}} (x : A ∧ B) → Square (hexagon-proj A B C pt x) idp (ap (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z) x))) (gluel x)) (ap (λ x → α B C A (σ A (B ∧ C) (α A B C x))) (gluel x))
hexagon-gluel A B C =
  Smash-elim (λ a b → & hexagon-gluel-proj (B ∧ (C ∧ A)) (gluel pt) (gluel b) (ap (λ z → proj b z) (gluer pt)) (ap (λ z → proj b z) (gluer a)) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) pt) (gluer (proj pt pt)) (gluer baser) (ap-cst baser (gluer pt)) (ap+ (λ y → gluer y) (gluer pt)) (& apσ-gluel (λ x → proj pt x) (gluer pt) (gluer pt)) (ap² (λ x → proj pt x) (σ.gluel-β A C pt)) (ap-∘ (λ x → proj pt x) (σ A C) (gluel pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ z → proj pt z) (gluel pt)) (& apα-gluel-proj (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluel pt))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α.gluel-β B A C (proj pt pt))) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α B A C) (gluel (proj pt pt))) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) b) (& apσ-gluel (λ x → proj b x) (gluer pt) (gluer pt)) (ap² (λ x → proj b x) (σ.gluel-β A C pt)) (ap-∘ (λ x → proj b x) (σ A C) (gluel pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ z → proj b z) (gluel pt)) (& apσ-gluel (λ x → proj b x) (gluer pt) (gluer a)) (ap² (λ x → proj b x) (σ.gluel-β A C a)) (ap-∘ (λ x → proj b x) (σ A C) (gluel a)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ z → proj b z) (gluel a)) (& apα-gluel-proj (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel b) (ap (λ z → proj b z) (gluel pt)) (ap (λ z → proj b z) (gluel a))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α.gluel-β B A C (proj b a))) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α B A C) (gluel (proj b a))) (& ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (gluel (proj pt pt)) (gluel (proj b a)) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z) (proj a b))) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z)) (gluel (proj a b))) (α.gluer-β B C A pt) (& apσ-gluel (λ z → α B C A z) (gluer pt) (gluer pt)) (ap² (λ z → α B C A z) (σ.gluel-β A (B ∧ C) pt)) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (gluel pt)) (gluer (proj pt a)) (α.gluer-β B C A a) (& apσ-gluel (λ z → α B C A z) (gluer pt) (gluer a)) (ap² (λ z → α B C A z) (σ.gluel-β A (B ∧ C) a)) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (gluel a)) (ap-cst baser (gluer a)) (ap+ (λ y → gluer y) (gluer a)) (α-proj.gluel-β B C A a pt) (ap-∘ (λ z → α B C A (σ A (B ∧ C) z)) (λ z → proj a z) (gluel pt)) (α-proj.gluel-β B C A a b) (ap-∘ (λ z → α B C A (σ A (B ∧ C) z)) (λ z → proj a z) (gluel b)) (& apα-gluel-proj (λ x → α B C A (σ A (B ∧ C) x)) (gluel pt) (gluel a) (ap (λ z → proj a z) (gluel pt)) (ap (λ z → proj a z) (gluel b))) (ap² (λ x → α B C A (σ A (B ∧ C) x)) (α.gluel-β A B C (proj a b))) (ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (α A B C) (gluel (proj a b))))
             (& hexagon-gluel-basel (B ∧ (C ∧ A)) (gluer (proj pt pt)) (gluel pt) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) pt) (gluer baser) (ap-cst baser (gluer pt)) (ap+ (λ y → gluer y) (gluer pt)) (& apσ-gluel (λ x → proj pt x) (gluer pt) (gluer pt)) (ap² (λ x → proj pt x) (σ.gluel-β A C pt)) (ap-∘ (λ x → proj pt x) (σ A C) (gluel pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ z → proj pt z) (gluel pt)) (& apα-gluel-proj (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluel pt))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α.gluel-β B A C (proj pt pt))) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α B A C) (gluel (proj pt pt))) (& ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (gluel (proj pt pt)) (gluel (proj pt pt)) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z) basel)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z)) (gluel basel)) (ap² (λ x → α B C A (σ A (B ∧ C) x)) (α.gluel-β A B C basel)) (ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (α A B C) (gluel basel)))
             (λ a → ↓-Square-in (& hexagon-gluel-gluel (B ∧ (C ∧ A)) (gluer (proj pt pt)) (gluer (proj pt a)) (gluel pt) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) pt) (gluer baser) (ap-cst baser (gluer pt)) (ap+ (λ y → gluer y) (gluer pt)) (& apσ-gluel (λ x → proj pt x) (gluer pt) (gluer pt)) (ap² (λ x → proj pt x) (σ.gluel-β A C pt)) (ap-∘ (λ x → proj pt x) (σ A C) (gluel pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ z → proj pt z) (gluel pt)) (& apα-gluel-proj (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluel pt))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α.gluel-β B A C (proj pt pt))) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α B A C) (gluel (proj pt pt))) (ap-cst baser (gluer a)) (ap+ (λ y → gluer y) (gluer a)) (& apσ-gluel (λ x → proj pt x) (gluer pt) (gluer a)) (ap² (λ x → proj pt x) (σ.gluel-β A C a)) (ap-∘ (λ x → proj pt x) (σ A C) (gluel a)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ z → proj pt z) (gluel a)) (& apα-gluel-proj (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluel a))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α.gluel-β B A C (proj pt a))) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α B A C) (gluel (proj pt a))) (& ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (gluel (proj pt pt)) (gluel (proj pt a)) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z) (proj a pt))) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z)) (gluel (proj a pt))) (α.gluer-β B C A pt) (& apσ-gluel (λ z → α B C A z) (gluer pt) (gluer pt)) (ap² (λ z → α B C A z) (σ.gluel-β A (B ∧ C) pt)) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (gluel pt)) (α.gluer-β B C A a) (& apσ-gluel (λ z → α B C A z) (gluer pt) (gluer a)) (ap² (λ z → α B C A z) (σ.gluel-β A (B ∧ C) a)) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (gluel a)) (α-proj.gluel-β B C A a pt) (ap-∘ (λ z → α B C A (σ A (B ∧ C) z)) (λ z → proj a z) (gluel pt)) (& apα-gluel-proj (λ x → α B C A (σ A (B ∧ C) x)) (gluel pt) (gluel a) (ap (λ z → proj a z) (gluel pt)) (ap (λ z → proj a z) (gluel pt))) (ap² (λ x → α B C A (σ A (B ∧ C) x)) (α.gluel-β A B C (proj a pt))) (ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (α A B C) (gluel (proj a pt))) (& ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (gluel (proj pt pt)) (gluel (proj pt pt)) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z) basel)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z)) (gluel basel)) (ap² (λ x → α B C A (σ A (B ∧ C) x)) (α.gluel-β A B C basel)) (ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (α A B C) (gluel basel)) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (proj pt pt)) (& apα-proj-gluer (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluer (proj pt pt)) (gluer (proj pt pt))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj.gluer-β B A C pt pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj B A C pt) (gluer pt)) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (proj a pt)) (& apα-proj-gluer (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluer (proj pt pt)) (gluer (proj a pt))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj.gluer-β B A C pt a)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj B A C pt) (gluer a)) (& apσ-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C pt x)) (gluer pt) (gluer a)) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C pt x)) (σ.gluel-β A B a)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C pt x)) (σ A B) (gluel a)) (α-proj.gluer-β B C A a pt) (ap-∘ (λ z → α B C A (σ A (B ∧ C) z)) (λ z → proj a z) (gluer pt)) (& apα-proj-gluel (λ x → α B C A (σ A (B ∧ C) x)) (gluel pt) (gluel a) (ap (λ z → proj a z) (gluer pt)) (ap (λ z → proj a z) (gluer pt))) (ap² (λ x → α B C A (σ A (B ∧ C) x)) (α-proj.gluel-β A B C pt a)) (ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (α-proj A B C pt) (gluel a)) (hexagon-proj.gluel-β A B C pt a) (ap-cst (proj pt (proj pt pt)) (gluel a)) (ap+-idp (λ x → proj pt (proj pt pt)) (gluel a)) (ap+-cst (& α-gluel-proj (B ∧ (C ∧ A)) (ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt)) (ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt)) (ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (ap (λ z → proj pt z) (gluel pt))) (ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (ap (λ z → proj pt z) (gluel pt)))) (gluel a)) (ap++ (λ x → & apα-gluel-proj (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluel pt))) (gluel a)) (ap++ (λ x → ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α.gluel-β B A C (proj pt pt))) (gluel a)) (ap++ (λ x → ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α B A C) (gluel (proj pt pt))) (gluel a)) (ap-cst (proj pt (proj pt pt)) (ap (σ A B) (gluel a))) (ap-cst (proj pt (proj pt pt)) (& σ-gluel (B ∧ A) (gluer pt) (gluer a))) (ap-cst (proj pt (proj pt pt)) (gluer pt)) (ap-cst (proj pt (proj pt pt)) (gluer a)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ x → proj pt (proj pt pt)) (gluer pt)) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) basel) (ap-cst (proj pt (proj pt pt)) (gluel pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ y → baser) (gluel pt)) (ap-∘-cst (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) baser (gluel pt)) (ap-cst baser (gluel pt)) (ap+-cst (gluer (proj pt pt)) (gluel pt)) (ap-cst baser (ap (σ A C) (gluel pt))) (ap-cst baser (& σ-gluel (C ∧ A) (gluer pt) (gluer pt))) (& apσ-gluel-cst baser (gluer pt) (gluer pt)) (ap+σ-gluel (λ y → gluer y) (gluer pt) (gluer pt)) (ap²-cst baser (σ.gluel-β A C pt)) (ap²+ (λ y → gluer y) (σ.gluel-β A C pt)) (ap-∘-cst2 baser (σ A C) (gluel pt)) (ap+-∘2 (λ y → gluer y) (σ A C) (gluel pt)) (ap+-idp (λ y → proj pt (σ A C y)) (gluel pt)) (ap/∧-map-gluer (gluel pt) (λ y → gluer (proj pt pt)) (λ y → gluer (σ A C y)) (λ y → idp)) (ap+-idp (λ y → proj pt (proj pt pt)) (gluel pt)) (ap++ (λ y → ∧-map.gluer-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) y) (gluel pt)) (ap+-∘1 (∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C)) (λ y → gluer y) (gluel pt)) (ap-∘-cst (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (proj pt (proj pt pt)) (gluer pt)) (& apα-gluel-gluer (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluer (proj pt pt)) (gluer (proj pt pt)) (gluel pt) (gluer basel) (ap-cst baser (gluel pt)) (ap+ (λ y → gluer y) (gluel pt)) (ap-cst baser (gluel pt)) (ap+ (λ y → gluer y) (gluel pt)) (α-proj.gluer-β B A C pt pt) (ap-cst (proj pt (proj pt pt)) (gluer pt))) (& aphids (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (& α-gluel-proj (B ∧ (A ∧ C)) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluel pt)))) (& aphids (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (ap (λ x → α-proj B A C pt x) (gluer pt))) (& aphids (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (ap (λ x → proj pt (proj pt pt)) (gluer pt))) (ap³ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-gluel.gluer-β B A C pt)) (ap+-∘1 (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ x → α-gluel B A C x) (gluer pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ x → proj pt (proj pt pt)) (gluer a)) (ap-cst (proj pt (proj pt pt)) (gluel a)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ y → baser) (gluel a)) (ap-∘-cst (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) baser (gluel a)) (ap-cst baser (gluel a)) (ap+-cst (gluer (proj pt pt)) (gluel a)) (ap-cst baser (ap (σ A C) (gluel a))) (ap-cst baser (& σ-gluel (C ∧ A) (gluer pt) (gluer a))) (& apσ-gluel-cst baser (gluer pt) (gluer a)) (ap+σ-gluel (λ y → gluer y) (gluer pt) (gluer a)) (ap²-cst baser (σ.gluel-β A C a)) (ap²+ (λ y → gluer y) (σ.gluel-β A C a)) (ap-∘-cst2 baser (σ A C) (gluel a)) (ap+-∘2 (λ y → gluer y) (σ A C) (gluel a)) (ap+-idp (λ y → proj pt (σ A C y)) (gluel a)) (ap/∧-map-gluer (gluel a) (λ y → gluer (proj pt pt)) (λ y → gluer (σ A C y)) (λ y → idp)) (ap+-idp (λ y → proj pt (proj pt pt)) (gluel a)) (ap++ (λ y → ∧-map.gluer-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) y) (gluel a)) (ap+-∘1 (∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C)) (λ y → gluer y) (gluel a)) (ap-∘-cst (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (proj pt (proj pt pt)) (gluer a)) (& apα-gluel-gluer (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluer (proj pt pt)) (gluer (proj a pt)) (gluel pt) (gluer basel) (ap-cst baser (gluel pt)) (ap+ (λ y → gluer y) (gluel pt)) (ap-cst baser (gluel a)) (ap+ (λ y → gluer y) (gluel a)) (α-proj.gluer-β B A C pt a) (ap-cst (proj pt (proj pt pt)) (gluer a))) (& aphids (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (& α-gluel-proj (B ∧ (A ∧ C)) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluel a)))) (& aphids (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (ap (λ x → α-proj B A C pt x) (gluer a))) (& aphids (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (ap (λ x → proj pt (proj pt pt)) (gluer a))) (ap³ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-gluel.gluer-β B A C a)) (ap+-∘1 (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ x → α-gluel B A C x) (gluer a)) (& apσ-gluel-cst (proj pt (proj pt pt)) (gluer pt) (gluer a)) (ap+σ-gluel (λ x → ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-gluel B A C x)) (gluer pt) (gluer a)) (ap²-cst (proj pt (proj pt pt)) (σ.gluel-β A B a)) (ap²+ (λ x → ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-gluel B A C x)) (σ.gluel-β A B a)) (ap-∘-cst2 (proj pt (proj pt pt)) (σ A B) (gluel a)) (ap+-∘3 (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ x → α-gluel B A C x) (σ A B) (gluel a)) (ap+-idp (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C pt (σ A B x))) (gluel a)) (ap++ (λ x → ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α.gluel-β B A C (σ A B x))) (gluel a)) (ap++ (λ x → ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α B A C) (gluel (σ A B x))) (gluel a)) (ap/∧-map-gluel (gluel a) (λ x → ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C z)) (gluel (proj pt pt))) (λ x → ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C z)) (gluel (σ A B x))) (λ x → idp)) (ap++ (λ x → & ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (gluel (proj pt pt)) (gluel (σ A B x)) idp) (gluel a)) (ap++ (λ x → ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z) x)) (gluel a)) (ap++ (λ x → ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z)) (gluel x)) (gluel a)) (ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (λ x → proj pt (proj pt pt)) (gluel a)) (ap-∘-cst (λ z → α B C A (σ A (B ∧ C) z)) (proj pt (proj pt pt)) (gluel a)) (& apα-gluel-gluel (λ x → α B C A (σ A (B ∧ C) x)) (gluel pt) (gluel a) (ap (λ z → proj a z) (gluel pt)) (ap (λ z → proj a z) (gluer pt)) (α-proj.gluel-β A B C pt a) (ap-cst (proj pt (proj pt pt)) (gluel a))) (& aphids (λ x → α B C A (σ A (B ∧ C) x)) (& α-gluel-proj (A ∧ (B ∧ C)) (gluel pt) (gluel a) (ap (λ z → proj a z) (gluel pt)) (ap (λ z → proj a z) (gluel pt)))) (& aphids (λ x → α B C A (σ A (B ∧ C) x)) (ap (λ x → α-proj A B C pt x) (gluel a))) (& aphids (λ x → α B C A (σ A (B ∧ C) x)) (ap (λ x → proj pt (proj pt pt)) (gluel a))) (ap³ (λ x → α B C A (σ A (B ∧ C) x)) (α-gluel.gluel-β A B C a)) (ap+-∘1 (λ x → α B C A (σ A (B ∧ C) x)) (λ x → α-gluel A B C x) (gluel a)) (ap+-idp (λ x → α B C A (σ A (B ∧ C) (α-proj A B C pt x))) (gluel a)) (ap++ (λ x → ap² (λ x → α B C A (σ A (B ∧ C) x)) (α.gluel-β A B C x)) (gluel a)) (ap++ (λ x → ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (α A B C) (gluel x)) (gluel a))))
             (& hexagon-gluel-baser (B ∧ (C ∧ A)) (gluer (proj pt pt)) (gluel pt) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) pt) (gluer baser) (ap-cst baser (gluer pt)) (ap+ (λ y → gluer y) (gluer pt)) (& apσ-gluel (λ x → proj pt x) (gluer pt) (gluer pt)) (ap² (λ x → proj pt x) (σ.gluel-β A C pt)) (ap-∘ (λ x → proj pt x) (σ A C) (gluel pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ z → proj pt z) (gluel pt)) (& apα-gluel-proj (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluel pt))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α.gluel-β B A C (proj pt pt))) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α B A C) (gluel (proj pt pt))) (& ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (gluel (proj pt pt)) (gluel (proj pt pt)) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z) baser)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z)) (gluel baser)) (ap² (λ x → α B C A (σ A (B ∧ C) x)) (α.gluel-β A B C baser)) (ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (α A B C) (gluel baser)))
             (λ b → ↓-Square-in (& hexagon-gluel-gluer (B ∧ (C ∧ A)) (gluel pt) (gluel b) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) pt) (gluer (proj pt pt)) (gluer baser) (ap-cst baser (gluer pt)) (ap+ (λ y → gluer y) (gluer pt)) (& apσ-gluel (λ x → proj pt x) (gluer pt) (gluer pt)) (ap² (λ x → proj pt x) (σ.gluel-β A C pt)) (ap-∘ (λ x → proj pt x) (σ A C) (gluel pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ z → proj pt z) (gluel pt)) (& apα-gluel-proj (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluel pt))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α.gluel-β B A C (proj pt pt))) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α B A C) (gluel (proj pt pt))) (∧-map.gluel-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) b) (ap (λ z → proj b z) (gluer pt)) (& apσ-gluel (λ x → proj b x) (gluer pt) (gluer pt)) (ap² (λ x → proj b x) (σ.gluel-β A C pt)) (ap-∘ (λ x → proj b x) (σ A C) (gluel pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ z → proj b z) (gluel pt)) (& apα-gluel-proj (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel b) (ap (λ z → proj b z) (gluel pt)) (ap (λ z → proj b z) (gluel pt))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α.gluel-β B A C (proj b pt))) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α B A C) (gluel (proj b pt))) (& ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (gluel (proj pt pt)) (gluel (proj b pt)) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z) (proj pt b))) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z)) (gluel (proj pt b))) (α.gluer-β B C A pt) (& apσ-gluel (λ z → α B C A z) (gluer pt) (gluer pt)) (ap² (λ z → α B C A z) (σ.gluel-β A (B ∧ C) pt)) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (gluel pt)) (α-proj.gluel-β B C A pt pt) (ap-∘ (λ z → α B C A (σ A (B ∧ C) z)) (λ z → proj pt z) (gluel pt)) (α-proj.gluel-β B C A pt b) (ap-∘ (λ z → α B C A (σ A (B ∧ C) z)) (λ z → proj pt z) (gluel b)) (& apα-gluel-proj (λ x → α B C A (σ A (B ∧ C) x)) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluel b))) (ap² (λ x → α B C A (σ A (B ∧ C) x)) (α.gluel-β A B C (proj pt b))) (ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (α A B C) (gluel (proj pt b))) (& ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (gluel (proj pt pt)) (gluel (proj pt pt)) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z) baser)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z)) (gluel baser)) (ap² (λ x → α B C A (σ A (B ∧ C) x)) (α.gluel-β A B C baser)) (ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (α A B C) (gluel baser)) (gluer basel) (ap-cst baser (gluel pt)) (ap+ (λ y → gluer y) (gluel pt)) (& apσ-gluer (λ x → proj pt x) (gluel pt) (gluel pt)) (ap² (λ x → proj pt x) (σ.gluer-β A C pt)) (ap-∘ (λ x → proj pt x) (σ A C) (gluer pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ z → proj pt z) (gluer pt)) (& apα-proj-gluel (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluer pt)) (ap (λ z → proj pt z) (gluer pt))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj.gluel-β B A C pt pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj B A C pt) (gluel pt)) (ap (λ z → proj b z) (gluel pt)) (& apσ-gluer (λ x → proj b x) (gluel pt) (gluel pt)) (ap² (λ x → proj b x) (σ.gluer-β A C pt)) (ap-∘ (λ x → proj b x) (σ A C) (gluer pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ z → proj b z) (gluer pt)) (& apα-proj-gluel (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel b) (ap (λ z → proj b z) (gluer pt)) (ap (λ z → proj b z) (gluer pt))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj.gluel-β B A C pt b)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-proj B A C pt) (gluel b)) (& apσ-gluer (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C pt x)) (gluel pt) (gluel b)) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C pt x)) (σ.gluer-β A B b)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C pt x)) (σ A B) (gluer b)) (α.gluel-β B C A (proj pt pt)) (& apσ-gluer (λ z → α B C A z) (gluel (proj pt pt)) (gluel (proj pt pt))) (ap² (λ z → α B C A z) (σ.gluer-β A (B ∧ C) (proj pt pt))) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (gluer (proj pt pt))) (α.gluel-β B C A (proj b pt)) (& apσ-gluer (λ z → α B C A z) (gluel (proj pt pt)) (gluel (proj b pt))) (ap² (λ z → α B C A z) (σ.gluer-β A (B ∧ C) (proj b pt))) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (gluer (proj b pt))) (& apα-proj-gluer (λ x → α B C A (σ A (B ∧ C) x)) (gluer (proj pt pt)) (gluer (proj b pt))) (ap² (λ x → α B C A (σ A (B ∧ C) x)) (α-proj.gluer-β A B C pt b)) (ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (α-proj A B C pt) (gluer b)) (hexagon-proj.gluer-β A B C pt b) (ap-cst (proj pt (proj pt pt)) (gluer b)) (ap+-idp (λ x → proj pt (proj pt pt)) (gluer b)) (ap+-cst (& α-gluel-proj (B ∧ (C ∧ A)) (ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt)) (ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt)) (ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (ap (λ z → proj pt z) (gluel pt))) (ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (ap (λ z → proj pt z) (gluel pt)))) (gluer b)) (ap++ (λ x → & apα-gluel-proj (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluel pt))) (gluer b)) (ap++ (λ x → ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α.gluel-β B A C (proj pt pt))) (gluer b)) (ap++ (λ x → ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α B A C) (gluel (proj pt pt))) (gluer b)) (ap-cst (proj pt (proj pt pt)) (ap (σ A B) (gluer b))) (ap-cst (proj pt (proj pt pt)) (& σ-gluer (B ∧ A) (gluel pt) (gluel b))) (ap-cst (proj pt (proj pt pt)) (gluel pt)) (ap-cst (proj pt (proj pt pt)) (gluel b)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ x → proj pt (proj pt pt)) (gluel pt)) (ap-∘-cst (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (proj pt (proj pt pt)) (gluel pt)) (& apα-gluel-gluel (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluer pt)) (α-proj.gluel-β B A C pt pt) (ap-cst (proj pt (proj pt pt)) (gluel pt))) (& aphids (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (& α-gluel-proj (B ∧ (A ∧ C)) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluel pt)))) (& aphids (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (ap (λ x → α-proj B A C pt x) (gluel pt))) (& aphids (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (ap (λ x → proj pt (proj pt pt)) (gluel pt))) (ap³ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-gluel.gluel-β B A C pt)) (ap+-∘1 (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ x → α-gluel B A C x) (gluel pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ x → proj pt (proj pt pt)) (gluel b)) (ap-∘-cst (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (proj pt (proj pt pt)) (gluel b)) (& apα-gluel-gluel (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluel pt) (gluel b) (ap (λ z → proj b z) (gluel pt)) (ap (λ z → proj b z) (gluer pt)) (α-proj.gluel-β B A C pt b) (ap-cst (proj pt (proj pt pt)) (gluel b))) (& aphids (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (& α-gluel-proj (B ∧ (A ∧ C)) (gluel pt) (gluel b) (ap (λ z → proj b z) (gluel pt)) (ap (λ z → proj b z) (gluel pt)))) (& aphids (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (ap (λ x → α-proj B A C pt x) (gluel b))) (& aphids (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (ap (λ x → proj pt (proj pt pt)) (gluel b))) (ap³ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-gluel.gluel-β B A C b)) (ap+-∘1 (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ x → α-gluel B A C x) (gluel b)) (& apσ-gluer-cst (proj pt (proj pt pt)) (gluel pt) (gluel b)) (ap+σ-gluer (λ x → ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-gluel B A C x)) (gluel pt) (gluel b)) (ap²-cst (proj pt (proj pt pt)) (σ.gluer-β A B b)) (ap²+ (λ x → ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α-gluel B A C x)) (σ.gluer-β A B b)) (ap-∘-cst2 (proj pt (proj pt pt)) (σ A B) (gluer b)) (ap+-∘3 (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (λ x → α-gluel B A C x) (σ A B) (gluer b)) (ap+-idp (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α-proj B A C pt (σ A B x))) (gluer b)) (ap++ (λ x → ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α.gluel-β B A C (σ A B x))) (gluer b)) (ap++ (λ x → ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α B A C) (gluel (σ A B x))) (gluer b)) (ap/∧-map-gluel (gluer b) (λ x → ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C z)) (gluel (proj pt pt))) (λ x → ap (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C z)) (gluel (σ A B x))) (λ x → idp)) (ap++ (λ x → & ap∧-map-gluel (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (gluel (proj pt pt)) (gluel (σ A B x)) idp) (gluer b)) (ap++ (λ x → ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map.gluel-β (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z) x)) (gluer b)) (ap++ (λ x → ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z)) (gluel x)) (gluer b)) (ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (λ x → proj pt (proj pt pt)) (gluer b)) (α.gluel-β B C A basel) (& apσ-gluer (λ z → α B C A z) (gluel (proj pt pt)) (gluel basel)) (ap² (λ z → α B C A z) (σ.gluer-β A (B ∧ C) basel)) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (gluer basel)) (ap-cst (proj pt (proj pt pt)) (gluel pt)) (ap-∘ (λ z → α B C A (σ A (B ∧ C) z)) (λ y → baser) (gluel pt)) (ap-∘-cst (λ z → α B C A (σ A (B ∧ C) z)) baser (gluel pt)) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (ap (λ y → proj pt y) (gluel pt))) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (ap (λ y → baser) (gluel pt))) (ap-∘ (λ z → α B C A z) (λ y → proj y pt) (gluel pt)) (ap-∘ (λ z → α B C A z) (λ y → proj (proj pt pt) pt) (gluel pt)) (ap+-cst (& α-gluel-proj (B ∧ (C ∧ A)) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluel pt))) (gluel pt)) (ap+-idp (λ x → proj pt (proj pt pt)) (gluel pt)) (ap++ (λ x → α.gluel-β B C A (proj pt pt)) (gluel pt)) (α-gluel.gluel-β B C A pt) (ap+-idp (λ x → α-proj B C A pt x) (gluel pt)) (ap++ (λ x → α.gluel-β B C A x) (gluel pt)) (ap/σ-gluer (gluel pt) (λ x → ap (λ z → α B C A z) (gluel (proj pt pt))) (λ x → ap (λ z → α B C A z) (gluel x))) (ap++ (λ x → & apσ-gluer (λ z → α B C A z) (gluel (proj pt pt)) (gluel x)) (gluel pt)) (ap++ (λ x → ap² (λ z → α B C A z) (σ.gluer-β A (B ∧ C) x)) (gluel pt)) (ap+-∘1 (λ z → α B C A z) (λ x → ap (σ A (B ∧ C)) (gluer x)) (gluel pt)) (& aphids (λ z → α B C A z) (ap (σ A (B ∧ C)) (gluer (proj pt pt)))) (& aphids (λ z → α B C A z) (ap (σ A (B ∧ C)) (gluer basel))) (ap-∘3 (λ z → α B C A z) (σ A (B ∧ C)) (λ y → proj pt y) (gluel pt)) (ap-∘3 (λ z → α B C A z) (σ A (B ∧ C)) (λ y → baser) (gluel pt)) (ap³ (λ z → α B C A z) (ap+-∘1 (σ A (B ∧ C)) (λ y → gluer y) (gluel pt))) (ap²-∘ (λ z → α B C A z) (σ A (B ∧ C)) (ap+ (λ y → gluer y) (gluel pt))) (ap-cst (proj pt (proj pt pt)) (gluel b)) (ap-∘ (λ z → α B C A (σ A (B ∧ C) z)) (λ y → baser) (gluel b)) (ap-∘-cst (λ z → α B C A (σ A (B ∧ C) z)) baser (gluel b)) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (ap (λ y → proj pt y) (gluel b))) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (ap (λ y → baser) (gluel b))) (ap-∘ (λ z → α B C A z) (λ y → proj y pt) (gluel b)) (ap-∘ (λ z → α B C A z) (λ y → proj (proj pt pt) pt) (gluel b)) (ap+-cst (& α-gluel-proj (B ∧ (C ∧ A)) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluel pt))) (gluel b)) (ap+-idp (λ x → proj pt (proj pt pt)) (gluel b)) (ap++ (λ x → α.gluel-β B C A (proj pt pt)) (gluel b)) (α-gluel.gluel-β B C A b) (ap+-idp (λ x → α-proj B C A pt x) (gluel b)) (ap++ (λ x → α.gluel-β B C A x) (gluel b)) (ap/σ-gluer (gluel b) (λ x → ap (λ z → α B C A z) (gluel (proj pt pt))) (λ x → ap (λ z → α B C A z) (gluel x))) (ap++ (λ x → & apσ-gluer (λ z → α B C A z) (gluel (proj pt pt)) (gluel x)) (gluel b)) (ap++ (λ x → ap² (λ z → α B C A z) (σ.gluer-β A (B ∧ C) x)) (gluel b)) (ap+-∘1 (λ z → α B C A z) (λ x → ap (σ A (B ∧ C)) (gluer x)) (gluel b)) (& aphids (λ z → α B C A z) (ap (σ A (B ∧ C)) (gluer (proj b pt)))) (ap-∘3 (λ z → α B C A z) (σ A (B ∧ C)) (λ y → proj pt y) (gluel b)) (ap-∘3 (λ z → α B C A z) (σ A (B ∧ C)) (λ y → baser) (gluel b)) (ap³ (λ z → α B C A z) (ap+-∘1 (σ A (B ∧ C)) (λ y → gluer y) (gluel b))) (ap²-∘ (λ z → α B C A z) (σ A (B ∧ C)) (ap+ (λ y → gluer y) (gluel b))) (ap-∘-cst (λ z → α B C A (σ A (B ∧ C) z)) (proj pt (proj pt pt)) (gluer b)) (& apα-gluel-gluer (λ x → α B C A (σ A (B ∧ C) x)) (gluer (proj pt pt)) (gluer (proj b pt)) (gluel pt) (gluer basel) (ap-cst baser (gluel pt)) (ap+ (λ y → gluer y) (gluel pt)) (ap-cst baser (gluel b)) (ap+ (λ y → gluer y) (gluel b)) (α-proj.gluer-β A B C pt b) (ap-cst (proj pt (proj pt pt)) (gluer b))) (& aphids (λ x → α B C A (σ A (B ∧ C) x)) (& α-gluel-proj (A ∧ (B ∧ C)) (gluel pt) (gluel pt) (ap (λ z → proj pt z) (gluel pt)) (ap (λ z → proj pt z) (gluel b)))) (& aphids (λ x → α B C A (σ A (B ∧ C) x)) (ap (λ x → α-proj A B C pt x) (gluer b))) (& aphids (λ x → α B C A (σ A (B ∧ C) x)) (ap (λ x → proj pt (proj pt pt)) (gluer b))) (ap³ (λ x → α B C A (σ A (B ∧ C) x)) (α-gluel.gluer-β A B C b)) (ap+-∘1 (λ x → α B C A (σ A (B ∧ C) x)) (λ x → α-gluel A B C x) (gluer b)) (ap+-idp (λ x → α B C A (σ A (B ∧ C) (α-proj A B C pt x))) (gluer b)) (ap++ (λ x → ap² (λ x → α B C A (σ A (B ∧ C) x)) (α.gluel-β A B C x)) (gluer b)) (ap++ (λ x → ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (α A B C) (gluel x)) (gluer b))))

hexagon-gluer : Coh ((X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : a == a} (p2 : Square x2 (& ∧-map-gluer X p0 p0 idp) idp idp) {x3 : a == a} (p3 : Square x3 (& α-gluer X x2 x2) idp idp) {x4 : a == a} (p4 : Square x4 x3 idp idp) {x5 : a == a} (p5 : Square x5 x4 idp idp) {x6 : x1 == a} (p6 : Square x6 (& ∧-map-gluer X p0 p1 idp) idp idp) {x7 : x1 == a} (p7 : Square x7 (& α-gluer X x2 x6) idp idp) {x8 : x1 == a} (p8 : Square x8 x7 idp idp) {x9 : x1 == a} (p9 : Square x9 x8 idp idp) {x10 : x1 == a} (p10 : Square x10 (& ∧-map-gluer X x5 x9 idp) idp idp) {x11 : x1 == a} (p11 : Square x11 x10 idp idp) {x12 : x1 == a} (p12 : Square x12 x11 idp idp) {x13 : X} (p13 : a == x13) {x14 : X} (p14 : x14 == x0) {x15 : x0 == x0} (p15 : Square x15 idp idp idp) {x16 : a == x14} (p16 : Square p0 p14 x16 x15) {x17 : a == a} (p17 : Square x17 (& α-gluel-proj X p13 p13 x16 x16) idp idp) {x18 : a == a} (p18 : Square x18 (& σ-gluer X x17 x17) idp idp) {x19 : a == a} (p19 : Square x19 x18 idp idp) {x20 : a == a} (p20 : Square x20 x19 idp idp) {x21 : x0 == x0} (p21 : Square x21 idp idp idp) {x22 : x1 == x14} (p22 : Square p1 p14 x22 x21) {x23 : x1 == a} (p23 : Square x23 (& α-gluel-proj X p13 p13 x16 x22) idp idp) {x24 : x1 == a} (p24 : Square x24 (& σ-gluer X x17 x23) idp idp) {x25 : x1 == a} (p25 : Square x25 x24 idp idp) {x26 : x1 == a} (p26 : Square x26 x25 idp idp) {x27 : x1 == a} (p27 : Square x27 (& α-gluer X x20 x26) idp idp) {x28 : x1 == a} (p28 : Square x28 x27 idp idp) {x29 : x1 == a} (p29 : Square x29 x28 idp idp) → Square idp idp x12 x29)
hexagon-gluer = path-induction

hexagon : (A : Type i) {{_ : Pointed A}} (B : Type i) {{_ : Pointed B}} (C : Type i) {{_ : Pointed C}} (x : (A ∧ B) ∧ C) → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z) x)) == α B C A (σ A (B ∧ C) (α A B C x))
hexagon A B C = hexagon.f  module _ where

  module hexagon =
    SmashElimId {g = λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z) x))}
                {h = λ x → α B C A (σ A (B ∧ C) (α A B C x))}
                (λ x c → hexagon-proj A B C c x)
                (idp)
                (hexagon-gluel A B C)
                (idp)
                (λ c → & hexagon-gluer (B ∧ (C ∧ A)) (gluer (proj pt pt)) (gluer (proj c pt)) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (proj pt pt)) (& apα-gluer (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluer (proj pt pt)) (gluer (proj pt pt))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α.gluer-β B A C pt)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α B A C) (gluer pt)) (∧-map.gluer-β B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (proj pt c)) (& apα-gluer (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (gluer (proj pt pt)) (gluer (proj pt c))) (ap² (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α.gluer-β B A C c)) (ap-∘ (λ z → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) z) (α B A C) (gluer c)) (& ap∧-map-gluer (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (gluer pt) (gluer c) idp) (ap² (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map.gluer-β (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z) c)) (ap-∘ (λ x → ∧-map B B (A ∧ C) (C ∧ A) (λ y → y) (σ A C) (α B A C x)) (∧-map (A ∧ B) (B ∧ A) C C (σ A B) (λ z → z)) (gluer c)) (gluel pt) (gluer basel) (ap-cst baser (gluel pt)) (ap+ (λ y → gluer y) (gluel pt)) (α.gluel-β B C A (proj pt pt)) (& apσ-gluer (λ z → α B C A z) (gluel (proj pt pt)) (gluel (proj pt pt))) (ap² (λ z → α B C A z) (σ.gluer-β A (B ∧ C) (proj pt pt))) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (gluer (proj pt pt))) (ap-cst baser (gluel c)) (ap+ (λ y → gluer y) (gluel c)) (α.gluel-β B C A (proj pt c)) (& apσ-gluer (λ z → α B C A z) (gluel (proj pt pt)) (gluel (proj pt c))) (ap² (λ z → α B C A z) (σ.gluer-β A (B ∧ C) (proj pt c))) (ap-∘ (λ z → α B C A z) (σ A (B ∧ C)) (gluer (proj pt c))) (& apα-gluer (λ x → α B C A (σ A (B ∧ C) x)) (gluer (proj pt pt)) (gluer (proj pt c))) (ap² (λ x → α B C A (σ A (B ∧ C) x)) (α.gluer-β A B C c)) (ap-∘ (λ x → α B C A (σ A (B ∧ C) x)) (α A B C) (gluer c)))
