{-# OPTIONS --without-K --rewriting #-}

open import SmashCommon
open import SmashDefs

module GeneratedCodePart1 {i : ULevel} where

&∧-map-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → x2 == a
&∧-map-gluel X idp idp idp = idp

&ap∧-map-gluel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Square (ap f (&∧-map-gluel X p0 p1 p2)) (&∧-map-gluel Y (ap f p0) (ap f p1) (ap f p2)) idp idp
&ap∧-map-gluel f idp idp idp = ids

&∧-map-gluel□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux2 == ux1} {vx2 : X} {vp2 : vx2 == vx1} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x2 x1) → Square (&∧-map-gluel X up0 up1 up2) (&∧-map-gluel X vp0 vp1 vp2) x2 a
&∧-map-gluel□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap/∧-map-gluel : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x2 x == x1 x) → Cube (ap+ (λ x → &∧-map-gluel Y (p0 x) (p1 x) (p2 x)) r) (&∧-map-gluel□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r)) (&hids (&∧-map-gluel Y (p0 y) (p1 y) (p2 y))) (&hids (&∧-map-gluel Y (p0 z) (p1 z) (p2 z))) (&hids (ap x2 r)) (&hids (ap a r))
ap/∧-map-gluel {Y = Y} {y = y} idp p0 p1 p2 = &ap/∧-map-gluel-lemma Y (p0 y) (p1 y) (p2 y)  where
  &ap/∧-map-gluel-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (&hids (&∧-map-gluel X p0 p1 p2)) (&∧-map-gluel□ X (&hids p0) (&hids p1) (&hids p2)) (&hids (&∧-map-gluel X p0 p1 p2)) (&hids (&∧-map-gluel X p0 p1 p2)) ids ids
  &ap/∧-map-gluel-lemma X idp idp idp = idc

&∧-map-gluel□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux2 == ux1} {vx2 : X} {vp2 : vx2 == vx1} {x2 : ux2 == vx2} (p2 : Square x2 x1 up2 vp2) → Square x2 a (&∧-map-gluel X up0 up1 up2) (&∧-map-gluel X vp0 vp1 vp2)
&∧-map-gluel□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap+∧-map-gluel : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (ap+ α (&∧-map-gluel X p0 p1 p2)) (&∧-map-gluel□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2)) (&hids (α x2)) (&hids (α a)) (&ap∧-map-gluel f p0 p1 p2) (&ap∧-map-gluel g p0 p1 p2)
ap+∧-map-gluel α {a = a} idp idp idp = ap+∧-map-gluel-lemma (α a)  where
  ap+∧-map-gluel-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&∧-map-gluel□' X (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+∧-map-gluel-lemma idp = idc

&ap∧-map-gluel-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (&ap∧-map-gluel (λ _ → y) p0 p1 p2) ids (ap-cst y (&∧-map-gluel X p0 p1 p2)) (&∧-map-gluel□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2)) ids ids
&ap∧-map-gluel-cst y idp idp idp = idc

&∧-map-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → x2 == a
&∧-map-gluer X idp idp idp = idp

&ap∧-map-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Square (ap f (&∧-map-gluer X p0 p1 p2)) (&∧-map-gluer Y (ap f p0) (ap f p1) (ap f p2)) idp idp
&ap∧-map-gluer f idp idp idp = ids

&∧-map-gluer□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux2 == ux1} {vx2 : X} {vp2 : vx2 == vx1} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x2 x1) → Square (&∧-map-gluer X up0 up1 up2) (&∧-map-gluer X vp0 vp1 vp2) x2 a
&∧-map-gluer□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap/∧-map-gluer : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x2 x == x1 x) → Cube (ap+ (λ x → &∧-map-gluer Y (p0 x) (p1 x) (p2 x)) r) (&∧-map-gluer□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r)) (&hids (&∧-map-gluer Y (p0 y) (p1 y) (p2 y))) (&hids (&∧-map-gluer Y (p0 z) (p1 z) (p2 z))) (&hids (ap x2 r)) (&hids (ap a r))
ap/∧-map-gluer {Y = Y} {y = y} idp p0 p1 p2 = &ap/∧-map-gluer-lemma Y (p0 y) (p1 y) (p2 y)  where
  &ap/∧-map-gluer-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (&hids (&∧-map-gluer X p0 p1 p2)) (&∧-map-gluer□ X (&hids p0) (&hids p1) (&hids p2)) (&hids (&∧-map-gluer X p0 p1 p2)) (&hids (&∧-map-gluer X p0 p1 p2)) ids ids
  &ap/∧-map-gluer-lemma X idp idp idp = idc

&∧-map-gluer□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux2 == ux1} {vx2 : X} {vp2 : vx2 == vx1} {x2 : ux2 == vx2} (p2 : Square x2 x1 up2 vp2) → Square x2 a (&∧-map-gluer X up0 up1 up2) (&∧-map-gluer X vp0 vp1 vp2)
&∧-map-gluer□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap+∧-map-gluer : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (ap+ α (&∧-map-gluer X p0 p1 p2)) (&∧-map-gluer□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2)) (&hids (α x2)) (&hids (α a)) (&ap∧-map-gluer f p0 p1 p2) (&ap∧-map-gluer g p0 p1 p2)
ap+∧-map-gluer α {a = a} idp idp idp = ap+∧-map-gluer-lemma (α a)  where
  ap+∧-map-gluer-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&∧-map-gluer□' X (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+∧-map-gluer-lemma idp = idc

&ap∧-map-gluer-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (&ap∧-map-gluer (λ _ → y) p0 p1 p2) ids (ap-cst y (&∧-map-gluer X p0 p1 p2)) (&∧-map-gluer□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2)) ids ids
&ap∧-map-gluer-cst y idp idp idp = idc

&∧-map-pt : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → x2 == a
&∧-map-pt X idp idp idp = idp

&ap∧-map-pt : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Square (ap f (&∧-map-pt X p0 p1 p2)) (&∧-map-pt Y (ap f p0) (ap f p1) (ap f p2)) idp idp
&ap∧-map-pt f idp idp idp = ids

&∧-map-pt□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux2 == ux1} {vx2 : X} {vp2 : vx2 == vx1} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x2 x1) → Square (&∧-map-pt X up0 up1 up2) (&∧-map-pt X vp0 vp1 vp2) x2 a
&∧-map-pt□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap/∧-map-pt : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x2 x == x1 x) → Cube (ap+ (λ x → &∧-map-pt Y (p0 x) (p1 x) (p2 x)) r) (&∧-map-pt□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r)) (&hids (&∧-map-pt Y (p0 y) (p1 y) (p2 y))) (&hids (&∧-map-pt Y (p0 z) (p1 z) (p2 z))) (&hids (ap x2 r)) (&hids (ap a r))
ap/∧-map-pt {Y = Y} {y = y} idp p0 p1 p2 = &ap/∧-map-pt-lemma Y (p0 y) (p1 y) (p2 y)  where
  &ap/∧-map-pt-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (&hids (&∧-map-pt X p0 p1 p2)) (&∧-map-pt□ X (&hids p0) (&hids p1) (&hids p2)) (&hids (&∧-map-pt X p0 p1 p2)) (&hids (&∧-map-pt X p0 p1 p2)) ids ids
  &ap/∧-map-pt-lemma X idp idp idp = idc

&∧-map-pt□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux2 == ux1} {vx2 : X} {vp2 : vx2 == vx1} {x2 : ux2 == vx2} (p2 : Square x2 x1 up2 vp2) → Square x2 a (&∧-map-pt X up0 up1 up2) (&∧-map-pt X vp0 vp1 vp2)
&∧-map-pt□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap+∧-map-pt : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (ap+ α (&∧-map-pt X p0 p1 p2)) (&∧-map-pt□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2)) (&hids (α x2)) (&hids (α a)) (&ap∧-map-pt f p0 p1 p2) (&ap∧-map-pt g p0 p1 p2)
ap+∧-map-pt α {a = a} idp idp idp = ap+∧-map-pt-lemma (α a)  where
  ap+∧-map-pt-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&∧-map-pt□' X (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+∧-map-pt-lemma idp = idc

&ap∧-map-pt-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (&ap∧-map-pt (λ _ → y) p0 p1 p2) ids (ap-cst y (&∧-map-pt X p0 p1 p2)) (&∧-map-pt□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2)) ids ids
&ap∧-map-pt-cst y idp idp idp = idc

∧-map : (A : Ptd i) (A' : Ptd i) (B : Ptd i) (B' : Ptd i) (f : PtdMap A A') (g : PtdMap B B') → PtdMap (A ∧ B) (A' ∧ B')
∧-map A A' B B' f g = record { fun = ∧-map.f ; ptf = &∧-map-pt ∣ (A' ∧ B') ∣ (gluer (pt B')) (gluer (g $ (pt B))) (ap (λ x → proj x (g $ (pt B))) (ptf f)) }  module _ where

  module ∧-map =
    SmashRec (λ a b → proj (f $ a) (g $ b))
             (proj (pt A') (pt B'))
             (λ a → &∧-map-gluel ∣ (A' ∧ B') ∣ (gluel (pt A')) (gluel (f $ a)) (ap (λ y → proj (f $ a) y) (ptf g)))
             (proj (pt A') (pt B'))
             (λ b → &∧-map-gluer ∣ (A' ∧ B') ∣ (gluer (pt B')) (gluer (g $ b)) (ap (λ x → proj x (g $ b)) (ptf f)))





&σ-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → x1 == a
&σ-gluel X idp idp = idp

&apσ-gluel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Square (ap f (&σ-gluel X p0 p1)) (&σ-gluel Y (ap f p0) (ap f p1)) idp idp
&apσ-gluel f idp idp = ids

&σ-gluel□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) → Square (&σ-gluel X up0 up1) (&σ-gluel X vp0 vp1) x1 a
&σ-gluel□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap/σ-gluel : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) → Cube (ap+ (λ x → &σ-gluel Y (p0 x) (p1 x)) r) (&σ-gluel□ Y (ap+ p0 r) (ap+ p1 r)) (&hids (&σ-gluel Y (p0 y) (p1 y))) (&hids (&σ-gluel Y (p0 z) (p1 z))) (&hids (ap x1 r)) (&hids (ap a r))
ap/σ-gluel {Y = Y} {y = y} idp p0 p1 = &ap/σ-gluel-lemma Y (p0 y) (p1 y)  where
  &ap/σ-gluel-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&hids (&σ-gluel X p0 p1)) (&σ-gluel□ X (&hids p0) (&hids p1)) (&hids (&σ-gluel X p0 p1)) (&hids (&σ-gluel X p0 p1)) ids ids
  &ap/σ-gluel-lemma X idp idp = idc

&σ-gluel□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) → Square x1 a (&σ-gluel X up0 up1) (&σ-gluel X vp0 vp1)
&σ-gluel□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap+σ-gluel : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (ap+ α (&σ-gluel X p0 p1)) (&σ-gluel□' Y (ap+ α p0) (ap+ α p1)) (&hids (α x1)) (&hids (α a)) (&apσ-gluel f p0 p1) (&apσ-gluel g p0 p1)
ap+σ-gluel α {a = a} idp idp = ap+σ-gluel-lemma (α a)  where
  ap+σ-gluel-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&σ-gluel□' X (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+σ-gluel-lemma idp = idc

&apσ-gluel-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&apσ-gluel (λ _ → y) p0 p1) ids (ap-cst y (&σ-gluel X p0 p1)) (&σ-gluel□ Y (ap-cst y p0) (ap-cst y p1)) ids ids
&apσ-gluel-cst y idp idp = idc

&σ-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → x1 == a
&σ-gluer X idp idp = idp

&apσ-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Square (ap f (&σ-gluer X p0 p1)) (&σ-gluer Y (ap f p0) (ap f p1)) idp idp
&apσ-gluer f idp idp = ids

&σ-gluer□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) → Square (&σ-gluer X up0 up1) (&σ-gluer X vp0 vp1) x1 a
&σ-gluer□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap/σ-gluer : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) → Cube (ap+ (λ x → &σ-gluer Y (p0 x) (p1 x)) r) (&σ-gluer□ Y (ap+ p0 r) (ap+ p1 r)) (&hids (&σ-gluer Y (p0 y) (p1 y))) (&hids (&σ-gluer Y (p0 z) (p1 z))) (&hids (ap x1 r)) (&hids (ap a r))
ap/σ-gluer {Y = Y} {y = y} idp p0 p1 = &ap/σ-gluer-lemma Y (p0 y) (p1 y)  where
  &ap/σ-gluer-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&hids (&σ-gluer X p0 p1)) (&σ-gluer□ X (&hids p0) (&hids p1)) (&hids (&σ-gluer X p0 p1)) (&hids (&σ-gluer X p0 p1)) ids ids
  &ap/σ-gluer-lemma X idp idp = idc

&σ-gluer□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) → Square x1 a (&σ-gluer X up0 up1) (&σ-gluer X vp0 vp1)
&σ-gluer□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap+σ-gluer : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (ap+ α (&σ-gluer X p0 p1)) (&σ-gluer□' Y (ap+ α p0) (ap+ α p1)) (&hids (α x1)) (&hids (α a)) (&apσ-gluer f p0 p1) (&apσ-gluer g p0 p1)
ap+σ-gluer α {a = a} idp idp = ap+σ-gluer-lemma (α a)  where
  ap+σ-gluer-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&σ-gluer□' X (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+σ-gluer-lemma idp = idc

&apσ-gluer-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&apσ-gluer (λ _ → y) p0 p1) ids (ap-cst y (&σ-gluer X p0 p1)) (&σ-gluer□ Y (ap-cst y p0) (ap-cst y p1)) ids ids
&apσ-gluer-cst y idp idp = idc

σ : (A : Ptd i) (B : Ptd i) → PtdMap (A ∧ B) (B ∧ A)
σ A B = record { fun = σ.f ; ptf = idp }  module _ where

  module σ =
    SmashRec (λ a b → proj b a)
             (proj (pt B) (pt A))
             (λ a → &σ-gluel ∣ (B ∧ A) ∣ (gluer (pt A)) (gluer a))
             (proj (pt B) (pt A))
             (λ b → &σ-gluer ∣ (B ∧ A) ∣ (gluel (pt B)) (gluel b))






&∧-map-id-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : x1 == a} (p2 : Square x2 (&∧-map-gluel X p0 p1 idp) idp idp) {x3 : x1 == x0} (p3 : Square x3 p1 idp idp) → Square idp p0 x2 x3
&∧-map-id-gluel X idp idp ids ids = ids

&ap∧-map-id-gluel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : x1 == a} (p2 : Square x2 (&∧-map-gluel X p0 p1 idp) idp idp) {x3 : x1 == x0} (p3 : Square x3 p1 idp idp) → Cube (ap² f (&∧-map-id-gluel X p0 p1 p2 p3)) (&∧-map-id-gluel Y (ap f p0) (ap f p1) (&coh∙□ (ap² f p2) (&ap∧-map-gluel f p0 p1 idp)) (ap² f p3)) ids (&hids (ap f p0)) (&hids (ap f x2)) (&hids (ap f x3))
&ap∧-map-id-gluel f idp idp ids ids = idc



&∧-map-id-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : x1 == a} (p2 : Square x2 (&∧-map-gluer X p0 p1 idp) idp idp) {x3 : x1 == x0} (p3 : Square x3 p1 idp idp) → Square idp p0 x2 x3
&∧-map-id-gluer X idp idp ids ids = ids

&ap∧-map-id-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : x1 == a} (p2 : Square x2 (&∧-map-gluer X p0 p1 idp) idp idp) {x3 : x1 == x0} (p3 : Square x3 p1 idp idp) → Cube (ap² f (&∧-map-id-gluer X p0 p1 p2 p3)) (&∧-map-id-gluer Y (ap f p0) (ap f p1) (&coh∙□ (ap² f p2) (&ap∧-map-gluer f p0 p1 idp)) (ap² f p3)) ids (&hids (ap f p0)) (&hids (ap f x2)) (&hids (ap f x3))
&ap∧-map-id-gluer f idp idp ids ids = idc

∧-map-id : (A : Ptd i) (B : Ptd i) (x : ∣ A ∧ B ∣) → ∧-map A A B B (id-pt A) (id-pt B) $ x == x
∧-map-id A B = ∧-map-id.f  module _ where

  module ∧-map-id =
    SmashElimId {g = λ x → ∧-map A A B B (id-pt A) (id-pt B) $ x}
                {h = λ x → x}
                (λ a b → idp)
                (gluel (pt A))
                (λ a → &∧-map-id-gluel ∣ (A ∧ B) ∣ (gluel (pt A)) (gluel a) (∧-map.gluel-β A A B B (id-pt A) (id-pt B) a) (ap-idf (gluel a)))
                (gluer (pt B))
                (λ b → &∧-map-id-gluer ∣ (A ∧ B) ∣ (gluer (pt B)) (gluer b) (∧-map.gluer-β A A B B (id-pt A) (id-pt B) b) (ap-idf (gluer b)))







&σ-triangle-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : a == a} (p2 : Square x2 (&σ-gluer X p0 p0) idp idp) {x3 : x1 == a} (p3 : Square x3 (&σ-gluer X p0 p1) idp idp) {x4 : x1 == a} (p4 : Square x4 (&σ-gluel X x2 x3) idp idp) {x5 : x1 == a} (p5 : Square x5 x4 idp idp) {x6 : x1 == a} (p6 : Square x6 x5 idp idp) {x7 : x1 == x0} (p7 : Square x7 p1 idp idp) → Square idp p0 x6 x7
&σ-triangle-gluel X idp idp ids ids ids ids ids ids = ids

&apσ-triangle-gluel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : a == a} (p2 : Square x2 (&σ-gluer X p0 p0) idp idp) {x3 : x1 == a} (p3 : Square x3 (&σ-gluer X p0 p1) idp idp) {x4 : x1 == a} (p4 : Square x4 (&σ-gluel X x2 x3) idp idp) {x5 : x1 == a} (p5 : Square x5 x4 idp idp) {x6 : x1 == a} (p6 : Square x6 x5 idp idp) {x7 : x1 == x0} (p7 : Square x7 p1 idp idp) → Cube (ap² f (&σ-triangle-gluel X p0 p1 p2 p3 p4 p5 p6 p7)) (&σ-triangle-gluel Y (ap f p0) (ap f p1) (&coh∙□ (ap² f p2) (&apσ-gluer f p0 p0)) (&coh∙□ (ap² f p3) (&apσ-gluer f p0 p1)) (&coh∙□ (ap² f p4) (&apσ-gluel f x2 x3)) (ap² f p5) (ap² f p6) (ap² f p7)) ids (&hids (ap f p0)) (&hids (ap f x6)) (&hids (ap f x7))
&apσ-triangle-gluel f idp idp ids ids ids ids ids ids = idc



&σ-triangle-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : a == a} (p2 : Square x2 (&σ-gluel X p0 p0) idp idp) {x3 : x1 == a} (p3 : Square x3 (&σ-gluel X p0 p1) idp idp) {x4 : x1 == a} (p4 : Square x4 (&σ-gluer X x2 x3) idp idp) {x5 : x1 == a} (p5 : Square x5 x4 idp idp) {x6 : x1 == a} (p6 : Square x6 x5 idp idp) {x7 : x1 == x0} (p7 : Square x7 p1 idp idp) → Square idp p0 x6 x7
&σ-triangle-gluer X idp idp ids ids ids ids ids ids = ids

&apσ-triangle-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : a == a} (p2 : Square x2 (&σ-gluel X p0 p0) idp idp) {x3 : x1 == a} (p3 : Square x3 (&σ-gluel X p0 p1) idp idp) {x4 : x1 == a} (p4 : Square x4 (&σ-gluer X x2 x3) idp idp) {x5 : x1 == a} (p5 : Square x5 x4 idp idp) {x6 : x1 == a} (p6 : Square x6 x5 idp idp) {x7 : x1 == x0} (p7 : Square x7 p1 idp idp) → Cube (ap² f (&σ-triangle-gluer X p0 p1 p2 p3 p4 p5 p6 p7)) (&σ-triangle-gluer Y (ap f p0) (ap f p1) (&coh∙□ (ap² f p2) (&apσ-gluel f p0 p0)) (&coh∙□ (ap² f p3) (&apσ-gluel f p0 p1)) (&coh∙□ (ap² f p4) (&apσ-gluer f x2 x3)) (ap² f p5) (ap² f p6) (ap² f p7)) ids (&hids (ap f p0)) (&hids (ap f x6)) (&hids (ap f x7))
&apσ-triangle-gluer f idp idp ids ids ids ids ids ids = idc

σ-triangle : (A : Ptd i) (B : Ptd i) (x : ∣ A ∧ B ∣) → σ B A $ (σ A B $ x) == x
σ-triangle A B = σ-triangle.f  module _ where

  module σ-triangle =
    SmashElimId {g = λ x → σ B A $ (σ A B $ x)}
                {h = λ x → x}
                (λ a b → idp)
                (gluel (pt A))
                (λ a → &σ-triangle-gluel ∣ (A ∧ B) ∣ (gluel (pt A)) (gluel a) (σ.gluer-β B A (pt A)) (σ.gluer-β B A a) (&apσ-gluel (σ B A $_) (gluer (pt A)) (gluer a)) (ap² (σ B A $_) (σ.gluel-β A B a)) (ap-∘ (σ B A $_) (σ A B $_) (gluel a)) (ap-idf (gluel a)))
                (gluer (pt B))
                (λ b → &σ-triangle-gluer ∣ (A ∧ B) ∣ (gluer (pt B)) (gluer b) (σ.gluel-β B A (pt B)) (σ.gluel-β B A b) (&apσ-gluer (σ B A $_) (gluel (pt B)) (gluel b)) (ap² (σ B A $_) (σ.gluer-β A B b)) (ap-∘ (σ B A $_) (σ A B $_) (gluer b)) (ap-idf (gluer b)))



&α-proj-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → x3 == a
&α-proj-gluel X idp idp idp idp = idp

&apα-proj-gluel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Square (ap f (&α-proj-gluel X p0 p1 p2 p3)) (&α-proj-gluel Y (ap f p0) (ap f p1) (ap f p2) (ap f p3)) idp idp
&apα-proj-gluel f idp idp idp idp = ids

&α-proj-gluel□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x1 x2) {ux3 : X} {up3 : ux3 == ux2} {vx3 : X} {vp3 : vx3 == vx2} {x3 : ux3 == vx3} (p3 : Square up3 vp3 x3 x2) → Square (&α-proj-gluel X up0 up1 up2 up3) (&α-proj-gluel X vp0 vp1 vp2 vp3) x3 a
&α-proj-gluel□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids {up3 = idp} {vp3 = idp} ids = ids

ap/α-proj-gluel : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x1 x == x2 x) {x3 : X → Y} (p3 : (x : X) → x3 x == x2 x) → Cube (ap+ (λ x → &α-proj-gluel Y (p0 x) (p1 x) (p2 x) (p3 x)) r) (&α-proj-gluel□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r) (ap+ p3 r)) (&hids (&α-proj-gluel Y (p0 y) (p1 y) (p2 y) (p3 y))) (&hids (&α-proj-gluel Y (p0 z) (p1 z) (p2 z) (p3 z))) (&hids (ap x3 r)) (&hids (ap a r))
ap/α-proj-gluel {Y = Y} {y = y} idp p0 p1 p2 p3 = &ap/α-proj-gluel-lemma Y (p0 y) (p1 y) (p2 y) (p3 y)  where
  &ap/α-proj-gluel-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Cube (&hids (&α-proj-gluel X p0 p1 p2 p3)) (&α-proj-gluel□ X (&hids p0) (&hids p1) (&hids p2) (&hids p3)) (&hids (&α-proj-gluel X p0 p1 p2 p3)) (&hids (&α-proj-gluel X p0 p1 p2 p3)) ids ids
  &ap/α-proj-gluel-lemma X idp idp idp idp = idc

&α-proj-gluel□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square x1 x2 up2 vp2) {ux3 : X} {up3 : ux3 == ux2} {vx3 : X} {vp3 : vx3 == vx2} {x3 : ux3 == vx3} (p3 : Square x3 x2 up3 vp3) → Square x3 a (&α-proj-gluel X up0 up1 up2 up3) (&α-proj-gluel X vp0 vp1 vp2 vp3)
&α-proj-gluel□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids {up3 = idp} {vp3 = idp} ids = ids

ap+α-proj-gluel : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Cube (ap+ α (&α-proj-gluel X p0 p1 p2 p3)) (&α-proj-gluel□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2) (ap+ α p3)) (&hids (α x3)) (&hids (α a)) (&apα-proj-gluel f p0 p1 p2 p3) (&apα-proj-gluel g p0 p1 p2 p3)
ap+α-proj-gluel α {a = a} idp idp idp idp = ap+α-proj-gluel-lemma (α a)  where
  ap+α-proj-gluel-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α-proj-gluel□' X (&hids p) (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α-proj-gluel-lemma idp = idc

&apα-proj-gluel-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Cube (&apα-proj-gluel (λ _ → y) p0 p1 p2 p3) ids (ap-cst y (&α-proj-gluel X p0 p1 p2 p3)) (&α-proj-gluel□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2) (ap-cst y p3)) ids ids
&apα-proj-gluel-cst y idp idp idp idp = idc

&α-proj-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → x1 == a
&α-proj-gluer X idp idp = idp

&apα-proj-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Square (ap f (&α-proj-gluer X p0 p1)) (&α-proj-gluer Y (ap f p0) (ap f p1)) idp idp
&apα-proj-gluer f idp idp = ids

&α-proj-gluer□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) → Square (&α-proj-gluer X up0 up1) (&α-proj-gluer X vp0 vp1) x1 a
&α-proj-gluer□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap/α-proj-gluer : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) → Cube (ap+ (λ x → &α-proj-gluer Y (p0 x) (p1 x)) r) (&α-proj-gluer□ Y (ap+ p0 r) (ap+ p1 r)) (&hids (&α-proj-gluer Y (p0 y) (p1 y))) (&hids (&α-proj-gluer Y (p0 z) (p1 z))) (&hids (ap x1 r)) (&hids (ap a r))
ap/α-proj-gluer {Y = Y} {y = y} idp p0 p1 = &ap/α-proj-gluer-lemma Y (p0 y) (p1 y)  where
  &ap/α-proj-gluer-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&hids (&α-proj-gluer X p0 p1)) (&α-proj-gluer□ X (&hids p0) (&hids p1)) (&hids (&α-proj-gluer X p0 p1)) (&hids (&α-proj-gluer X p0 p1)) ids ids
  &ap/α-proj-gluer-lemma X idp idp = idc

&α-proj-gluer□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) → Square x1 a (&α-proj-gluer X up0 up1) (&α-proj-gluer X vp0 vp1)
&α-proj-gluer□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap+α-proj-gluer : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (ap+ α (&α-proj-gluer X p0 p1)) (&α-proj-gluer□' Y (ap+ α p0) (ap+ α p1)) (&hids (α x1)) (&hids (α a)) (&apα-proj-gluer f p0 p1) (&apα-proj-gluer g p0 p1)
ap+α-proj-gluer α {a = a} idp idp = ap+α-proj-gluer-lemma (α a)  where
  ap+α-proj-gluer-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α-proj-gluer□' X (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α-proj-gluer-lemma idp = idc

&apα-proj-gluer-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&apα-proj-gluer (λ _ → y) p0 p1) ids (ap-cst y (&α-proj-gluer X p0 p1)) (&α-proj-gluer□ Y (ap-cst y p0) (ap-cst y p1)) ids ids
&apα-proj-gluer-cst y idp idp = idc

&α-proj-pt : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → x1 == a
&α-proj-pt X idp idp = idp

&apα-proj-pt : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Square (ap f (&α-proj-pt X p0 p1)) (&α-proj-pt Y (ap f p0) (ap f p1)) idp idp
&apα-proj-pt f idp idp = ids

&α-proj-pt□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) → Square (&α-proj-pt X up0 up1) (&α-proj-pt X vp0 vp1) x1 a
&α-proj-pt□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap/α-proj-pt : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) → Cube (ap+ (λ x → &α-proj-pt Y (p0 x) (p1 x)) r) (&α-proj-pt□ Y (ap+ p0 r) (ap+ p1 r)) (&hids (&α-proj-pt Y (p0 y) (p1 y))) (&hids (&α-proj-pt Y (p0 z) (p1 z))) (&hids (ap x1 r)) (&hids (ap a r))
ap/α-proj-pt {Y = Y} {y = y} idp p0 p1 = &ap/α-proj-pt-lemma Y (p0 y) (p1 y)  where
  &ap/α-proj-pt-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&hids (&α-proj-pt X p0 p1)) (&α-proj-pt□ X (&hids p0) (&hids p1)) (&hids (&α-proj-pt X p0 p1)) (&hids (&α-proj-pt X p0 p1)) ids ids
  &ap/α-proj-pt-lemma X idp idp = idc

&α-proj-pt□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) → Square x1 a (&α-proj-pt X up0 up1) (&α-proj-pt X vp0 vp1)
&α-proj-pt□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap+α-proj-pt : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (ap+ α (&α-proj-pt X p0 p1)) (&α-proj-pt□' Y (ap+ α p0) (ap+ α p1)) (&hids (α x1)) (&hids (α a)) (&apα-proj-pt f p0 p1) (&apα-proj-pt g p0 p1)
ap+α-proj-pt α {a = a} idp idp = ap+α-proj-pt-lemma (α a)  where
  ap+α-proj-pt-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α-proj-pt□' X (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α-proj-pt-lemma idp = idc

&apα-proj-pt-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&apα-proj-pt (λ _ → y) p0 p1) ids (ap-cst y (&α-proj-pt X p0 p1)) (&α-proj-pt□ Y (ap-cst y p0) (ap-cst y p1)) ids ids
&apα-proj-pt-cst y idp idp = idc

α-proj : (A : Ptd i) (B : Ptd i) (C : Ptd i) (c : ∣ C ∣) → PtdMap (A ∧ B) (A ∧ (B ∧ C))
α-proj A B C c = record { fun = α-proj.f ; ptf = &α-proj-pt ∣ (A ∧ (B ∧ C)) ∣ (gluer (proj (pt B) (pt C))) (gluer (proj (pt B) c)) }  module _ where

  module α-proj =
    SmashRec (λ a b → proj a (proj b c))
             (proj (pt A) (proj (pt B) (pt C)))
             (λ a → &α-proj-gluel ∣ (A ∧ (B ∧ C)) ∣ (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluer (pt C))) (ap (λ y → proj a y) (gluer c)))
             (proj (pt A) (proj (pt B) (pt C)))
             (λ b → &α-proj-gluer ∣ (A ∧ (B ∧ C)) ∣ (gluer (proj (pt B) (pt C))) (gluer (proj b c)))

&α-gluel-proj : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → x3 == a
&α-gluel-proj X idp idp idp idp = idp

&apα-gluel-proj : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Square (ap f (&α-gluel-proj X p0 p1 p2 p3)) (&α-gluel-proj Y (ap f p0) (ap f p1) (ap f p2) (ap f p3)) idp idp
&apα-gluel-proj f idp idp idp idp = ids

&α-gluel-proj□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x1 x2) {ux3 : X} {up3 : ux3 == ux2} {vx3 : X} {vp3 : vx3 == vx2} {x3 : ux3 == vx3} (p3 : Square up3 vp3 x3 x2) → Square (&α-gluel-proj X up0 up1 up2 up3) (&α-gluel-proj X vp0 vp1 vp2 vp3) x3 a
&α-gluel-proj□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids {up3 = idp} {vp3 = idp} ids = ids

ap/α-gluel-proj : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x1 x == x2 x) {x3 : X → Y} (p3 : (x : X) → x3 x == x2 x) → Cube (ap+ (λ x → &α-gluel-proj Y (p0 x) (p1 x) (p2 x) (p3 x)) r) (&α-gluel-proj□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r) (ap+ p3 r)) (&hids (&α-gluel-proj Y (p0 y) (p1 y) (p2 y) (p3 y))) (&hids (&α-gluel-proj Y (p0 z) (p1 z) (p2 z) (p3 z))) (&hids (ap x3 r)) (&hids (ap a r))
ap/α-gluel-proj {Y = Y} {y = y} idp p0 p1 p2 p3 = &ap/α-gluel-proj-lemma Y (p0 y) (p1 y) (p2 y) (p3 y)  where
  &ap/α-gluel-proj-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Cube (&hids (&α-gluel-proj X p0 p1 p2 p3)) (&α-gluel-proj□ X (&hids p0) (&hids p1) (&hids p2) (&hids p3)) (&hids (&α-gluel-proj X p0 p1 p2 p3)) (&hids (&α-gluel-proj X p0 p1 p2 p3)) ids ids
  &ap/α-gluel-proj-lemma X idp idp idp idp = idc

&α-gluel-proj□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square x1 x2 up2 vp2) {ux3 : X} {up3 : ux3 == ux2} {vx3 : X} {vp3 : vx3 == vx2} {x3 : ux3 == vx3} (p3 : Square x3 x2 up3 vp3) → Square x3 a (&α-gluel-proj X up0 up1 up2 up3) (&α-gluel-proj X vp0 vp1 vp2 vp3)
&α-gluel-proj□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids {up3 = idp} {vp3 = idp} ids = ids

ap+α-gluel-proj : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Cube (ap+ α (&α-gluel-proj X p0 p1 p2 p3)) (&α-gluel-proj□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2) (ap+ α p3)) (&hids (α x3)) (&hids (α a)) (&apα-gluel-proj f p0 p1 p2 p3) (&apα-gluel-proj g p0 p1 p2 p3)
ap+α-gluel-proj α {a = a} idp idp idp idp = ap+α-gluel-proj-lemma (α a)  where
  ap+α-gluel-proj-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α-gluel-proj□' X (&hids p) (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α-gluel-proj-lemma idp = idc

&apα-gluel-proj-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Cube (&apα-gluel-proj (λ _ → y) p0 p1 p2 p3) ids (ap-cst y (&α-gluel-proj X p0 p1 p2 p3)) (&α-gluel-proj□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2) (ap-cst y p3)) ids ids
&apα-gluel-proj-cst y idp idp idp idp = idc





&α-gluel-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x1 == x3) {x4 : x1 == a} (p4 : Square x4 (&α-proj-gluel X p0 p1 p3 p3) idp idp) {x5 : a == a} (p5 : Square x5 idp idp idp) → Square (&α-gluel-proj X p0 p1 p2 p2) idp x4 x5
&α-gluel-gluel X idp idp idp idp ids ids = ids

&apα-gluel-gluel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x1 == x3) {x4 : x1 == a} (p4 : Square x4 (&α-proj-gluel X p0 p1 p3 p3) idp idp) {x5 : a == a} (p5 : Square x5 idp idp idp) → Cube (ap² f (&α-gluel-gluel X p0 p1 p2 p3 p4 p5)) (&α-gluel-gluel Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (&coh∙□ (ap² f p4) (&apα-proj-gluel f p0 p1 p3 p3)) (ap² f p5)) (&apα-gluel-proj f p0 p1 p2 p2) ids (&hids (ap f x4)) (&hids (ap f x5))
&apα-gluel-gluel f idp idp idp idp ids ids = idc



&α-gluel-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : X} (p3 : x3 == x0) {x4 : x0 == x0} (p4 : Square x4 idp idp idp) {x5 : a == x3} (p5 : Square p0 p3 x5 x4) {x6 : x0 == x0} (p6 : Square x6 idp idp idp) {x7 : x1 == x3} (p7 : Square p1 p3 x7 x6) {x8 : x1 == a} (p8 : Square x8 (&α-proj-gluer X p0 p1) idp idp) {x9 : a == a} (p9 : Square x9 idp idp idp) → Square (&α-gluel-proj X p2 p2 x5 x7) idp x8 x9
&α-gluel-gluer X idp idp idp idp ids ids ids ids ids ids = ids

&apα-gluel-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : X} (p3 : x3 == x0) {x4 : x0 == x0} (p4 : Square x4 idp idp idp) {x5 : a == x3} (p5 : Square p0 p3 x5 x4) {x6 : x0 == x0} (p6 : Square x6 idp idp idp) {x7 : x1 == x3} (p7 : Square p1 p3 x7 x6) {x8 : x1 == a} (p8 : Square x8 (&α-proj-gluer X p0 p1) idp idp) {x9 : a == a} (p9 : Square x9 idp idp idp) → Cube (ap² f (&α-gluel-gluer X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9)) (&α-gluel-gluer Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap² f p4) (ap² f p5) (ap² f p6) (ap² f p7) (&coh∙□ (ap² f p8) (&apα-proj-gluer f p0 p1)) (ap² f p9)) (&apα-gluel-proj f p2 p2 x5 x7) ids (&hids (ap f x8)) (&hids (ap f x9))
&apα-gluel-gluer f idp idp idp idp ids ids ids ids ids ids = idc

α-gluel : (A : Ptd i) (B : Ptd i) (C : Ptd i) (x : ∣ A ∧ B ∣) → α-proj A B C (pt C) $ x == proj (pt A) (proj (pt B) (pt C))
α-gluel A B C = α-gluel.f  module _ where

  module α-gluel =
    SmashElimId {g = λ x → α-proj A B C (pt C) $ x}
                {h = λ x → proj (pt A) (proj (pt B) (pt C))}
                (λ a b → &α-gluel-proj ∣ (A ∧ (B ∧ C)) ∣ (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))) (ap (λ y → proj a y) (gluel b)))
                (idp)
                (λ a → &α-gluel-gluel ∣ (A ∧ (B ∧ C)) ∣ (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))) (ap (λ y → proj a y) (gluer (pt C))) (α-proj.gluel-β A B C (pt C) a) (ap-cst (proj (pt A) (proj (pt B) (pt C))) (gluel a)))
                (idp)
                (λ b → &α-gluel-gluer ∣ (A ∧ (B ∧ C)) ∣ (gluer (proj (pt B) (pt C))) (gluer (proj b (pt C))) (gluel (pt A)) (gluer basel) (ap-cst baser (gluel (pt B))) (ap+ (λ y → gluer y) (gluel (pt B))) (ap-cst baser (gluel b)) (ap+ (λ y → gluer y) (gluel b)) (α-proj.gluer-β A B C (pt C) b) (ap-cst (proj (pt A) (proj (pt B) (pt C))) (gluer b)))



&α-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → x1 == a
&α-gluer X idp idp = idp

&apα-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Square (ap f (&α-gluer X p0 p1)) (&α-gluer Y (ap f p0) (ap f p1)) idp idp
&apα-gluer f idp idp = ids

&α-gluer□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) → Square (&α-gluer X up0 up1) (&α-gluer X vp0 vp1) x1 a
&α-gluer□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap/α-gluer : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) → Cube (ap+ (λ x → &α-gluer Y (p0 x) (p1 x)) r) (&α-gluer□ Y (ap+ p0 r) (ap+ p1 r)) (&hids (&α-gluer Y (p0 y) (p1 y))) (&hids (&α-gluer Y (p0 z) (p1 z))) (&hids (ap x1 r)) (&hids (ap a r))
ap/α-gluer {Y = Y} {y = y} idp p0 p1 = &ap/α-gluer-lemma Y (p0 y) (p1 y)  where
  &ap/α-gluer-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&hids (&α-gluer X p0 p1)) (&α-gluer□ X (&hids p0) (&hids p1)) (&hids (&α-gluer X p0 p1)) (&hids (&α-gluer X p0 p1)) ids ids
  &ap/α-gluer-lemma X idp idp = idc

&α-gluer□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) → Square x1 a (&α-gluer X up0 up1) (&α-gluer X vp0 vp1)
&α-gluer□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap+α-gluer : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (ap+ α (&α-gluer X p0 p1)) (&α-gluer□' Y (ap+ α p0) (ap+ α p1)) (&hids (α x1)) (&hids (α a)) (&apα-gluer f p0 p1) (&apα-gluer g p0 p1)
ap+α-gluer α {a = a} idp idp = ap+α-gluer-lemma (α a)  where
  ap+α-gluer-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α-gluer□' X (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α-gluer-lemma idp = idc

&apα-gluer-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&apα-gluer (λ _ → y) p0 p1) ids (ap-cst y (&α-gluer X p0 p1)) (&α-gluer□ Y (ap-cst y p0) (ap-cst y p1)) ids ids
&apα-gluer-cst y idp idp = idc



α : (A : Ptd i) (B : Ptd i) (C : Ptd i) → PtdMap ((A ∧ B) ∧ C) (A ∧ (B ∧ C))
α A B C = record { fun = α.f ; ptf = idp }  module _ where

  module α =
    SmashRec {A = A ∧ B} {B = C}
             (λ x c → α-proj A B C c $ x) 
             (proj (pt A) (proj (pt B) (pt C)))
             (α-gluel A B C)
             (proj (pt A) (proj (pt B) (pt C)))
             (λ c → &α-gluer ∣ (A ∧ (B ∧ C)) ∣ (gluer (proj (pt B) (pt C))) (gluer (proj (pt B) c)))


&α⁻¹-proj-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → x1 == a
&α⁻¹-proj-gluel X idp idp = idp

&apα⁻¹-proj-gluel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Square (ap f (&α⁻¹-proj-gluel X p0 p1)) (&α⁻¹-proj-gluel Y (ap f p0) (ap f p1)) idp idp
&apα⁻¹-proj-gluel f idp idp = ids

&α⁻¹-proj-gluel□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) → Square (&α⁻¹-proj-gluel X up0 up1) (&α⁻¹-proj-gluel X vp0 vp1) x1 a
&α⁻¹-proj-gluel□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap/α⁻¹-proj-gluel : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) → Cube (ap+ (λ x → &α⁻¹-proj-gluel Y (p0 x) (p1 x)) r) (&α⁻¹-proj-gluel□ Y (ap+ p0 r) (ap+ p1 r)) (&hids (&α⁻¹-proj-gluel Y (p0 y) (p1 y))) (&hids (&α⁻¹-proj-gluel Y (p0 z) (p1 z))) (&hids (ap x1 r)) (&hids (ap a r))
ap/α⁻¹-proj-gluel {Y = Y} {y = y} idp p0 p1 = &ap/α⁻¹-proj-gluel-lemma Y (p0 y) (p1 y)  where
  &ap/α⁻¹-proj-gluel-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&hids (&α⁻¹-proj-gluel X p0 p1)) (&α⁻¹-proj-gluel□ X (&hids p0) (&hids p1)) (&hids (&α⁻¹-proj-gluel X p0 p1)) (&hids (&α⁻¹-proj-gluel X p0 p1)) ids ids
  &ap/α⁻¹-proj-gluel-lemma X idp idp = idc

&α⁻¹-proj-gluel□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) → Square x1 a (&α⁻¹-proj-gluel X up0 up1) (&α⁻¹-proj-gluel X vp0 vp1)
&α⁻¹-proj-gluel□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap+α⁻¹-proj-gluel : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (ap+ α (&α⁻¹-proj-gluel X p0 p1)) (&α⁻¹-proj-gluel□' Y (ap+ α p0) (ap+ α p1)) (&hids (α x1)) (&hids (α a)) (&apα⁻¹-proj-gluel f p0 p1) (&apα⁻¹-proj-gluel g p0 p1)
ap+α⁻¹-proj-gluel α {a = a} idp idp = ap+α⁻¹-proj-gluel-lemma (α a)  where
  ap+α⁻¹-proj-gluel-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α⁻¹-proj-gluel□' X (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α⁻¹-proj-gluel-lemma idp = idc

&apα⁻¹-proj-gluel-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&apα⁻¹-proj-gluel (λ _ → y) p0 p1) ids (ap-cst y (&α⁻¹-proj-gluel X p0 p1)) (&α⁻¹-proj-gluel□ Y (ap-cst y p0) (ap-cst y p1)) ids ids
&apα⁻¹-proj-gluel-cst y idp idp = idc

&α⁻¹-proj-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → x3 == a
&α⁻¹-proj-gluer X idp idp idp idp = idp

&apα⁻¹-proj-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Square (ap f (&α⁻¹-proj-gluer X p0 p1 p2 p3)) (&α⁻¹-proj-gluer Y (ap f p0) (ap f p1) (ap f p2) (ap f p3)) idp idp
&apα⁻¹-proj-gluer f idp idp idp idp = ids

&α⁻¹-proj-gluer□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x1 x2) {ux3 : X} {up3 : ux3 == ux2} {vx3 : X} {vp3 : vx3 == vx2} {x3 : ux3 == vx3} (p3 : Square up3 vp3 x3 x2) → Square (&α⁻¹-proj-gluer X up0 up1 up2 up3) (&α⁻¹-proj-gluer X vp0 vp1 vp2 vp3) x3 a
&α⁻¹-proj-gluer□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids {up3 = idp} {vp3 = idp} ids = ids

ap/α⁻¹-proj-gluer : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x1 x == x2 x) {x3 : X → Y} (p3 : (x : X) → x3 x == x2 x) → Cube (ap+ (λ x → &α⁻¹-proj-gluer Y (p0 x) (p1 x) (p2 x) (p3 x)) r) (&α⁻¹-proj-gluer□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r) (ap+ p3 r)) (&hids (&α⁻¹-proj-gluer Y (p0 y) (p1 y) (p2 y) (p3 y))) (&hids (&α⁻¹-proj-gluer Y (p0 z) (p1 z) (p2 z) (p3 z))) (&hids (ap x3 r)) (&hids (ap a r))
ap/α⁻¹-proj-gluer {Y = Y} {y = y} idp p0 p1 p2 p3 = &ap/α⁻¹-proj-gluer-lemma Y (p0 y) (p1 y) (p2 y) (p3 y)  where
  &ap/α⁻¹-proj-gluer-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Cube (&hids (&α⁻¹-proj-gluer X p0 p1 p2 p3)) (&α⁻¹-proj-gluer□ X (&hids p0) (&hids p1) (&hids p2) (&hids p3)) (&hids (&α⁻¹-proj-gluer X p0 p1 p2 p3)) (&hids (&α⁻¹-proj-gluer X p0 p1 p2 p3)) ids ids
  &ap/α⁻¹-proj-gluer-lemma X idp idp idp idp = idc

&α⁻¹-proj-gluer□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square x1 x2 up2 vp2) {ux3 : X} {up3 : ux3 == ux2} {vx3 : X} {vp3 : vx3 == vx2} {x3 : ux3 == vx3} (p3 : Square x3 x2 up3 vp3) → Square x3 a (&α⁻¹-proj-gluer X up0 up1 up2 up3) (&α⁻¹-proj-gluer X vp0 vp1 vp2 vp3)
&α⁻¹-proj-gluer□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids {up3 = idp} {vp3 = idp} ids = ids

ap+α⁻¹-proj-gluer : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Cube (ap+ α (&α⁻¹-proj-gluer X p0 p1 p2 p3)) (&α⁻¹-proj-gluer□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2) (ap+ α p3)) (&hids (α x3)) (&hids (α a)) (&apα⁻¹-proj-gluer f p0 p1 p2 p3) (&apα⁻¹-proj-gluer g p0 p1 p2 p3)
ap+α⁻¹-proj-gluer α {a = a} idp idp idp idp = ap+α⁻¹-proj-gluer-lemma (α a)  where
  ap+α⁻¹-proj-gluer-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α⁻¹-proj-gluer□' X (&hids p) (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α⁻¹-proj-gluer-lemma idp = idc

&apα⁻¹-proj-gluer-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Cube (&apα⁻¹-proj-gluer (λ _ → y) p0 p1 p2 p3) ids (ap-cst y (&α⁻¹-proj-gluer X p0 p1 p2 p3)) (&α⁻¹-proj-gluer□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2) (ap-cst y p3)) ids ids
&apα⁻¹-proj-gluer-cst y idp idp idp idp = idc

&α⁻¹-proj-pt : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → x1 == a
&α⁻¹-proj-pt X idp idp = idp

&apα⁻¹-proj-pt : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Square (ap f (&α⁻¹-proj-pt X p0 p1)) (&α⁻¹-proj-pt Y (ap f p0) (ap f p1)) idp idp
&apα⁻¹-proj-pt f idp idp = ids

&α⁻¹-proj-pt□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) → Square (&α⁻¹-proj-pt X up0 up1) (&α⁻¹-proj-pt X vp0 vp1) x1 a
&α⁻¹-proj-pt□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap/α⁻¹-proj-pt : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) → Cube (ap+ (λ x → &α⁻¹-proj-pt Y (p0 x) (p1 x)) r) (&α⁻¹-proj-pt□ Y (ap+ p0 r) (ap+ p1 r)) (&hids (&α⁻¹-proj-pt Y (p0 y) (p1 y))) (&hids (&α⁻¹-proj-pt Y (p0 z) (p1 z))) (&hids (ap x1 r)) (&hids (ap a r))
ap/α⁻¹-proj-pt {Y = Y} {y = y} idp p0 p1 = &ap/α⁻¹-proj-pt-lemma Y (p0 y) (p1 y)  where
  &ap/α⁻¹-proj-pt-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&hids (&α⁻¹-proj-pt X p0 p1)) (&α⁻¹-proj-pt□ X (&hids p0) (&hids p1)) (&hids (&α⁻¹-proj-pt X p0 p1)) (&hids (&α⁻¹-proj-pt X p0 p1)) ids ids
  &ap/α⁻¹-proj-pt-lemma X idp idp = idc

&α⁻¹-proj-pt□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) → Square x1 a (&α⁻¹-proj-pt X up0 up1) (&α⁻¹-proj-pt X vp0 vp1)
&α⁻¹-proj-pt□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap+α⁻¹-proj-pt : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (ap+ α (&α⁻¹-proj-pt X p0 p1)) (&α⁻¹-proj-pt□' Y (ap+ α p0) (ap+ α p1)) (&hids (α x1)) (&hids (α a)) (&apα⁻¹-proj-pt f p0 p1) (&apα⁻¹-proj-pt g p0 p1)
ap+α⁻¹-proj-pt α {a = a} idp idp = ap+α⁻¹-proj-pt-lemma (α a)  where
  ap+α⁻¹-proj-pt-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α⁻¹-proj-pt□' X (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α⁻¹-proj-pt-lemma idp = idc

&apα⁻¹-proj-pt-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&apα⁻¹-proj-pt (λ _ → y) p0 p1) ids (ap-cst y (&α⁻¹-proj-pt X p0 p1)) (&α⁻¹-proj-pt□ Y (ap-cst y p0) (ap-cst y p1)) ids ids
&apα⁻¹-proj-pt-cst y idp idp = idc

α⁻¹-proj : (A : Ptd i) (B : Ptd i) (C : Ptd i) (a : ∣ A ∣) → PtdMap (B ∧ C) ((A ∧ B) ∧ C)
α⁻¹-proj A B C a = record { fun = α⁻¹-proj.f ; ptf = &α⁻¹-proj-pt ∣ ((A ∧ B) ∧ C) ∣ (ap (λ x → proj x (pt C)) (gluel (pt A))) (ap (λ x → proj x (pt C)) (gluel a)) }  module _ where

  module α⁻¹-proj =
    SmashRec (λ b c → proj (proj a b) c)
             (proj (proj (pt A) (pt B)) (pt C))
             (λ b → &α⁻¹-proj-gluel ∣ ((A ∧ B) ∧ C) ∣ (gluel (proj (pt A) (pt B))) (gluel (proj a b)))
             (proj (proj (pt A) (pt B)) (pt C))
             (λ c → &α⁻¹-proj-gluer ∣ ((A ∧ B) ∧ C) ∣ (gluer (pt C)) (gluer c) (ap (λ x → proj x c) (gluel (pt A))) (ap (λ x → proj x c) (gluel a)))

&α⁻¹-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → x1 == a
&α⁻¹-gluel X idp idp = idp

&apα⁻¹-gluel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Square (ap f (&α⁻¹-gluel X p0 p1)) (&α⁻¹-gluel Y (ap f p0) (ap f p1)) idp idp
&apα⁻¹-gluel f idp idp = ids

&α⁻¹-gluel□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) → Square (&α⁻¹-gluel X up0 up1) (&α⁻¹-gluel X vp0 vp1) x1 a
&α⁻¹-gluel□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap/α⁻¹-gluel : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) → Cube (ap+ (λ x → &α⁻¹-gluel Y (p0 x) (p1 x)) r) (&α⁻¹-gluel□ Y (ap+ p0 r) (ap+ p1 r)) (&hids (&α⁻¹-gluel Y (p0 y) (p1 y))) (&hids (&α⁻¹-gluel Y (p0 z) (p1 z))) (&hids (ap x1 r)) (&hids (ap a r))
ap/α⁻¹-gluel {Y = Y} {y = y} idp p0 p1 = &ap/α⁻¹-gluel-lemma Y (p0 y) (p1 y)  where
  &ap/α⁻¹-gluel-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&hids (&α⁻¹-gluel X p0 p1)) (&α⁻¹-gluel□ X (&hids p0) (&hids p1)) (&hids (&α⁻¹-gluel X p0 p1)) (&hids (&α⁻¹-gluel X p0 p1)) ids ids
  &ap/α⁻¹-gluel-lemma X idp idp = idc

&α⁻¹-gluel□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) → Square x1 a (&α⁻¹-gluel X up0 up1) (&α⁻¹-gluel X vp0 vp1)
&α⁻¹-gluel□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids = ids

ap+α⁻¹-gluel : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (ap+ α (&α⁻¹-gluel X p0 p1)) (&α⁻¹-gluel□' Y (ap+ α p0) (ap+ α p1)) (&hids (α x1)) (&hids (α a)) (&apα⁻¹-gluel f p0 p1) (&apα⁻¹-gluel g p0 p1)
ap+α⁻¹-gluel α {a = a} idp idp = ap+α⁻¹-gluel-lemma (α a)  where
  ap+α⁻¹-gluel-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α⁻¹-gluel□' X (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α⁻¹-gluel-lemma idp = idc

&apα⁻¹-gluel-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) → Cube (&apα⁻¹-gluel (λ _ → y) p0 p1) ids (ap-cst y (&α⁻¹-gluel X p0 p1)) (&α⁻¹-gluel□ Y (ap-cst y p0) (ap-cst y p1)) ids ids
&apα⁻¹-gluel-cst y idp idp = idc

&α⁻¹-gluer-proj : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → x3 == a
&α⁻¹-gluer-proj X idp idp idp idp = idp

&apα⁻¹-gluer-proj : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Square (ap f (&α⁻¹-gluer-proj X p0 p1 p2 p3)) (&α⁻¹-gluer-proj Y (ap f p0) (ap f p1) (ap f p2) (ap f p3)) idp idp
&apα⁻¹-gluer-proj f idp idp idp idp = ids

&α⁻¹-gluer-proj□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x1 x2) {ux3 : X} {up3 : ux3 == ux2} {vx3 : X} {vp3 : vx3 == vx2} {x3 : ux3 == vx3} (p3 : Square up3 vp3 x3 x2) → Square (&α⁻¹-gluer-proj X up0 up1 up2 up3) (&α⁻¹-gluer-proj X vp0 vp1 vp2 vp3) x3 a
&α⁻¹-gluer-proj□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids {up3 = idp} {vp3 = idp} ids = ids

ap/α⁻¹-gluer-proj : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x1 x == x2 x) {x3 : X → Y} (p3 : (x : X) → x3 x == x2 x) → Cube (ap+ (λ x → &α⁻¹-gluer-proj Y (p0 x) (p1 x) (p2 x) (p3 x)) r) (&α⁻¹-gluer-proj□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r) (ap+ p3 r)) (&hids (&α⁻¹-gluer-proj Y (p0 y) (p1 y) (p2 y) (p3 y))) (&hids (&α⁻¹-gluer-proj Y (p0 z) (p1 z) (p2 z) (p3 z))) (&hids (ap x3 r)) (&hids (ap a r))
ap/α⁻¹-gluer-proj {Y = Y} {y = y} idp p0 p1 p2 p3 = &ap/α⁻¹-gluer-proj-lemma Y (p0 y) (p1 y) (p2 y) (p3 y)  where
  &ap/α⁻¹-gluer-proj-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Cube (&hids (&α⁻¹-gluer-proj X p0 p1 p2 p3)) (&α⁻¹-gluer-proj□ X (&hids p0) (&hids p1) (&hids p2) (&hids p3)) (&hids (&α⁻¹-gluer-proj X p0 p1 p2 p3)) (&hids (&α⁻¹-gluer-proj X p0 p1 p2 p3)) ids ids
  &ap/α⁻¹-gluer-proj-lemma X idp idp idp idp = idc

&α⁻¹-gluer-proj□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux1 == ux2} {vx2 : X} {vp2 : vx1 == vx2} {x2 : ux2 == vx2} (p2 : Square x1 x2 up2 vp2) {ux3 : X} {up3 : ux3 == ux2} {vx3 : X} {vp3 : vx3 == vx2} {x3 : ux3 == vx3} (p3 : Square x3 x2 up3 vp3) → Square x3 a (&α⁻¹-gluer-proj X up0 up1 up2 up3) (&α⁻¹-gluer-proj X vp0 vp1 vp2 vp3)
&α⁻¹-gluer-proj□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids {up3 = idp} {vp3 = idp} ids = ids

ap+α⁻¹-gluer-proj : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Cube (ap+ α (&α⁻¹-gluer-proj X p0 p1 p2 p3)) (&α⁻¹-gluer-proj□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2) (ap+ α p3)) (&hids (α x3)) (&hids (α a)) (&apα⁻¹-gluer-proj f p0 p1 p2 p3) (&apα⁻¹-gluer-proj g p0 p1 p2 p3)
ap+α⁻¹-gluer-proj α {a = a} idp idp idp idp = ap+α⁻¹-gluer-proj-lemma (α a)  where
  ap+α⁻¹-gluer-proj-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α⁻¹-gluer-proj□' X (&hids p) (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α⁻¹-gluer-proj-lemma idp = idc

&apα⁻¹-gluer-proj-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) → Cube (&apα⁻¹-gluer-proj (λ _ → y) p0 p1 p2 p3) ids (ap-cst y (&α⁻¹-gluer-proj X p0 p1 p2 p3)) (&α⁻¹-gluer-proj□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2) (ap-cst y p3)) ids ids
&apα⁻¹-gluer-proj-cst y idp idp idp idp = idc





&α⁻¹-gluer-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : X} (p3 : a == x3) {x4 : x3 == x3} (p4 : Square x4 idp idp idp) {x5 : x0 == x3} (p5 : Square p3 x5 p0 x4) {x6 : x3 == x3} (p6 : Square x6 idp idp idp) {x7 : x1 == x3} (p7 : Square x7 x5 p1 x6) {x8 : x1 == a} (p8 : Square x8 (&α⁻¹-proj-gluel X p3 x7) idp idp) {x9 : a == a} (p9 : Square x9 idp idp idp) → Square (&α⁻¹-gluer-proj X p2 p2 p0 p1) idp x8 x9
&α⁻¹-gluer-gluel X idp idp idp idp ids ids ids ids ids ids = ids

&apα⁻¹-gluer-gluel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : a == x2) {x3 : X} (p3 : a == x3) {x4 : x3 == x3} (p4 : Square x4 idp idp idp) {x5 : x0 == x3} (p5 : Square p3 x5 p0 x4) {x6 : x3 == x3} (p6 : Square x6 idp idp idp) {x7 : x1 == x3} (p7 : Square x7 x5 p1 x6) {x8 : x1 == a} (p8 : Square x8 (&α⁻¹-proj-gluel X p3 x7) idp idp) {x9 : a == a} (p9 : Square x9 idp idp idp) → Cube (ap² f (&α⁻¹-gluer-gluel X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9)) (&α⁻¹-gluer-gluel Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap² f p4) (ap² f p5) (ap² f p6) (ap² f p7) (&coh∙□ (ap² f p8) (&apα⁻¹-proj-gluel f p3 x7)) (ap² f p9)) (&apα⁻¹-gluer-proj f p2 p2 p0 p1) ids (&hids (ap f x8)) (&hids (ap f x9))
&apα⁻¹-gluer-gluel f idp idp idp idp ids ids ids ids ids ids = idc



&α⁻¹-gluer-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x1 == x3) {x4 : x1 == a} (p4 : Square x4 (&α⁻¹-proj-gluer X p0 p1 p3 p3) idp idp) {x5 : a == a} (p5 : Square x5 idp idp idp) → Square (&α⁻¹-gluer-proj X p0 p1 p2 p2) idp x4 x5
&α⁻¹-gluer-gluer X idp idp idp idp ids ids = ids

&apα⁻¹-gluer-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x1 == x3) {x4 : x1 == a} (p4 : Square x4 (&α⁻¹-proj-gluer X p0 p1 p3 p3) idp idp) {x5 : a == a} (p5 : Square x5 idp idp idp) → Cube (ap² f (&α⁻¹-gluer-gluer X p0 p1 p2 p3 p4 p5)) (&α⁻¹-gluer-gluer Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (&coh∙□ (ap² f p4) (&apα⁻¹-proj-gluer f p0 p1 p3 p3)) (ap² f p5)) (&apα⁻¹-gluer-proj f p0 p1 p2 p2) ids (&hids (ap f x4)) (&hids (ap f x5))
&apα⁻¹-gluer-gluer f idp idp idp idp ids ids = idc

α⁻¹-gluer : (A : Ptd i) (B : Ptd i) (C : Ptd i) (x : ∣ B ∧ C ∣) → α⁻¹-proj A B C (pt A) $ x == proj (proj (pt A) (pt B)) (pt C)
α⁻¹-gluer A B C = α⁻¹-gluer.f  module _ where

  module α⁻¹-gluer =
    SmashElimId {g = λ x → α⁻¹-proj A B C (pt A) $ x}
                {h = λ x → proj (proj (pt A) (pt B)) (pt C)}
                (λ b c → &α⁻¹-gluer-proj ∣ ((A ∧ B) ∧ C) ∣ (gluer (pt C)) (gluer c) (ap (λ x → proj x c) (gluer (pt B))) (ap (λ x → proj x c) (gluer b)))
                (idp)
                (λ b → &α⁻¹-gluer-gluel ∣ ((A ∧ B) ∧ C) ∣ (ap (λ x → proj x (pt C)) (gluer (pt B))) (ap (λ x → proj x (pt C)) (gluer b)) (gluer (pt C)) (gluel (proj (pt A) (pt B))) (ap-cst basel (gluer (pt B))) (ap+ (λ x → gluel x) (gluer (pt B))) (ap-cst basel (gluer b)) (ap+ (λ x → gluel x) (gluer b)) (α⁻¹-proj.gluel-β A B C (pt A) b) (ap-cst (proj (proj (pt A) (pt B)) (pt C)) (gluel b)))
                (idp)
                (λ c → &α⁻¹-gluer-gluer ∣ ((A ∧ B) ∧ C) ∣ (gluer (pt C)) (gluer c) (ap (λ x → proj x c) (gluer (pt B))) (ap (λ x → proj x c) (gluel (pt A))) (α⁻¹-proj.gluer-β A B C (pt A) c) (ap-cst (proj (proj (pt A) (pt B)) (pt C)) (gluer c)))





α⁻¹ : (A : Ptd i) (B : Ptd i) (C : Ptd i) → PtdMap (A ∧ (B ∧ C)) ((A ∧ B) ∧ C)
α⁻¹ A B C = record { fun = α⁻¹.f ; ptf = idp }  module _ where

 module α⁻¹ =
   SmashRec {A = A} {B = B ∧ C}
            (λ a → α⁻¹-proj A B C a $_)
            (proj (proj (pt A) (pt B)) (pt C))
            (λ a → &α⁻¹-gluel ∣ ((A ∧ B) ∧ C) ∣ (ap (λ x → proj x (pt C)) (gluel (pt A))) (ap (λ x → proj x (pt C)) (gluel a)))
            (proj (proj (pt A) (pt B)) (pt C))
            (α⁻¹-gluer A B C)




&σ-nat-basel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → a == x2
&σ-nat-basel X idp idp idp = idp

&apσ-nat-basel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Square (ap f (&σ-nat-basel X p0 p1 p2)) (&σ-nat-basel Y (ap f p0) (ap f p1) (ap f p2)) idp idp
&apσ-nat-basel f idp idp idp = ids

&σ-nat-basel□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux2 == ux1} {vx2 : X} {vp2 : vx2 == vx1} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x2 x1) → Square (&σ-nat-basel X up0 up1 up2) (&σ-nat-basel X vp0 vp1 vp2) a x2
&σ-nat-basel□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap/σ-nat-basel : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x2 x == x1 x) → Cube (ap+ (λ x → &σ-nat-basel Y (p0 x) (p1 x) (p2 x)) r) (&σ-nat-basel□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r)) (&hids (&σ-nat-basel Y (p0 y) (p1 y) (p2 y))) (&hids (&σ-nat-basel Y (p0 z) (p1 z) (p2 z))) (&hids (ap a r)) (&hids (ap x2 r))
ap/σ-nat-basel {Y = Y} {y = y} idp p0 p1 p2 = &ap/σ-nat-basel-lemma Y (p0 y) (p1 y) (p2 y)  where
  &ap/σ-nat-basel-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (&hids (&σ-nat-basel X p0 p1 p2)) (&σ-nat-basel□ X (&hids p0) (&hids p1) (&hids p2)) (&hids (&σ-nat-basel X p0 p1 p2)) (&hids (&σ-nat-basel X p0 p1 p2)) ids ids
  &ap/σ-nat-basel-lemma X idp idp idp = idc

&σ-nat-basel□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux2 == ux1} {vx2 : X} {vp2 : vx2 == vx1} {x2 : ux2 == vx2} (p2 : Square x2 x1 up2 vp2) → Square a x2 (&σ-nat-basel X up0 up1 up2) (&σ-nat-basel X vp0 vp1 vp2)
&σ-nat-basel□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap+σ-nat-basel : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (ap+ α (&σ-nat-basel X p0 p1 p2)) (&σ-nat-basel□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2)) (&hids (α a)) (&hids (α x2)) (&apσ-nat-basel f p0 p1 p2) (&apσ-nat-basel g p0 p1 p2)
ap+σ-nat-basel α {a = a} idp idp idp = ap+σ-nat-basel-lemma (α a)  where
  ap+σ-nat-basel-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&σ-nat-basel□' X (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+σ-nat-basel-lemma idp = idc

&apσ-nat-basel-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (&apσ-nat-basel (λ _ → y) p0 p1 p2) ids (ap-cst y (&σ-nat-basel X p0 p1 p2)) (&σ-nat-basel□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2)) ids ids
&apσ-nat-basel-cst y idp idp idp = idc

&σ-nat-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) {x3 : X} (p3 : x3 == x0) {x4 : X} (p4 : x4 == x3) {x5 : a == a} (p5 : Square x5 (&σ-gluel X p0 p0) idp idp) {x6 : x1 == a} (p6 : Square x6 (&σ-gluel X p0 p1) idp idp) {x7 : x2 == x1} (p7 : Square p2 x7 idp idp) {x8 : x2 == a} (p8 : Square x8 (&∧-map-gluel X x5 x6 x7) idp idp) {x9 : x2 == a} (p9 : Square x9 x8 idp idp) {x10 : x2 == a} (p10 : Square x10 x9 idp idp) {x11 : x4 == a} (p11 : Square x11 (&∧-map-gluer X p0 p3 p4) idp idp) {x12 : x2 == a} (p12 : Square x12 (&∧-map-gluer X p0 p1 p2) idp idp) {x13 : x2 == x4} (p13 : Square x13 (&σ-gluel X x11 x12) idp idp) {x14 : x2 == x4} (p14 : Square x14 x13 idp idp) {x15 : x2 == x4} (p15 : Square x15 x14 idp idp) → Square idp (&σ-nat-basel X p0 p3 p4) x10 x15
&σ-nat-gluel X idp idp idp idp idp ids ids ids ids ids ids ids ids ids ids ids = ids

&apσ-nat-gluel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) {x3 : X} (p3 : x3 == x0) {x4 : X} (p4 : x4 == x3) {x5 : a == a} (p5 : Square x5 (&σ-gluel X p0 p0) idp idp) {x6 : x1 == a} (p6 : Square x6 (&σ-gluel X p0 p1) idp idp) {x7 : x2 == x1} (p7 : Square p2 x7 idp idp) {x8 : x2 == a} (p8 : Square x8 (&∧-map-gluel X x5 x6 x7) idp idp) {x9 : x2 == a} (p9 : Square x9 x8 idp idp) {x10 : x2 == a} (p10 : Square x10 x9 idp idp) {x11 : x4 == a} (p11 : Square x11 (&∧-map-gluer X p0 p3 p4) idp idp) {x12 : x2 == a} (p12 : Square x12 (&∧-map-gluer X p0 p1 p2) idp idp) {x13 : x2 == x4} (p13 : Square x13 (&σ-gluel X x11 x12) idp idp) {x14 : x2 == x4} (p14 : Square x14 x13 idp idp) {x15 : x2 == x4} (p15 : Square x15 x14 idp idp) → Cube (ap² f (&σ-nat-gluel X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15)) (&σ-nat-gluel Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap f p4) (&coh∙□ (ap² f p5) (&apσ-gluel f p0 p0)) (&coh∙□ (ap² f p6) (&apσ-gluel f p0 p1)) (ap² f p7) (&coh∙□ (ap² f p8) (&ap∧-map-gluel f x5 x6 x7)) (ap² f p9) (ap² f p10) (&coh∙□ (ap² f p11) (&ap∧-map-gluer f p0 p3 p4)) (&coh∙□ (ap² f p12) (&ap∧-map-gluer f p0 p1 p2)) (&coh∙□ (ap² f p13) (&apσ-gluel f x11 x12)) (ap² f p14) (ap² f p15)) ids (&apσ-nat-basel f p0 p3 p4) (&hids (ap f x10)) (&hids (ap f x15))
&apσ-nat-gluel f idp idp idp idp idp ids ids ids ids ids ids ids ids ids ids ids = idc

&σ-nat-baser : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → a == x2
&σ-nat-baser X idp idp idp = idp

&apσ-nat-baser : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Square (ap f (&σ-nat-baser X p0 p1 p2)) (&σ-nat-baser Y (ap f p0) (ap f p1) (ap f p2)) idp idp
&apσ-nat-baser f idp idp idp = ids

&σ-nat-baser□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux2 == ux1} {vx2 : X} {vp2 : vx2 == vx1} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x2 x1) → Square (&σ-nat-baser X up0 up1 up2) (&σ-nat-baser X vp0 vp1 vp2) a x2
&σ-nat-baser□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap/σ-nat-baser : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x2 x == x1 x) → Cube (ap+ (λ x → &σ-nat-baser Y (p0 x) (p1 x) (p2 x)) r) (&σ-nat-baser□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r)) (&hids (&σ-nat-baser Y (p0 y) (p1 y) (p2 y))) (&hids (&σ-nat-baser Y (p0 z) (p1 z) (p2 z))) (&hids (ap a r)) (&hids (ap x2 r))
ap/σ-nat-baser {Y = Y} {y = y} idp p0 p1 p2 = &ap/σ-nat-baser-lemma Y (p0 y) (p1 y) (p2 y)  where
  &ap/σ-nat-baser-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (&hids (&σ-nat-baser X p0 p1 p2)) (&σ-nat-baser□ X (&hids p0) (&hids p1) (&hids p2)) (&hids (&σ-nat-baser X p0 p1 p2)) (&hids (&σ-nat-baser X p0 p1 p2)) ids ids
  &ap/σ-nat-baser-lemma X idp idp idp = idc

&σ-nat-baser□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux2 == ux1} {vx2 : X} {vp2 : vx2 == vx1} {x2 : ux2 == vx2} (p2 : Square x2 x1 up2 vp2) → Square a x2 (&σ-nat-baser X up0 up1 up2) (&σ-nat-baser X vp0 vp1 vp2)
&σ-nat-baser□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap+σ-nat-baser : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (ap+ α (&σ-nat-baser X p0 p1 p2)) (&σ-nat-baser□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2)) (&hids (α a)) (&hids (α x2)) (&apσ-nat-baser f p0 p1 p2) (&apσ-nat-baser g p0 p1 p2)
ap+σ-nat-baser α {a = a} idp idp idp = ap+σ-nat-baser-lemma (α a)  where
  ap+σ-nat-baser-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&σ-nat-baser□' X (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+σ-nat-baser-lemma idp = idc

&apσ-nat-baser-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (&apσ-nat-baser (λ _ → y) p0 p1 p2) ids (ap-cst y (&σ-nat-baser X p0 p1 p2)) (&σ-nat-baser□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2)) ids ids
&apσ-nat-baser-cst y idp idp idp = idc

&σ-nat-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) {x3 : X} (p3 : a == x3) {x4 : X} (p4 : x4 == x3) {x5 : X} (p5 : x5 == x4) {x6 : a == a} (p6 : Square x6 (&σ-gluer X p0 p0) idp idp) {x7 : x1 == a} (p7 : Square x7 (&σ-gluer X p0 p1) idp idp) {x8 : x2 == x1} (p8 : Square p2 x8 idp idp) {x9 : x2 == a} (p9 : Square x9 (&∧-map-gluer X x6 x7 x8) idp idp) {x10 : x2 == a} (p10 : Square x10 x9 idp idp) {x11 : x2 == a} (p11 : Square x11 x10 idp idp) {x12 : X} (p12 : x12 == a) {x13 : x0 == x0} (p13 : Square x13 idp idp idp) {x14 : x12 == x0} (p14 : Square x14 p0 p12 x13) {x15 : x3 == x3} (p15 : Square x15 idp idp idp) {x16 : x4 == a} (p16 : Square p4 p3 x16 x15) {x17 : x5 == x12} (p17 : Square p5 p12 x17 x16) {x18 : x5 == a} (p18 : Square x18 (&∧-map-gluel X p0 x14 x17) idp idp) {x19 : x2 == a} (p19 : Square x19 (&∧-map-gluel X p0 p1 p2) idp idp) {x20 : x2 == x5} (p20 : Square x20 (&σ-gluer X x18 x19) idp idp) {x21 : x2 == x5} (p21 : Square x21 x20 idp idp) {x22 : x2 == x5} (p22 : Square x22 x21 idp idp) → Square idp (&σ-nat-baser X p3 p4 p5) x11 x22
&σ-nat-gluer X idp idp idp idp idp idp ids ids ids ids ids ids idp ids ids ids ids ids ids ids ids ids ids = ids

&apσ-nat-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) {x3 : X} (p3 : a == x3) {x4 : X} (p4 : x4 == x3) {x5 : X} (p5 : x5 == x4) {x6 : a == a} (p6 : Square x6 (&σ-gluer X p0 p0) idp idp) {x7 : x1 == a} (p7 : Square x7 (&σ-gluer X p0 p1) idp idp) {x8 : x2 == x1} (p8 : Square p2 x8 idp idp) {x9 : x2 == a} (p9 : Square x9 (&∧-map-gluer X x6 x7 x8) idp idp) {x10 : x2 == a} (p10 : Square x10 x9 idp idp) {x11 : x2 == a} (p11 : Square x11 x10 idp idp) {x12 : X} (p12 : x12 == a) {x13 : x0 == x0} (p13 : Square x13 idp idp idp) {x14 : x12 == x0} (p14 : Square x14 p0 p12 x13) {x15 : x3 == x3} (p15 : Square x15 idp idp idp) {x16 : x4 == a} (p16 : Square p4 p3 x16 x15) {x17 : x5 == x12} (p17 : Square p5 p12 x17 x16) {x18 : x5 == a} (p18 : Square x18 (&∧-map-gluel X p0 x14 x17) idp idp) {x19 : x2 == a} (p19 : Square x19 (&∧-map-gluel X p0 p1 p2) idp idp) {x20 : x2 == x5} (p20 : Square x20 (&σ-gluer X x18 x19) idp idp) {x21 : x2 == x5} (p21 : Square x21 x20 idp idp) {x22 : x2 == x5} (p22 : Square x22 x21 idp idp) → Cube (ap² f (&σ-nat-gluer X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 p18 p19 p20 p21 p22)) (&σ-nat-gluer Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap f p4) (ap f p5) (&coh∙□ (ap² f p6) (&apσ-gluer f p0 p0)) (&coh∙□ (ap² f p7) (&apσ-gluer f p0 p1)) (ap² f p8) (&coh∙□ (ap² f p9) (&ap∧-map-gluer f x6 x7 x8)) (ap² f p10) (ap² f p11) (ap f p12) (ap² f p13) (ap² f p14) (ap² f p15) (ap² f p16) (ap² f p17) (&coh∙□ (ap² f p18) (&ap∧-map-gluel f p0 x14 x17)) (&coh∙□ (ap² f p19) (&ap∧-map-gluel f p0 p1 p2)) (&coh∙□ (ap² f p20) (&apσ-gluer f x18 x19)) (ap² f p21) (ap² f p22)) ids (&apσ-nat-baser f p3 p4 p5) (&hids (ap f x11)) (&hids (ap f x22))
&apσ-nat-gluer f idp idp idp idp idp idp ids ids ids ids ids ids idp ids ids ids ids ids ids ids ids ids ids = idc

σ-nat : (A : Ptd i) (A' : Ptd i) (B : Ptd i) (B' : Ptd i) (f : PtdMap A A') (g : PtdMap B B') (x : ∣ A ∧ B ∣) → σ A' B' $ (∧-map A A' B B' f g $ x) == ∧-map B B' A A' g f $ (σ A B $ x)
σ-nat A A' B B' f g = σ-nat.f  module _ where

  module σ-nat =
    SmashElimId {g = λ x → σ A' B' $ (∧-map A A' B B' f g $ x)}
                {h = λ x → ∧-map B B' A A' g f $ (σ A B $ x)}
                (λ a b → idp)
                (&σ-nat-basel ∣ (B' ∧ A') ∣ (gluer (pt A')) (gluer (f $ (pt A))) (ap (λ x → proj x (f $ (pt A))) (ptf g)))
                (λ a → &σ-nat-gluel ∣ (B' ∧ A') ∣ (gluer (pt A')) (gluer (f $ a)) (ap (λ x → proj x (f $ a)) (ptf g)) (gluer (f $ (pt A))) (ap (λ x → proj x (f $ (pt A))) (ptf g)) (σ.gluel-β A' B' (pt A')) (σ.gluel-β A' B' (f $ a)) (ap-∘ (σ A' B' $_) (λ y → proj (f $ a) y) (ptf g)) (&ap∧-map-gluel (σ A' B' $_) (gluel (pt A')) (gluel (f $ a)) (ap (λ y → proj (f $ a) y) (ptf g))) (ap² (σ A' B' $_) (∧-map.gluel-β A A' B B' f g a)) (ap-∘ (σ A' B' $_) (∧-map A A' B B' f g $_) (gluel a)) (∧-map.gluer-β B B' A A' g f (pt A)) (∧-map.gluer-β B B' A A' g f a) (&apσ-gluel (∧-map B B' A A' g f $_) (gluer (pt A)) (gluer a)) (ap² (∧-map B B' A A' g f $_) (σ.gluel-β A B a)) (ap-∘ (∧-map B B' A A' g f $_) (σ A B $_) (gluel a)))
                (&σ-nat-baser ∣ (B' ∧ A') ∣ (gluer (pt A')) (gluer (f $ (pt A))) (ap (λ x → proj x (f $ (pt A))) (ptf g)))
                (λ b → &σ-nat-gluer ∣ (B' ∧ A') ∣ (gluel (pt B')) (gluel (g $ b)) (ap (λ y → proj (g $ b) y) (ptf f)) (gluer (pt A')) (gluer (f $ (pt A))) (ap (λ x → proj x (f $ (pt A))) (ptf g)) (σ.gluer-β A' B' (pt B')) (σ.gluer-β A' B' (g $ b)) (ap-∘ (σ A' B' $_) (λ x → proj x (g $ b)) (ptf f)) (&ap∧-map-gluer (σ A' B' $_) (gluer (pt B')) (gluer (g $ b)) (ap (λ x → proj x (g $ b)) (ptf f))) (ap² (σ A' B' $_) (∧-map.gluer-β A A' B B' f g b)) (ap-∘ (σ A' B' $_) (∧-map A A' B B' f g $_) (gluer b)) (ap (λ x → proj x (pt A')) (ptf g)) (ap-cst basel (ptf g)) (ap+ (λ x → gluel x) (ptf g)) (ap-cst baser (ptf f)) (ap+ (λ y → gluer y) (ptf f)) (ap+ (λ y → ap (λ x → proj x y) (ptf g)) (ptf f)) (∧-map.gluel-β B B' A A' g f (pt B)) (∧-map.gluel-β B B' A A' g f b) (&apσ-gluer (∧-map B B' A A' g f $_) (gluel (pt B)) (gluel b)) (ap² (∧-map B B' A A' g f $_) (σ.gluer-β A B b)) (ap-∘ (∧-map B B' A A' g f $_) (σ A B $_) (gluer b)))





&α-nat-proj-basel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : X} (p3 : x3 == x2) → x1 == x3
&α-nat-proj-basel X idp idp idp idp = idp

&apα-nat-proj-basel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : X} (p3 : x3 == x2) → Square (ap f (&α-nat-proj-basel X p0 p1 p2 p3)) (&α-nat-proj-basel Y (ap f p0) (ap f p1) (ap f p2) (ap f p3)) idp idp
&apα-nat-proj-basel f idp idp idp idp = ids

&α-nat-proj-basel□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux2 == ux0} {vx2 : X} {vp2 : vx2 == vx0} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x2 x0) {ux3 : X} {up3 : ux3 == ux2} {vx3 : X} {vp3 : vx3 == vx2} {x3 : ux3 == vx3} (p3 : Square up3 vp3 x3 x2) → Square (&α-nat-proj-basel X up0 up1 up2 up3) (&α-nat-proj-basel X vp0 vp1 vp2 vp3) x1 x3
&α-nat-proj-basel□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids {up3 = idp} {vp3 = idp} ids = ids

ap/α-nat-proj-basel : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x2 x == x0 x) {x3 : X → Y} (p3 : (x : X) → x3 x == x2 x) → Cube (ap+ (λ x → &α-nat-proj-basel Y (p0 x) (p1 x) (p2 x) (p3 x)) r) (&α-nat-proj-basel□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r) (ap+ p3 r)) (&hids (&α-nat-proj-basel Y (p0 y) (p1 y) (p2 y) (p3 y))) (&hids (&α-nat-proj-basel Y (p0 z) (p1 z) (p2 z) (p3 z))) (&hids (ap x1 r)) (&hids (ap x3 r))
ap/α-nat-proj-basel {Y = Y} {y = y} idp p0 p1 p2 p3 = &ap/α-nat-proj-basel-lemma Y (p0 y) (p1 y) (p2 y) (p3 y)  where
  &ap/α-nat-proj-basel-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : X} (p3 : x3 == x2) → Cube (&hids (&α-nat-proj-basel X p0 p1 p2 p3)) (&α-nat-proj-basel□ X (&hids p0) (&hids p1) (&hids p2) (&hids p3)) (&hids (&α-nat-proj-basel X p0 p1 p2 p3)) (&hids (&α-nat-proj-basel X p0 p1 p2 p3)) ids ids
  &ap/α-nat-proj-basel-lemma X idp idp idp idp = idc

&α-nat-proj-basel□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux2 == ux0} {vx2 : X} {vp2 : vx2 == vx0} {x2 : ux2 == vx2} (p2 : Square x2 x0 up2 vp2) {ux3 : X} {up3 : ux3 == ux2} {vx3 : X} {vp3 : vx3 == vx2} {x3 : ux3 == vx3} (p3 : Square x3 x2 up3 vp3) → Square x1 x3 (&α-nat-proj-basel X up0 up1 up2 up3) (&α-nat-proj-basel X vp0 vp1 vp2 vp3)
&α-nat-proj-basel□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids {up3 = idp} {vp3 = idp} ids = ids

ap+α-nat-proj-basel : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : X} (p3 : x3 == x2) → Cube (ap+ α (&α-nat-proj-basel X p0 p1 p2 p3)) (&α-nat-proj-basel□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2) (ap+ α p3)) (&hids (α x1)) (&hids (α x3)) (&apα-nat-proj-basel f p0 p1 p2 p3) (&apα-nat-proj-basel g p0 p1 p2 p3)
ap+α-nat-proj-basel α {a = a} idp idp idp idp = ap+α-nat-proj-basel-lemma (α a)  where
  ap+α-nat-proj-basel-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α-nat-proj-basel□' X (&hids p) (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α-nat-proj-basel-lemma idp = idc

&apα-nat-proj-basel-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : X} (p3 : x3 == x2) → Cube (&apα-nat-proj-basel (λ _ → y) p0 p1 p2 p3) ids (ap-cst y (&α-nat-proj-basel X p0 p1 p2 p3)) (&α-nat-proj-basel□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2) (ap-cst y p3)) ids ids
&apα-nat-proj-basel-cst y idp idp idp idp = idc

&α-nat-proj-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : x4 == x3) {x5 : X} (p5 : a == x5) {x6 : X} (p6 : x6 == x5) {x7 : X} (p7 : x7 == x5) {x8 : X} (p8 : x8 == x7) {x9 : X} (p9 : x9 == x5) {x10 : x5 == x5} (p10 : Square x10 idp idp idp) {x11 : a == x9} (p11 : Square p5 p9 x11 x10) {x12 : x5 == x5} (p12 : Square x12 idp idp idp) {x13 : x6 == x9} (p13 : Square p6 p9 x13 x12) {x14 : x6 == a} (p14 : Square x14 (&α-proj-gluel X p0 p0 x11 x13) idp idp) {x15 : x3 == a} (p15 : Square x15 (&α-proj-gluel X p0 p1 p2 p3) idp idp) {x16 : x4 == x3} (p16 : Square p4 x16 idp idp) {x17 : x4 == x6} (p17 : Square x17 (&∧-map-gluel X x14 x15 x16) idp idp) {x18 : x4 == x6} (p18 : Square x18 x17 idp idp) {x19 : x4 == x6} (p19 : Square x19 x18 idp idp) {x20 : X} (p20 : x20 == a) {x21 : x0 == x0} (p21 : Square x21 idp idp idp) {x22 : x20 == x0} (p22 : Square x22 p0 p20 x21) {x23 : X} (p23 : x23 == x9) {x24 : x20 == x23} (p24 : Square p20 p23 x24 x11) {x25 : X} (p25 : x25 == x5) {x26 : X} (p26 : x26 == x25) {x27 : x5 == x5} (p27 : Square x27 idp idp idp) {x28 : x25 == x9} (p28 : Square p25 p9 x28 x27) {x29 : x26 == x23} (p29 : Square p26 p23 x29 x28) {x30 : x5 == x5} (p30 : Square x30 idp idp idp) {x31 : x7 == x25} (p31 : Square p7 p25 x31 x30) {x32 : x8 == x26} (p32 : Square p8 p26 x32 x31) {x33 : x8 == x26} (p33 : Square x32 x33 idp idp) {x34 : x8 == x20} (p34 : Square x34 (&∧-map-pt X x24 x29 x33) idp idp) {x35 : x8 == a} (p35 : Square x35 (&∧-map-gluel X p0 x22 x34) idp idp) {x36 : X} (p36 : x36 == x2) {x37 : X} (p37 : x37 == x36) {x38 : x37 == x36} (p38 : Square p37 x38 idp idp) {x39 : x37 == x1} (p39 : Square x39 (&∧-map-pt X p2 p36 x38) idp idp) {x40 : x37 == a} (p40 : Square x40 (&∧-map-gluel X p0 p1 x39) idp idp) {x41 : x37 == x1} (p41 : Square x41 (&∧-map-gluer X p2 p36 x38) idp idp) {x42 : x37 == x1} (p42 : Square x42 x41 idp idp) {x43 : x37 == x1} (p43 : Square x43 x42 idp idp) {x44 : x37 == x1} (p44 : Square x43 x44 idp idp) {x45 : x4 == x3} (p45 : Square p4 x45 idp idp) {x46 : x4 == x1} (p46 : Square x46 (&∧-map-gluer X p2 p3 x45) idp idp) {x47 : x4 == x1} (p47 : Square x47 x46 idp idp) {x48 : x4 == x1} (p48 : Square x48 x47 idp idp) {x49 : x4 == x1} (p49 : Square x48 x49 idp idp) {x50 : x4 == x8} (p50 : Square x50 (&α-proj-gluel X x35 x40 x44 x49) idp idp) {x51 : x4 == x8} (p51 : Square x51 x50 idp idp) {x52 : x4 == x8} (p52 : Square x52 x51 idp idp) → Square idp (&α-nat-proj-basel X p5 p6 p7 p8) x19 x52
&α-nat-proj-gluel X idp idp idp idp idp idp idp idp idp idp ids ids ids ids ids ids ids ids ids ids idp ids ids idp ids idp idp ids ids ids ids ids ids ids ids ids idp idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids = ids

&apα-nat-proj-gluel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : x4 == x3) {x5 : X} (p5 : a == x5) {x6 : X} (p6 : x6 == x5) {x7 : X} (p7 : x7 == x5) {x8 : X} (p8 : x8 == x7) {x9 : X} (p9 : x9 == x5) {x10 : x5 == x5} (p10 : Square x10 idp idp idp) {x11 : a == x9} (p11 : Square p5 p9 x11 x10) {x12 : x5 == x5} (p12 : Square x12 idp idp idp) {x13 : x6 == x9} (p13 : Square p6 p9 x13 x12) {x14 : x6 == a} (p14 : Square x14 (&α-proj-gluel X p0 p0 x11 x13) idp idp) {x15 : x3 == a} (p15 : Square x15 (&α-proj-gluel X p0 p1 p2 p3) idp idp) {x16 : x4 == x3} (p16 : Square p4 x16 idp idp) {x17 : x4 == x6} (p17 : Square x17 (&∧-map-gluel X x14 x15 x16) idp idp) {x18 : x4 == x6} (p18 : Square x18 x17 idp idp) {x19 : x4 == x6} (p19 : Square x19 x18 idp idp) {x20 : X} (p20 : x20 == a) {x21 : x0 == x0} (p21 : Square x21 idp idp idp) {x22 : x20 == x0} (p22 : Square x22 p0 p20 x21) {x23 : X} (p23 : x23 == x9) {x24 : x20 == x23} (p24 : Square p20 p23 x24 x11) {x25 : X} (p25 : x25 == x5) {x26 : X} (p26 : x26 == x25) {x27 : x5 == x5} (p27 : Square x27 idp idp idp) {x28 : x25 == x9} (p28 : Square p25 p9 x28 x27) {x29 : x26 == x23} (p29 : Square p26 p23 x29 x28) {x30 : x5 == x5} (p30 : Square x30 idp idp idp) {x31 : x7 == x25} (p31 : Square p7 p25 x31 x30) {x32 : x8 == x26} (p32 : Square p8 p26 x32 x31) {x33 : x8 == x26} (p33 : Square x32 x33 idp idp) {x34 : x8 == x20} (p34 : Square x34 (&∧-map-pt X x24 x29 x33) idp idp) {x35 : x8 == a} (p35 : Square x35 (&∧-map-gluel X p0 x22 x34) idp idp) {x36 : X} (p36 : x36 == x2) {x37 : X} (p37 : x37 == x36) {x38 : x37 == x36} (p38 : Square p37 x38 idp idp) {x39 : x37 == x1} (p39 : Square x39 (&∧-map-pt X p2 p36 x38) idp idp) {x40 : x37 == a} (p40 : Square x40 (&∧-map-gluel X p0 p1 x39) idp idp) {x41 : x37 == x1} (p41 : Square x41 (&∧-map-gluer X p2 p36 x38) idp idp) {x42 : x37 == x1} (p42 : Square x42 x41 idp idp) {x43 : x37 == x1} (p43 : Square x43 x42 idp idp) {x44 : x37 == x1} (p44 : Square x43 x44 idp idp) {x45 : x4 == x3} (p45 : Square p4 x45 idp idp) {x46 : x4 == x1} (p46 : Square x46 (&∧-map-gluer X p2 p3 x45) idp idp) {x47 : x4 == x1} (p47 : Square x47 x46 idp idp) {x48 : x4 == x1} (p48 : Square x48 x47 idp idp) {x49 : x4 == x1} (p49 : Square x48 x49 idp idp) {x50 : x4 == x8} (p50 : Square x50 (&α-proj-gluel X x35 x40 x44 x49) idp idp) {x51 : x4 == x8} (p51 : Square x51 x50 idp idp) {x52 : x4 == x8} (p52 : Square x52 x51 idp idp) → Cube (ap² f (&α-nat-proj-gluel X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 p18 p19 p20 p21 p22 p23 p24 p25 p26 p27 p28 p29 p30 p31 p32 p33 p34 p35 p36 p37 p38 p39 p40 p41 p42 p43 p44 p45 p46 p47 p48 p49 p50 p51 p52)) (&α-nat-proj-gluel Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap f p4) (ap f p5) (ap f p6) (ap f p7) (ap f p8) (ap f p9) (ap² f p10) (ap² f p11) (ap² f p12) (ap² f p13) (&coh∙□ (ap² f p14) (&apα-proj-gluel f p0 p0 x11 x13)) (&coh∙□ (ap² f p15) (&apα-proj-gluel f p0 p1 p2 p3)) (ap² f p16) (&coh∙□ (ap² f p17) (&ap∧-map-gluel f x14 x15 x16)) (ap² f p18) (ap² f p19) (ap f p20) (ap² f p21) (ap² f p22) (ap f p23) (ap² f p24) (ap f p25) (ap f p26) (ap² f p27) (ap² f p28) (ap² f p29) (ap² f p30) (ap² f p31) (ap² f p32) (ap² f p33) (&coh∙□ (ap² f p34) (&ap∧-map-pt f x24 x29 x33)) (&coh∙□ (ap² f p35) (&ap∧-map-gluel f p0 x22 x34)) (ap f p36) (ap f p37) (ap² f p38) (&coh∙□ (ap² f p39) (&ap∧-map-pt f p2 p36 x38)) (&coh∙□ (ap² f p40) (&ap∧-map-gluel f p0 p1 x39)) (&coh∙□ (ap² f p41) (&ap∧-map-gluer f p2 p36 x38)) (ap² f p42) (ap² f p43) (ap² f p44) (ap² f p45) (&coh∙□ (ap² f p46) (&ap∧-map-gluer f p2 p3 x45)) (ap² f p47) (ap² f p48) (ap² f p49) (&coh∙□ (ap² f p50) (&apα-proj-gluel f x35 x40 x44 x49)) (ap² f p51) (ap² f p52)) ids (&apα-nat-proj-basel f p5 p6 p7 p8) (&hids (ap f x19)) (&hids (ap f x52))
&apα-nat-proj-gluel f idp idp idp idp idp idp idp idp idp idp ids ids ids ids ids ids ids ids ids ids idp ids ids idp ids idp idp ids ids ids ids ids ids ids ids ids idp idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids = idc

&α-nat-proj-baser : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : X} (p3 : x3 == x2) → x1 == x3
&α-nat-proj-baser X idp idp idp idp = idp

&apα-nat-proj-baser : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : X} (p3 : x3 == x2) → Square (ap f (&α-nat-proj-baser X p0 p1 p2 p3)) (&α-nat-proj-baser Y (ap f p0) (ap f p1) (ap f p2) (ap f p3)) idp idp
&apα-nat-proj-baser f idp idp idp idp = ids

&α-nat-proj-baser□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux2 == ux0} {vx2 : X} {vp2 : vx2 == vx0} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x2 x0) {ux3 : X} {up3 : ux3 == ux2} {vx3 : X} {vp3 : vx3 == vx2} {x3 : ux3 == vx3} (p3 : Square up3 vp3 x3 x2) → Square (&α-nat-proj-baser X up0 up1 up2 up3) (&α-nat-proj-baser X vp0 vp1 vp2 vp3) x1 x3
&α-nat-proj-baser□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids {up3 = idp} {vp3 = idp} ids = ids

ap/α-nat-proj-baser : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x2 x == x0 x) {x3 : X → Y} (p3 : (x : X) → x3 x == x2 x) → Cube (ap+ (λ x → &α-nat-proj-baser Y (p0 x) (p1 x) (p2 x) (p3 x)) r) (&α-nat-proj-baser□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r) (ap+ p3 r)) (&hids (&α-nat-proj-baser Y (p0 y) (p1 y) (p2 y) (p3 y))) (&hids (&α-nat-proj-baser Y (p0 z) (p1 z) (p2 z) (p3 z))) (&hids (ap x1 r)) (&hids (ap x3 r))
ap/α-nat-proj-baser {Y = Y} {y = y} idp p0 p1 p2 p3 = &ap/α-nat-proj-baser-lemma Y (p0 y) (p1 y) (p2 y) (p3 y)  where
  &ap/α-nat-proj-baser-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : X} (p3 : x3 == x2) → Cube (&hids (&α-nat-proj-baser X p0 p1 p2 p3)) (&α-nat-proj-baser□ X (&hids p0) (&hids p1) (&hids p2) (&hids p3)) (&hids (&α-nat-proj-baser X p0 p1 p2 p3)) (&hids (&α-nat-proj-baser X p0 p1 p2 p3)) ids ids
  &ap/α-nat-proj-baser-lemma X idp idp idp idp = idc

&α-nat-proj-baser□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux2 == ux0} {vx2 : X} {vp2 : vx2 == vx0} {x2 : ux2 == vx2} (p2 : Square x2 x0 up2 vp2) {ux3 : X} {up3 : ux3 == ux2} {vx3 : X} {vp3 : vx3 == vx2} {x3 : ux3 == vx3} (p3 : Square x3 x2 up3 vp3) → Square x1 x3 (&α-nat-proj-baser X up0 up1 up2 up3) (&α-nat-proj-baser X vp0 vp1 vp2 vp3)
&α-nat-proj-baser□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids {up3 = idp} {vp3 = idp} ids = ids

ap+α-nat-proj-baser : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : X} (p3 : x3 == x2) → Cube (ap+ α (&α-nat-proj-baser X p0 p1 p2 p3)) (&α-nat-proj-baser□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2) (ap+ α p3)) (&hids (α x1)) (&hids (α x3)) (&apα-nat-proj-baser f p0 p1 p2 p3) (&apα-nat-proj-baser g p0 p1 p2 p3)
ap+α-nat-proj-baser α {a = a} idp idp idp idp = ap+α-nat-proj-baser-lemma (α a)  where
  ap+α-nat-proj-baser-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α-nat-proj-baser□' X (&hids p) (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α-nat-proj-baser-lemma idp = idc

&apα-nat-proj-baser-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : X} (p3 : x3 == x2) → Cube (&apα-nat-proj-baser (λ _ → y) p0 p1 p2 p3) ids (ap-cst y (&α-nat-proj-baser X p0 p1 p2 p3)) (&α-nat-proj-baser□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2) (ap-cst y p3)) ids ids
&apα-nat-proj-baser-cst y idp idp idp idp = idc

&α-nat-proj-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) {x3 : X} (p3 : x3 == x0) {x4 : X} (p4 : x4 == x0) {x5 : X} (p5 : x5 == x4) {x6 : x3 == a} (p6 : Square x6 (&α-proj-gluer X p0 p3) idp idp) {x7 : x1 == a} (p7 : Square x7 (&α-proj-gluer X p0 p1) idp idp) {x8 : x2 == x1} (p8 : Square p2 x8 idp idp) {x9 : x2 == x3} (p9 : Square x9 (&∧-map-gluer X x6 x7 x8) idp idp) {x10 : x2 == x3} (p10 : Square x10 x9 idp idp) {x11 : x2 == x3} (p11 : Square x11 x10 idp idp) {x12 : x5 == a} (p12 : Square x12 (&∧-map-gluer X p0 p4 p5) idp idp) {x13 : x2 == a} (p13 : Square x13 (&∧-map-gluer X p0 p1 p2) idp idp) {x14 : x2 == x5} (p14 : Square x14 (&α-proj-gluer X x12 x13) idp idp) {x15 : x2 == x5} (p15 : Square x15 x14 idp idp) {x16 : x2 == x5} (p16 : Square x16 x15 idp idp) → Square idp (&α-nat-proj-baser X p0 p3 p4 p5) x11 x16
&α-nat-proj-gluer X idp idp idp idp idp idp ids ids ids ids ids ids ids ids ids ids ids = ids

&apα-nat-proj-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) {x3 : X} (p3 : x3 == x0) {x4 : X} (p4 : x4 == x0) {x5 : X} (p5 : x5 == x4) {x6 : x3 == a} (p6 : Square x6 (&α-proj-gluer X p0 p3) idp idp) {x7 : x1 == a} (p7 : Square x7 (&α-proj-gluer X p0 p1) idp idp) {x8 : x2 == x1} (p8 : Square p2 x8 idp idp) {x9 : x2 == x3} (p9 : Square x9 (&∧-map-gluer X x6 x7 x8) idp idp) {x10 : x2 == x3} (p10 : Square x10 x9 idp idp) {x11 : x2 == x3} (p11 : Square x11 x10 idp idp) {x12 : x5 == a} (p12 : Square x12 (&∧-map-gluer X p0 p4 p5) idp idp) {x13 : x2 == a} (p13 : Square x13 (&∧-map-gluer X p0 p1 p2) idp idp) {x14 : x2 == x5} (p14 : Square x14 (&α-proj-gluer X x12 x13) idp idp) {x15 : x2 == x5} (p15 : Square x15 x14 idp idp) {x16 : x2 == x5} (p16 : Square x16 x15 idp idp) → Cube (ap² f (&α-nat-proj-gluer X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16)) (&α-nat-proj-gluer Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap f p4) (ap f p5) (&coh∙□ (ap² f p6) (&apα-proj-gluer f p0 p3)) (&coh∙□ (ap² f p7) (&apα-proj-gluer f p0 p1)) (ap² f p8) (&coh∙□ (ap² f p9) (&ap∧-map-gluer f x6 x7 x8)) (ap² f p10) (ap² f p11) (&coh∙□ (ap² f p12) (&ap∧-map-gluer f p0 p4 p5)) (&coh∙□ (ap² f p13) (&ap∧-map-gluer f p0 p1 p2)) (&coh∙□ (ap² f p14) (&apα-proj-gluer f x12 x13)) (ap² f p15) (ap² f p16)) ids (&apα-nat-proj-baser f p0 p3 p4 p5) (&hids (ap f x11)) (&hids (ap f x16))
&apα-nat-proj-gluer f idp idp idp idp idp idp ids ids ids ids ids ids ids ids ids ids ids = idc

α-nat-proj : (A : Ptd i) (A' : Ptd i) (B : Ptd i) (B' : Ptd i) (C : Ptd i) (C' : Ptd i) (f : PtdMap A A') (g : PtdMap B B') (h : PtdMap C C') (c : ∣ C ∣) (x : ∣ A ∧ B ∣) → α-proj A' B' C' (h $ c) $ (∧-map A A' B B' f g $ x) == ∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $ (α-proj A B C c $ x)
α-nat-proj A A' B B' C C' f g h c = α-nat-proj.f  module _ where

  module α-nat-proj =
    SmashElimId {g = λ x → α-proj A' B' C' (h $ c) $ (∧-map A A' B B' f g $ x)}
                {h = λ x → ∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $ (α-proj A B C c $ x)}
                (λ a b → idp)
                (&α-nat-proj-basel ∣ (A' ∧ (B' ∧ C')) ∣ (gluer (proj (pt B') (pt C'))) (gluer (proj (pt B') (h $ c))) (gluer (proj (g $ (pt B)) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ (pt C)))) (ptf f)))
                (λ a → &α-nat-proj-gluel ∣ (A' ∧ (B' ∧ C')) ∣ (gluel (pt A')) (gluel (f $ a)) (ap (λ y → proj (f $ a) y) (gluer (pt C'))) (ap (λ y → proj (f $ a) y) (gluer (h $ c))) (ap (λ x → proj (f $ a) (proj x (h $ c))) (ptf g)) (gluer (proj (pt B') (pt C'))) (gluer (proj (pt B') (h $ c))) (gluer (proj (g $ (pt B)) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ (pt C)))) (ptf f)) (gluer baser) (ap-cst baser (gluer (pt C'))) (ap+ (λ y → gluer y) (gluer (pt C'))) (ap-cst baser (gluer (h $ c))) (ap+ (λ y → gluer y) (gluer (h $ c))) (α-proj.gluel-β A' B' C' (h $ c) (pt A')) (α-proj.gluel-β A' B' C' (h $ c) (f $ a)) (ap-∘ (α-proj A' B' C' (h $ c) $_) (λ y → proj (f $ a) y) (ptf g)) (&ap∧-map-gluel (α-proj A' B' C' (h $ c) $_) (gluel (pt A')) (gluel (f $ a)) (ap (λ y → proj (f $ a) y) (ptf g))) (ap² (α-proj A' B' C' (h $ c) $_) (∧-map.gluel-β A A' B B' f g a)) (ap-∘ (α-proj A' B' C' (h $ c) $_) (∧-map A A' B B' f g $_) (gluel a)) (ap (λ x → proj x (proj (pt B') (pt C'))) (ptf f)) (ap-cst basel (ptf f)) (ap+ (λ x → gluel x) (ptf f)) (ap (λ x → proj x baser) (ptf f)) (ap+ (λ z → ap (λ x → proj x z) (ptf f)) (gluer (pt C'))) (gluer (proj (pt B') (h $ (pt C)))) (ap (λ x → proj x (proj (pt B') (h $ (pt C)))) (ptf f)) (ap-cst baser (gluer (h $ (pt C)))) (ap+ (λ z → gluer z) (gluer (h $ (pt C)))) (ap+ (λ z → ap (λ x → proj x z) (ptf f)) (gluer (h $ (pt C)))) (ap-cst baser (ptf g)) (ap+ (λ x → gluer (proj x (h $ (pt C)))) (ptf g)) (ap+ (λ x → ap (λ x1 → proj x1 (proj x (h $ (pt C)))) (ptf f)) (ptf g)) (ap-∘ (λ z → proj (f $ (pt A)) z) (λ x → proj x (h $ (pt C))) (ptf g)) (&ap∧-map-pt (λ y → proj (f $ (pt A)) y) (gluer (pt C')) (gluer (h $ (pt C))) (ap (λ x → proj x (h $ (pt C))) (ptf g))) (∧-map.gluel-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) (pt A)) (ap (λ y → proj (f $ a) y) (gluer (h $ (pt C)))) (ap (λ x → proj (f $ a) (proj x (h $ (pt C)))) (ptf g)) (ap-∘ (λ z → proj (f $ a) z) (λ x → proj x (h $ (pt C))) (ptf g)) (&ap∧-map-pt (λ y → proj (f $ a) y) (gluer (pt C')) (gluer (h $ (pt C))) (ap (λ x → proj x (h $ (pt C))) (ptf g))) (∧-map.gluel-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) a) (&ap∧-map-gluer (λ x → proj (f $ a) x) (gluer (pt C')) (gluer (h $ (pt C))) (ap (λ x → proj x (h $ (pt C))) (ptf g))) (ap² (λ x → proj (f $ a) x) (∧-map.gluer-β B B' C C' g h (pt C))) (ap-∘ (λ x → proj (f $ a) x) (∧-map B B' C C' g h $_) (gluer (pt C))) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (λ y → proj a y) (gluer (pt C))) (ap-∘ (λ z → proj (f $ a) z) (λ x → proj x (h $ c)) (ptf g)) (&ap∧-map-gluer (λ x → proj (f $ a) x) (gluer (pt C')) (gluer (h $ c)) (ap (λ x → proj x (h $ c)) (ptf g))) (ap² (λ x → proj (f $ a) x) (∧-map.gluer-β B B' C C' g h c)) (ap-∘ (λ x → proj (f $ a) x) (∧-map B B' C C' g h $_) (gluer c)) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (λ y → proj a y) (gluer c)) (&apα-proj-gluel (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluer (pt C))) (ap (λ y → proj a y) (gluer c))) (ap² (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α-proj.gluel-β A B C c a)) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α-proj A B C c $_) (gluel a)))
                (&α-nat-proj-baser ∣ (A' ∧ (B' ∧ C')) ∣ (gluer (proj (pt B') (pt C'))) (gluer (proj (pt B') (h $ c))) (gluer (proj (g $ (pt B)) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ (pt C)))) (ptf f)))
                (λ b → &α-nat-proj-gluer ∣ (A' ∧ (B' ∧ C')) ∣ (gluer (proj (pt B') (pt C'))) (gluer (proj (g $ b) (h $ c))) (ap (λ x → proj x (proj (g $ b) (h $ c))) (ptf f)) (gluer (proj (pt B') (h $ c))) (gluer (proj (g $ (pt B)) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ (pt C)))) (ptf f)) (α-proj.gluer-β A' B' C' (h $ c) (pt B')) (α-proj.gluer-β A' B' C' (h $ c) (g $ b)) (ap-∘ (α-proj A' B' C' (h $ c) $_) (λ x → proj x (g $ b)) (ptf f)) (&ap∧-map-gluer (α-proj A' B' C' (h $ c) $_) (gluer (pt B')) (gluer (g $ b)) (ap (λ x → proj x (g $ b)) (ptf f))) (ap² (α-proj A' B' C' (h $ c) $_) (∧-map.gluer-β A A' B B' f g b)) (ap-∘ (α-proj A' B' C' (h $ c) $_) (∧-map A A' B B' f g $_) (gluer b)) (∧-map.gluer-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) (proj (pt B) (pt C))) (∧-map.gluer-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) (proj b c)) (&apα-proj-gluer (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (gluer (proj (pt B) (pt C))) (gluer (proj b c))) (ap² (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α-proj.gluer-β A B C c b)) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α-proj A B C c $_) (gluer b)))


&α-nat-basel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → a == x2
&α-nat-basel X idp idp idp = idp

&apα-nat-basel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Square (ap f (&α-nat-basel X p0 p1 p2)) (&α-nat-basel Y (ap f p0) (ap f p1) (ap f p2)) idp idp
&apα-nat-basel f idp idp idp = ids

&α-nat-basel□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux2 == ux1} {vx2 : X} {vp2 : vx2 == vx1} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x2 x1) → Square (&α-nat-basel X up0 up1 up2) (&α-nat-basel X vp0 vp1 vp2) a x2
&α-nat-basel□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap/α-nat-basel : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x2 x == x1 x) → Cube (ap+ (λ x → &α-nat-basel Y (p0 x) (p1 x) (p2 x)) r) (&α-nat-basel□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r)) (&hids (&α-nat-basel Y (p0 y) (p1 y) (p2 y))) (&hids (&α-nat-basel Y (p0 z) (p1 z) (p2 z))) (&hids (ap a r)) (&hids (ap x2 r))
ap/α-nat-basel {Y = Y} {y = y} idp p0 p1 p2 = &ap/α-nat-basel-lemma Y (p0 y) (p1 y) (p2 y)  where
  &ap/α-nat-basel-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (&hids (&α-nat-basel X p0 p1 p2)) (&α-nat-basel□ X (&hids p0) (&hids p1) (&hids p2)) (&hids (&α-nat-basel X p0 p1 p2)) (&hids (&α-nat-basel X p0 p1 p2)) ids ids
  &ap/α-nat-basel-lemma X idp idp idp = idc

&α-nat-basel□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux2 == ux1} {vx2 : X} {vp2 : vx2 == vx1} {x2 : ux2 == vx2} (p2 : Square x2 x1 up2 vp2) → Square a x2 (&α-nat-basel X up0 up1 up2) (&α-nat-basel X vp0 vp1 vp2)
&α-nat-basel□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap+α-nat-basel : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (ap+ α (&α-nat-basel X p0 p1 p2)) (&α-nat-basel□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2)) (&hids (α a)) (&hids (α x2)) (&apα-nat-basel f p0 p1 p2) (&apα-nat-basel g p0 p1 p2)
ap+α-nat-basel α {a = a} idp idp idp = ap+α-nat-basel-lemma (α a)  where
  ap+α-nat-basel-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α-nat-basel□' X (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α-nat-basel-lemma idp = idc

&apα-nat-basel-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (&apα-nat-basel (λ _ → y) p0 p1 p2) ids (ap-cst y (&α-nat-basel X p0 p1 p2)) (&α-nat-basel□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2)) ids ids
&apα-nat-basel-cst y idp idp idp = idc

&α-nat-gluel-proj : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : x4 == x3) {x5 : X} (p5 : a == x5) {x6 : X} (p6 : x6 == x5) {x7 : X} (p7 : x7 == x6) {x8 : X} (p8 : x8 == x5) {x9 : x5 == x5} (p9 : Square x9 idp idp idp) {x10 : a == x8} (p10 : Square p5 p8 x10 x9) {x11 : a == a} (p11 : Square x11 (&α-gluel-proj X p0 p0 x10 x10) idp idp) {x12 : x3 == a} (p12 : Square x12 (&α-gluel-proj X p0 p1 p2 p3) idp idp) {x13 : x4 == x3} (p13 : Square p4 x13 idp idp) {x14 : x4 == a} (p14 : Square x14 (&∧-map-gluel X x11 x12 x13) idp idp) {x15 : x4 == a} (p15 : Square x15 x14 idp idp) {x16 : x4 == a} (p16 : Square x16 x15 idp idp) {x17 : X} (p17 : x17 == a) {x18 : x0 == x0} (p18 : Square x18 idp idp idp) {x19 : x17 == x0} (p19 : Square x19 p0 p17 x18) {x20 : X} (p20 : x20 == x5) {x21 : X} (p21 : x21 == x20) {x22 : x5 == x5} (p22 : Square x22 idp idp idp) {x23 : a == x20} (p23 : Square p5 p20 x23 x22) {x24 : x17 == x21} (p24 : Square p17 p21 x24 x23) {x25 : X} (p25 : x25 == x5) {x26 : X} (p26 : x26 == x25) {x27 : x5 == x5} (p27 : Square x27 idp idp idp) {x28 : x25 == x20} (p28 : Square p25 p20 x28 x27) {x29 : x26 == x21} (p29 : Square p26 p21 x29 x28) {x30 : x5 == x5} (p30 : Square x30 idp idp idp) {x31 : x6 == x25} (p31 : Square p6 p25 x31 x30) {x32 : x7 == x26} (p32 : Square p7 p26 x32 x31) {x33 : x7 == x26} (p33 : Square x32 x33 idp idp) {x34 : x7 == x17} (p34 : Square x34 (&∧-map-pt X x24 x29 x33) idp idp) {x35 : x7 == a} (p35 : Square x35 (&∧-map-gluel X p0 x19 x34) idp idp) {x36 : X} (p36 : x1 == x36) {x37 : X} (p37 : x37 == x36) {x38 : X} (p38 : x38 == x37) {x39 : x38 == x37} (p39 : Square p38 x39 idp idp) {x40 : x38 == x1} (p40 : Square x40 (&∧-map-pt X p36 p37 x39) idp idp) {x41 : x38 == a} (p41 : Square x41 (&∧-map-gluel X p0 p1 x40) idp idp) {x42 : X} (p42 : x42 == x1) {x43 : x2 == x2} (p43 : Square x43 idp idp idp) {x44 : x42 == x2} (p44 : Square x44 p2 p42 x43) {x45 : x36 == x36} (p45 : Square x45 idp idp idp) {x46 : x37 == x1} (p46 : Square p37 p36 x46 x45) {x47 : x38 == x42} (p47 : Square p38 p42 x47 x46) {x48 : x38 == x42} (p48 : Square x47 x48 idp idp) {x49 : x38 == x1} (p49 : Square x49 (&∧-map-gluel X p2 x44 x48) idp idp) {x50 : x38 == x1} (p50 : Square x50 x49 idp idp) {x51 : x38 == x1} (p51 : Square x51 x50 idp idp) {x52 : x38 == x1} (p52 : Square x51 x52 idp idp) {x53 : x4 == x3} (p53 : Square p4 x53 idp idp) {x54 : x4 == x1} (p54 : Square x54 (&∧-map-gluel X p2 p3 x53) idp idp) {x55 : x4 == x1} (p55 : Square x55 x54 idp idp) {x56 : x4 == x1} (p56 : Square x56 x55 idp idp) {x57 : x4 == x1} (p57 : Square x56 x57 idp idp) {x58 : x4 == x7} (p58 : Square x58 (&α-gluel-proj X x35 x41 x52 x57) idp idp) {x59 : x4 == x7} (p59 : Square x59 x58 idp idp) {x60 : x4 == x7} (p60 : Square x60 x59 idp idp) → Square idp (&α-nat-basel X p5 p6 p7) x16 x60
&α-nat-gluel-proj X idp idp idp idp idp idp idp idp idp ids ids ids ids ids ids ids ids idp ids ids idp idp ids ids ids idp idp ids ids ids ids ids ids ids ids ids idp idp idp ids ids ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids = ids

&apα-nat-gluel-proj : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : x4 == x3) {x5 : X} (p5 : a == x5) {x6 : X} (p6 : x6 == x5) {x7 : X} (p7 : x7 == x6) {x8 : X} (p8 : x8 == x5) {x9 : x5 == x5} (p9 : Square x9 idp idp idp) {x10 : a == x8} (p10 : Square p5 p8 x10 x9) {x11 : a == a} (p11 : Square x11 (&α-gluel-proj X p0 p0 x10 x10) idp idp) {x12 : x3 == a} (p12 : Square x12 (&α-gluel-proj X p0 p1 p2 p3) idp idp) {x13 : x4 == x3} (p13 : Square p4 x13 idp idp) {x14 : x4 == a} (p14 : Square x14 (&∧-map-gluel X x11 x12 x13) idp idp) {x15 : x4 == a} (p15 : Square x15 x14 idp idp) {x16 : x4 == a} (p16 : Square x16 x15 idp idp) {x17 : X} (p17 : x17 == a) {x18 : x0 == x0} (p18 : Square x18 idp idp idp) {x19 : x17 == x0} (p19 : Square x19 p0 p17 x18) {x20 : X} (p20 : x20 == x5) {x21 : X} (p21 : x21 == x20) {x22 : x5 == x5} (p22 : Square x22 idp idp idp) {x23 : a == x20} (p23 : Square p5 p20 x23 x22) {x24 : x17 == x21} (p24 : Square p17 p21 x24 x23) {x25 : X} (p25 : x25 == x5) {x26 : X} (p26 : x26 == x25) {x27 : x5 == x5} (p27 : Square x27 idp idp idp) {x28 : x25 == x20} (p28 : Square p25 p20 x28 x27) {x29 : x26 == x21} (p29 : Square p26 p21 x29 x28) {x30 : x5 == x5} (p30 : Square x30 idp idp idp) {x31 : x6 == x25} (p31 : Square p6 p25 x31 x30) {x32 : x7 == x26} (p32 : Square p7 p26 x32 x31) {x33 : x7 == x26} (p33 : Square x32 x33 idp idp) {x34 : x7 == x17} (p34 : Square x34 (&∧-map-pt X x24 x29 x33) idp idp) {x35 : x7 == a} (p35 : Square x35 (&∧-map-gluel X p0 x19 x34) idp idp) {x36 : X} (p36 : x1 == x36) {x37 : X} (p37 : x37 == x36) {x38 : X} (p38 : x38 == x37) {x39 : x38 == x37} (p39 : Square p38 x39 idp idp) {x40 : x38 == x1} (p40 : Square x40 (&∧-map-pt X p36 p37 x39) idp idp) {x41 : x38 == a} (p41 : Square x41 (&∧-map-gluel X p0 p1 x40) idp idp) {x42 : X} (p42 : x42 == x1) {x43 : x2 == x2} (p43 : Square x43 idp idp idp) {x44 : x42 == x2} (p44 : Square x44 p2 p42 x43) {x45 : x36 == x36} (p45 : Square x45 idp idp idp) {x46 : x37 == x1} (p46 : Square p37 p36 x46 x45) {x47 : x38 == x42} (p47 : Square p38 p42 x47 x46) {x48 : x38 == x42} (p48 : Square x47 x48 idp idp) {x49 : x38 == x1} (p49 : Square x49 (&∧-map-gluel X p2 x44 x48) idp idp) {x50 : x38 == x1} (p50 : Square x50 x49 idp idp) {x51 : x38 == x1} (p51 : Square x51 x50 idp idp) {x52 : x38 == x1} (p52 : Square x51 x52 idp idp) {x53 : x4 == x3} (p53 : Square p4 x53 idp idp) {x54 : x4 == x1} (p54 : Square x54 (&∧-map-gluel X p2 p3 x53) idp idp) {x55 : x4 == x1} (p55 : Square x55 x54 idp idp) {x56 : x4 == x1} (p56 : Square x56 x55 idp idp) {x57 : x4 == x1} (p57 : Square x56 x57 idp idp) {x58 : x4 == x7} (p58 : Square x58 (&α-gluel-proj X x35 x41 x52 x57) idp idp) {x59 : x4 == x7} (p59 : Square x59 x58 idp idp) {x60 : x4 == x7} (p60 : Square x60 x59 idp idp) → Cube (ap² f (&α-nat-gluel-proj X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 p18 p19 p20 p21 p22 p23 p24 p25 p26 p27 p28 p29 p30 p31 p32 p33 p34 p35 p36 p37 p38 p39 p40 p41 p42 p43 p44 p45 p46 p47 p48 p49 p50 p51 p52 p53 p54 p55 p56 p57 p58 p59 p60)) (&α-nat-gluel-proj Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap f p4) (ap f p5) (ap f p6) (ap f p7) (ap f p8) (ap² f p9) (ap² f p10) (&coh∙□ (ap² f p11) (&apα-gluel-proj f p0 p0 x10 x10)) (&coh∙□ (ap² f p12) (&apα-gluel-proj f p0 p1 p2 p3)) (ap² f p13) (&coh∙□ (ap² f p14) (&ap∧-map-gluel f x11 x12 x13)) (ap² f p15) (ap² f p16) (ap f p17) (ap² f p18) (ap² f p19) (ap f p20) (ap f p21) (ap² f p22) (ap² f p23) (ap² f p24) (ap f p25) (ap f p26) (ap² f p27) (ap² f p28) (ap² f p29) (ap² f p30) (ap² f p31) (ap² f p32) (ap² f p33) (&coh∙□ (ap² f p34) (&ap∧-map-pt f x24 x29 x33)) (&coh∙□ (ap² f p35) (&ap∧-map-gluel f p0 x19 x34)) (ap f p36) (ap f p37) (ap f p38) (ap² f p39) (&coh∙□ (ap² f p40) (&ap∧-map-pt f p36 p37 x39)) (&coh∙□ (ap² f p41) (&ap∧-map-gluel f p0 p1 x40)) (ap f p42) (ap² f p43) (ap² f p44) (ap² f p45) (ap² f p46) (ap² f p47) (ap² f p48) (&coh∙□ (ap² f p49) (&ap∧-map-gluel f p2 x44 x48)) (ap² f p50) (ap² f p51) (ap² f p52) (ap² f p53) (&coh∙□ (ap² f p54) (&ap∧-map-gluel f p2 p3 x53)) (ap² f p55) (ap² f p56) (ap² f p57) (&coh∙□ (ap² f p58) (&apα-gluel-proj f x35 x41 x52 x57)) (ap² f p59) (ap² f p60)) ids (&apα-nat-basel f p5 p6 p7) (&hids (ap f x16)) (&hids (ap f x60))
&apα-nat-gluel-proj f idp idp idp idp idp idp idp idp idp ids ids ids ids ids ids ids ids idp ids ids idp idp ids ids ids idp idp ids ids ids ids ids ids ids ids ids idp idp idp ids ids ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids = idc



&α-nat-gluel-basel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : a == x4) {x5 : X} (p5 : x5 == x0) {x6 : x0 == x0} (p6 : Square x6 idp idp idp) {x7 : a == x5} (p7 : Square p0 p5 x7 x6) {x8 : a == a} (p8 : Square x8 (&α-gluel-proj X p4 p4 x7 x7) idp idp) {x9 : x0 == x0} (p9 : Square x9 idp idp idp) {x10 : x1 == a} (p10 : Square p1 p0 x10 x9) {x11 : x1 == a} (p11 : Square x10 x11 idp idp) {x12 : x1 == a} (p12 : Square x12 (&∧-map-gluel X x8 x8 x11) idp idp) {x13 : x1 == a} (p13 : Square x13 x12 idp idp) {x14 : x1 == a} (p14 : Square x14 x13 idp idp) {x15 : x3 == x3} (p15 : Square x15 idp idp idp) {x16 : x3 == x3} (p16 : Square x16 x15 idp idp) → Square (&α-nat-proj-basel X p0 p1 p2 p3) (&α-nat-basel X p0 p2 p3) x14 x16
&α-nat-gluel-basel X idp idp idp idp idp idp ids ids ids ids ids ids ids ids ids ids ids = ids

&apα-nat-gluel-basel : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : a == x4) {x5 : X} (p5 : x5 == x0) {x6 : x0 == x0} (p6 : Square x6 idp idp idp) {x7 : a == x5} (p7 : Square p0 p5 x7 x6) {x8 : a == a} (p8 : Square x8 (&α-gluel-proj X p4 p4 x7 x7) idp idp) {x9 : x0 == x0} (p9 : Square x9 idp idp idp) {x10 : x1 == a} (p10 : Square p1 p0 x10 x9) {x11 : x1 == a} (p11 : Square x10 x11 idp idp) {x12 : x1 == a} (p12 : Square x12 (&∧-map-gluel X x8 x8 x11) idp idp) {x13 : x1 == a} (p13 : Square x13 x12 idp idp) {x14 : x1 == a} (p14 : Square x14 x13 idp idp) {x15 : x3 == x3} (p15 : Square x15 idp idp idp) {x16 : x3 == x3} (p16 : Square x16 x15 idp idp) → Cube (ap² f (&α-nat-gluel-basel X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16)) (&α-nat-gluel-basel Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap f p4) (ap f p5) (ap² f p6) (ap² f p7) (&coh∙□ (ap² f p8) (&apα-gluel-proj f p4 p4 x7 x7)) (ap² f p9) (ap² f p10) (ap² f p11) (&coh∙□ (ap² f p12) (&ap∧-map-gluel f x8 x8 x11)) (ap² f p13) (ap² f p14) (ap² f p15) (ap² f p16)) (&apα-nat-proj-basel f p0 p1 p2 p3) (&apα-nat-basel f p0 p2 p3) (&hids (ap f x14)) (&hids (ap f x16))
&apα-nat-gluel-basel f idp idp idp idp idp idp ids ids ids ids ids ids ids ids ids ids ids = idc

&α-nat-gluel-gluel : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x1 == x2) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : x4 == x3) {x5 : X} (p5 : a == x5) {x6 : X} (p6 : x6 == x5) {x7 : X} (p7 : x7 == x6) {x8 : X} (p8 : x8 == x5) {x9 : x5 == x5} (p9 : Square x9 idp idp idp) {x10 : a == x8} (p10 : Square p5 p8 x10 x9) {x11 : a == a} (p11 : Square x11 (&α-gluel-proj X p0 p0 x10 x10) idp idp) {x12 : X} (p12 : x12 == x1) {x13 : X} (p13 : x1 == x13) {x14 : x13 == x13} (p14 : Square x14 idp idp idp) {x15 : x12 == x13} (p15 : Square x15 p13 p12 x14) {x16 : x12 == a} (p16 : Square x16 (&α-gluel-proj X p0 p1 p13 x15) idp idp) {x17 : x2 == x2} (p17 : Square x17 idp idp idp) {x18 : x3 == x1} (p18 : Square p3 p2 x18 x17) {x19 : x4 == x12} (p19 : Square p4 p12 x19 x18) {x20 : x4 == x12} (p20 : Square x19 x20 idp idp) {x21 : x4 == a} (p21 : Square x21 (&∧-map-gluel X x11 x16 x20) idp idp) {x22 : x4 == a} (p22 : Square x22 x21 idp idp) {x23 : x4 == a} (p23 : Square x23 x22 idp idp) {x24 : X} (p24 : x24 == a) {x25 : x0 == x0} (p25 : Square x25 idp idp idp) {x26 : x24 == x0} (p26 : Square x26 p0 p24 x25) {x27 : X} (p27 : x27 == x5) {x28 : X} (p28 : x28 == x27) {x29 : x5 == x5} (p29 : Square x29 idp idp idp) {x30 : a == x27} (p30 : Square p5 p27 x30 x29) {x31 : x24 == x28} (p31 : Square p24 p28 x31 x30) {x32 : X} (p32 : x32 == x5) {x33 : X} (p33 : x33 == x32) {x34 : x5 == x5} (p34 : Square x34 idp idp idp) {x35 : x32 == x27} (p35 : Square p32 p27 x35 x34) {x36 : x33 == x28} (p36 : Square p33 p28 x36 x35) {x37 : x5 == x5} (p37 : Square x37 idp idp idp) {x38 : x6 == x32} (p38 : Square p6 p32 x38 x37) {x39 : x7 == x33} (p39 : Square p7 p33 x39 x38) {x40 : x7 == x33} (p40 : Square x39 x40 idp idp) {x41 : x7 == x24} (p41 : Square x41 (&∧-map-pt X x31 x36 x40) idp idp) {x42 : x7 == a} (p42 : Square x42 (&∧-map-gluel X p0 x26 x41) idp idp) {x43 : x4 == x3} (p43 : Square p4 x43 idp idp) {x44 : x4 == x1} (p44 : Square x44 (&∧-map-pt X p2 p3 x43) idp idp) {x45 : x4 == a} (p45 : Square x45 (&∧-map-gluel X p0 p1 x44) idp idp) {x46 : x4 == x12} (p46 : Square x19 x46 idp idp) {x47 : x4 == x1} (p47 : Square x47 (&∧-map-gluel X p13 x15 x46) idp idp) {x48 : x4 == x1} (p48 : Square x48 x47 idp idp) {x49 : x4 == x1} (p49 : Square x49 x48 idp idp) {x50 : x4 == x1} (p50 : Square x49 x50 idp idp) {x51 : x4 == x7} (p51 : Square x51 (&α-gluel-proj X x42 x45 x50 x50) idp idp) {x52 : x4 == x7} (p52 : Square x52 x51 idp idp) {x53 : x4 == x7} (p53 : Square x53 x52 idp idp) {x54 : x5 == x5} (p54 : Square x54 idp idp idp) {x55 : x32 == a} (p55 : Square p32 p5 x55 x54) {x56 : x32 == a} (p56 : Square x55 x56 idp idp) {x57 : x32 == a} (p57 : Square x57 (&∧-map-gluel X x11 x11 x56) idp idp) {x58 : x32 == a} (p58 : Square x58 x57 idp idp) {x59 : x32 == a} (p59 : Square x59 x58 idp idp) {x60 : x7 == x7} (p60 : Square x60 idp idp idp) {x61 : x7 == x7} (p61 : Square x61 x60 idp idp) {x62 : x32 == a} (p62 : Square x62 (&α-proj-gluel X p0 p0 x30 x35) idp idp) {x63 : x3 == a} (p63 : Square x63 (&α-proj-gluel X p0 p1 p2 p3) idp idp) {x64 : x4 == x3} (p64 : Square p4 x64 idp idp) {x65 : x4 == x32} (p65 : Square x65 (&∧-map-gluel X x62 x63 x64) idp idp) {x66 : x4 == x32} (p66 : Square x66 x65 idp idp) {x67 : x4 == x32} (p67 : Square x67 x66 idp idp) {x68 : x4 == x1} (p68 : Square x68 (&∧-map-gluer X p2 p3 x43) idp idp) {x69 : x4 == x1} (p69 : Square x69 x68 idp idp) {x70 : x4 == x1} (p70 : Square x70 x69 idp idp) {x71 : x4 == x1} (p71 : Square x70 x71 idp idp) {x72 : x4 == x7} (p72 : Square x72 (&α-proj-gluel X x42 x45 x71 x71) idp idp) {x73 : x4 == x7} (p73 : Square x73 x72 idp idp) {x74 : x4 == x7} (p74 : Square x74 x73 idp idp) {x75 : Square idp (&α-nat-proj-basel X p5 p32 p6 p7) x67 x74} (p75 : Cube x75 (&α-nat-proj-gluel X p0 p1 p2 p3 p4 p5 p32 p6 p7 p27 p29 p30 p34 p35 p62 p63 p64 p65 p66 p67 p24 p25 p26 p28 p31 p32 p33 p34 p35 p36 p37 p38 p39 p40 p41 p42 p3 p4 p43 p44 p45 p68 p69 p70 p71 p43 p68 p69 p70 p71 p72 p73 p74) ids (&hids (&α-nat-proj-basel X p5 p32 p6 p7)) (&hids x67) (&hids x74)) {x76 : a == a} (p76 : Square x76 idp idp idp) {x77 : x7 == x7} (p77 : Square x77 idp idp idp) {x78 : Square (&α-nat-basel X p5 p6 p7) (&α-nat-basel X p5 p6 p7) x76 x77} (p78 : Cube x78 (&hids (&α-nat-basel X p5 p6 p7)) (&hids (&α-nat-basel X p5 p6 p7)) (&hids (&α-nat-basel X p5 p6 p7)) p76 p77) {x79 : Square x11 x11 x76 x76} (p79 : Cube x79 (&hids x11) (&hids x11) (&hids x11) p76 p76) {x80 : a == a} (p80 : Square x80 (&α-proj-gluel X p0 p0 x30 x30) idp idp) {x81 : x1 == a} (p81 : Square x81 (&α-proj-gluel X p0 p1 p2 p2) idp idp) {x82 : x12 == x1} (p82 : Square p12 x82 idp idp) {x83 : x12 == a} (p83 : Square x83 (&∧-map-gluel X x80 x81 x82) idp idp) {x84 : x12 == a} (p84 : Square x84 x83 idp idp) {x85 : x12 == a} (p85 : Square x85 x84 idp idp) {x86 : a == a} (p86 : Square x86 idp idp idp) {x87 : a == a} (p87 : Square x87 idp idp idp) {x88 : a == a} (p88 : Square x88 idp idp idp) {x89 : a == a} (p89 : Square x89 idp idp idp) {x90 : a == a} (p90 : Square x90 idp idp idp) {x91 : Square (&α-gluel-proj X p0 p0 x10 x10) idp x80 x88} (p91 : Cube x91 (&α-gluel-gluel X p0 p0 x10 x30 p80 p88) (&hids (&α-gluel-proj X p0 p0 x10 x10)) ids (&hids x80) (&hids x88)) {x92 : Square (&α-gluel-proj X p0 p1 p13 p13) idp x81 x89} (p92 : Cube x92 (&α-gluel-gluel X p0 p1 p13 p2 p81 p89) (&hids (&α-gluel-proj X p0 p1 p13 p13)) ids (&hids x81) (&hids x89)) {x93 : a == a} (p93 : Square x93 idp idp idp) {x94 : x0 == x0} (p94 : Square x94 idp idp idp) {x95 : Square p0 p0 x93 x94} (p95 : Cube x95 (&hids p0) (&hids p0) (&hids p0) p93 p94) {x96 : x1 == x1} (p96 : Square x96 idp idp idp) {x97 : Square p1 p1 x96 x94} (p97 : Cube x97 (&hids p1) (&hids p1) (&hids p1) p96 p94) {x98 : Square p13 p13 x96 x14} (p98 : Cube x98 (&hids p13) (&hids p13) (&hids p13) p96 p14) {x99 : Square (&α-gluel-proj X p0 p1 p13 x15) (&α-gluel-proj X p0 p1 p13 p13) p12 x93} (p99 : Cube x99 (&α-gluel-proj□ X x95 x97 x98 p15) (&hids (&α-gluel-proj X p0 p1 p13 x15)) (&hids (&α-gluel-proj X p0 p1 p13 p13)) (&hids p12) (&hids x93)) {x100 : Square x93 x90 idp idp} (p100 : Cube x100 ids p93 p90 ids ids) {x101 : Square (&α-gluel-proj X p0 p1 p13 x15) (&α-gluel-proj X p0 p1 p13 p13) x82 x90} (p101 : Cube x99 x101 (&hids (&α-gluel-proj X p0 p1 p13 x15)) (&hids (&α-gluel-proj X p0 p1 p13 p13)) p82 x100) {x102 : Square x87 (&∧-map-gluel X x88 x89 x90) idp idp} (p102 : Cube x102 ids p87 (&∧-map-gluel□ X p88 p89 p90) ids ids) {x103 : Square (&α-gluel-proj X p0 p1 p13 x15) (&α-gluel-proj X p0 p0 x10 x10) x83 x87} (p103 : Cube x103 (&∧-map-gluel□' X x91 x92 x101) (&hids (&α-gluel-proj X p0 p1 p13 x15)) (&hids (&α-gluel-proj X p0 p0 x10 x10)) p83 x102) {x104 : Square x86 x87 idp idp} (p104 : Cube x104 ids p86 p87 ids ids) {x105 : Square (&α-gluel-proj X p0 p1 p13 x15) (&α-gluel-proj X p0 p0 x10 x10) x84 x86} (p105 : Cube x105 x103 (&hids (&α-gluel-proj X p0 p1 p13 x15)) (&hids (&α-gluel-proj X p0 p0 x10 x10)) p84 x104) {x106 : Square x76 x86 idp idp} (p106 : Cube x106 ids p76 p86 ids ids) {x107 : Square (&α-gluel-proj X p0 p1 p13 x15) (&α-gluel-proj X p0 p0 x10 x10) x85 x76} (p107 : Cube x107 x105 (&hids (&α-gluel-proj X p0 p1 p13 x15)) (&hids (&α-gluel-proj X p0 p0 x10 x10)) p85 x106) {x108 : Square idp idp x85 x85} (p108 : Cube x108 (&vids x85) ids ids (&hids x85) (&hids x85)) {x109 : Square idp idp x76 x76} (p109 : Cube x109 (&vids x76) ids ids (&hids x76) (&hids x76)) {x110 : Square x16 x11 x85 x76} (p110 : Cube p16 p11 x110 x107 x108 x109) {x111 : a == a} (p111 : Square x111 idp idp idp) {x112 : x0 == x0} (p112 : Square x112 idp idp idp) {x113 : Square p0 p0 x111 x112} (p113 : Cube x113 (&hids p0) (&hids p0) (&hids p0) p111 p112) {x114 : x27 == x27} (p114 : Square x114 idp idp idp) {x115 : Square x30 x30 x111 x114} (p115 : Cube x115 (&hids x30) (&hids x30) (&hids x30) p111 p114) {x116 : Square p27 p27 x114 x54} (p116 : Cube x116 (&hids p27) (&hids p27) (&hids p27) p114 p54) {x117 : Square idp idp x54 x54} (p117 : Cube x117 (&vids x54) ids ids (&hids x54) (&hids x54)) {x118 : Square x34 x29 x54 x54} (p118 : Cube p34 p29 x118 x117 x117 x117) {x119 : Square x35 x30 x55 x114} (p119 : Cube p35 p30 p55 x116 x119 x118) {x120 : Square (&α-proj-gluel X p0 p0 x30 x35) (&α-proj-gluel X p0 p0 x30 x30) x55 x111} (p120 : Cube x120 (&α-proj-gluel□ X x113 x113 x115 x119) (&hids (&α-proj-gluel X p0 p0 x30 x35)) (&hids (&α-proj-gluel X p0 p0 x30 x30)) (&hids x55) (&hids x111)) {x121 : Square idp idp x55 x55} (p121 : Cube x121 (&vids x55) ids ids (&hids x55) (&hids x55)) {x122 : Square idp idp x111 x111} (p122 : Cube x122 (&vids x111) ids ids (&hids x111) (&hids x111)) {x123 : Square x62 x80 x55 x111} (p123 : Cube p62 p80 x123 x120 x121 x122) {x124 : x1 == x1} (p124 : Square x124 idp idp idp) {x125 : Square p1 p1 x124 x112} (p125 : Cube x125 (&hids p1) (&hids p1) (&hids p1) p124 p112) {x126 : Square p2 p2 x124 x17} (p126 : Cube x126 (&hids p2) (&hids p2) (&hids p2) p124 p17) {x127 : Square (&α-proj-gluel X p0 p1 p2 p3) (&α-proj-gluel X p0 p1 p2 p2) x18 x111} (p127 : Cube x127 (&α-proj-gluel□ X x113 x125 x126 p18) (&hids (&α-proj-gluel X p0 p1 p2 p3)) (&hids (&α-proj-gluel X p0 p1 p2 p2)) (&hids x18) (&hids x111)) {x128 : Square idp idp x18 x18} (p128 : Cube x128 (&vids x18) ids ids (&hids x18) (&hids x18)) {x129 : Square x63 x81 x18 x111} (p129 : Cube p63 p81 x129 x127 x128 x122) {x130 : Square idp idp x19 x19} (p130 : Cube x130 (&vids x19) ids ids (&hids x19) (&hids x19)) {x131 : Square x64 x82 x19 x18} (p131 : Cube p64 p82 p19 x131 x130 x128) {x132 : Square (&∧-map-gluel X x62 x63 x64) (&∧-map-gluel X x80 x81 x82) x19 x55} (p132 : Cube x132 (&∧-map-gluel□ X x123 x129 x131) (&hids (&∧-map-gluel X x62 x63 x64)) (&hids (&∧-map-gluel X x80 x81 x82)) (&hids x19) (&hids x55)) {x133 : Square x65 x83 x19 x55} (p133 : Cube p65 p83 x133 x132 x130 x121) {x134 : Square x66 x84 x19 x55} (p134 : Cube p66 p84 x134 x133 x130 x121) {x135 : Square x67 x85 x19 x55} (p135 : Cube p67 p85 x135 x134 x130 x121) {x136 : Square x19 x55 x67 x85} (p136 : Cube x136 (&sym x135) (&hids x19) (&hids x55) (&hids x67) (&hids x85)) {x137 : Square idp idp x67 x67} (p137 : Cube x137 (&vids x67) ids ids (&hids x67) (&hids x67)) {x138 : Square x20 x56 x67 x85} (p138 : Cube p20 p56 x136 x138 x137 x108) {x139 : Square (&∧-map-gluel X x11 x16 x20) (&∧-map-gluel X x11 x11 x56) x67 x76} (p139 : Cube x139 (&∧-map-gluel□ X x79 x110 x138) (&hids (&∧-map-gluel X x11 x16 x20)) (&hids (&∧-map-gluel X x11 x11 x56)) (&hids x67) (&hids x76)) {x140 : Square x21 x57 x67 x76} (p140 : Cube p21 p57 x140 x139 x137 x109) {x141 : Square x22 x58 x67 x76} (p141 : Cube p22 p58 x141 x140 x137 x109) {x142 : Square x23 x59 x67 x76} (p142 : Cube p23 p59 x142 x141 x137 x109) {x143 : x7 == x7} (p143 : Square x77 x143 idp idp) {x144 : Square x143 idp idp idp} (p144 : Cube p77 x144 p143 ids ids ids) {x145 : Square x51 idp x73 x143} (p145 : Cube x145 (&α-gluel-gluel X x42 x45 x50 x71 (&coh∙□ p73 p72) x144) p51 ids (&hids x73) (&hids x143)) {x146 : Square x51 x51 idp idp} (p146 : Cube x146 (&hids x51) (&hids x51) (&hids x51) ids ids) {x147 : Square x73 x73 idp idp} (p147 : Cube x147 (&hids x73) (&hids x73) (&hids x73) ids ids) {x148 : Square x143 x143 idp idp} (p148 : Cube x148 (&hids x143) (&hids x143) (&hids x143) ids ids) {x149 : Square x51 idp x73 x143} (p149 : Cube x149 x145 x146 ids x147 x148) {x150 : Square x51 idp x74 x77} (p150 : Cube x150 x149 (&hids x51) ids p74 p143) {x151 : Square idp idp x74 x74} (p151 : Cube x151 (&vids x74) ids ids (&hids x74) (&hids x74)) {x152 : Square idp idp x77 x77} (p152 : Cube x152 (&vids x77) ids ids (&hids x77) (&hids x77)) {x153 : Square x52 x60 x74 x77} (p153 : Cube p52 p60 x153 x150 x151 x152) {x154 : Square x53 x61 x74 x77} (p154 : Cube p53 p61 x154 x153 x151 x152) → Cube (&α-nat-gluel-proj X p0 p1 p13 x15 x19 p5 p6 p7 p8 p9 p10 p11 p16 p20 p21 p22 p23 p24 p25 p26 p27 p28 p29 p30 p31 p32 p33 p34 p35 p36 p37 p38 p39 p40 p41 p42 p2 p3 p4 p43 p44 p45 p12 p14 p15 p17 p18 p19 p46 p47 p48 p49 p50 p46 p47 p48 p49 p50 p51 p52 p53) (&α-nat-gluel-basel X p5 p32 p6 p7 p0 p8 p9 p10 p11 p54 p55 p56 p57 p58 p59 p60 p61) x75 x78 x142 x154
&α-nat-gluel-gluel X idp idp idp idp idp idp idp idp idp ids ids ids idp idp ids ids ids ids ids ids ids ids ids ids idp ids ids idp idp ids ids ids idp idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids idc ids ids idc idc ids ids ids ids ids ids ids ids ids ids ids idc idc ids ids idc ids idc idc idc idc idc idc idc idc idc idc idc idc idc idc ids ids idc ids idc idc idc idc idc idc idc idc idc ids idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc ids idc idc idc idc idc idc idc idc idc idc idc = idc

&α-nat-gluel-baser : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : a == x4) {x5 : X} (p5 : x5 == x0) {x6 : x0 == x0} (p6 : Square x6 idp idp idp) {x7 : a == x5} (p7 : Square p0 p5 x7 x6) {x8 : a == a} (p8 : Square x8 (&α-gluel-proj X p4 p4 x7 x7) idp idp) {x9 : x0 == x0} (p9 : Square x9 idp idp idp) {x10 : x1 == a} (p10 : Square p1 p0 x10 x9) {x11 : x1 == a} (p11 : Square x10 x11 idp idp) {x12 : x1 == a} (p12 : Square x12 (&∧-map-gluel X x8 x8 x11) idp idp) {x13 : x1 == a} (p13 : Square x13 x12 idp idp) {x14 : x1 == a} (p14 : Square x14 x13 idp idp) {x15 : x3 == x3} (p15 : Square x15 idp idp idp) {x16 : x3 == x3} (p16 : Square x16 x15 idp idp) → Square (&α-nat-proj-baser X p0 p1 p2 p3) (&α-nat-basel X p0 p2 p3) x14 x16
&α-nat-gluel-baser X idp idp idp idp idp idp ids ids ids ids ids ids ids ids ids ids ids = ids

&apα-nat-gluel-baser : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x0) {x3 : X} (p3 : x3 == x2) {x4 : X} (p4 : a == x4) {x5 : X} (p5 : x5 == x0) {x6 : x0 == x0} (p6 : Square x6 idp idp idp) {x7 : a == x5} (p7 : Square p0 p5 x7 x6) {x8 : a == a} (p8 : Square x8 (&α-gluel-proj X p4 p4 x7 x7) idp idp) {x9 : x0 == x0} (p9 : Square x9 idp idp idp) {x10 : x1 == a} (p10 : Square p1 p0 x10 x9) {x11 : x1 == a} (p11 : Square x10 x11 idp idp) {x12 : x1 == a} (p12 : Square x12 (&∧-map-gluel X x8 x8 x11) idp idp) {x13 : x1 == a} (p13 : Square x13 x12 idp idp) {x14 : x1 == a} (p14 : Square x14 x13 idp idp) {x15 : x3 == x3} (p15 : Square x15 idp idp idp) {x16 : x3 == x3} (p16 : Square x16 x15 idp idp) → Cube (ap² f (&α-nat-gluel-baser X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16)) (&α-nat-gluel-baser Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap f p4) (ap f p5) (ap² f p6) (ap² f p7) (&coh∙□ (ap² f p8) (&apα-gluel-proj f p4 p4 x7 x7)) (ap² f p9) (ap² f p10) (ap² f p11) (&coh∙□ (ap² f p12) (&ap∧-map-gluel f x8 x8 x11)) (ap² f p13) (ap² f p14) (ap² f p15) (ap² f p16)) (&apα-nat-proj-baser f p0 p1 p2 p3) (&apα-nat-basel f p0 p2 p3) (&hids (ap f x14)) (&hids (ap f x16))
&apα-nat-gluel-baser f idp idp idp idp idp idp ids ids ids ids ids ids ids ids ids ids ids = idc

&α-nat-gluel-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) {x3 : X} (p3 : x3 == x0) {x4 : X} (p4 : x4 == x3) {x5 : X} (p5 : a == x5) {x6 : X} (p6 : x6 == x0) {x7 : x0 == x0} (p7 : Square x7 idp idp idp) {x8 : a == x6} (p8 : Square p0 p6 x8 x7) {x9 : a == a} (p9 : Square x9 (&α-gluel-proj X p5 p5 x8 x8) idp idp) {x10 : X} (p10 : x10 == x0) {x11 : X} (p11 : x11 == x10) {x12 : X} (p12 : x12 == a) {x13 : x5 == x5} (p13 : Square x13 idp idp idp) {x14 : x12 == x5} (p14 : Square x14 p5 p12 x13) {x15 : X} (p15 : x15 == x6) {x16 : x12 == x15} (p16 : Square p12 p15 x16 x8) {x17 : x0 == x0} (p17 : Square x17 idp idp idp) {x18 : x10 == x6} (p18 : Square p10 p6 x18 x17) {x19 : x11 == x15} (p19 : Square p11 p15 x19 x18) {x20 : x11 == a} (p20 : Square x20 (&α-gluel-proj X p5 x14 x16 x19) idp idp) {x21 : x0 == x0} (p21 : Square x21 idp idp idp) {x22 : x1 == x10} (p22 : Square p1 p10 x22 x21) {x23 : x2 == x11} (p23 : Square p2 p11 x23 x22) {x24 : x2 == x11} (p24 : Square x23 x24 idp idp) {x25 : x2 == a} (p25 : Square x25 (&∧-map-gluel X x9 x20 x24) idp idp) {x26 : x2 == a} (p26 : Square x26 x25 idp idp) {x27 : x2 == a} (p27 : Square x27 x26 idp idp) {x28 : X} (p28 : x28 == x0) {x29 : X} (p29 : x29 == x28) {x30 : x0 == x0} (p30 : Square x30 idp idp idp) {x31 : a == x28} (p31 : Square p0 p28 x31 x30) {x32 : x12 == x29} (p32 : Square p12 p29 x32 x31) {x33 : X} (p33 : x33 == x0) {x34 : X} (p34 : x34 == x33) {x35 : x0 == x0} (p35 : Square x35 idp idp idp) {x36 : x33 == x28} (p36 : Square p33 p28 x36 x35) {x37 : x34 == x29} (p37 : Square p34 p29 x37 x36) {x38 : x0 == x0} (p38 : Square x38 idp idp idp) {x39 : x3 == x33} (p39 : Square p3 p33 x39 x38) {x40 : x4 == x34} (p40 : Square p4 p34 x40 x39) {x41 : x4 == x34} (p41 : Square x40 x41 idp idp) {x42 : x4 == x12} (p42 : Square x42 (&∧-map-pt X x32 x37 x41) idp idp) {x43 : x4 == a} (p43 : Square x43 (&∧-map-gluel X p5 x14 x42) idp idp) {x44 : X} (p44 : x44 == x0) {x45 : X} (p45 : x45 == x44) {x46 : x0 == x0} (p46 : Square x46 idp idp idp) {x47 : x44 == x6} (p47 : Square p44 p6 x47 x46) {x48 : x45 == x15} (p48 : Square p45 p15 x48 x47) {x49 : x3 == x44} (p49 : Square p3 p44 x49 x21) {x50 : x4 == x45} (p50 : Square p4 p45 x50 x49) {x51 : x4 == x45} (p51 : Square x50 x51 idp idp) {x52 : x4 == x12} (p52 : Square x52 (&∧-map-gluel X x16 x48 x51) idp idp) {x53 : x4 == x12} (p53 : Square x53 x52 idp idp) {x54 : x4 == x12} (p54 : Square x54 x53 idp idp) {x55 : x4 == x12} (p55 : Square x54 x55 idp idp) {x56 : x2 == x11} (p56 : Square x23 x56 idp idp) {x57 : x2 == x12} (p57 : Square x57 (&∧-map-gluel X x16 x19 x56) idp idp) {x58 : x2 == x12} (p58 : Square x58 x57 idp idp) {x59 : x2 == x12} (p59 : Square x59 x58 idp idp) {x60 : x2 == x12} (p60 : Square x59 x60 idp idp) {x61 : x2 == x4} (p61 : Square x61 (&α-gluel-proj X x43 x43 x55 x60) idp idp) {x62 : x2 == x4} (p62 : Square x62 x61 idp idp) {x63 : x2 == x4} (p63 : Square x63 x62 idp idp) {x64 : x44 == a} (p64 : Square p44 p0 x64 x38) {x65 : x45 == x12} (p65 : Square p45 p12 x65 x64) {x66 : x15 == x15} (p66 : Square x66 idp idp idp) {x67 : x6 == x6} (p67 : Square x67 idp idp idp) {x68 : Square p15 p15 x66 x67} (p68 : Cube x68 (&hids p15) (&hids p15) (&hids p15) p66 p67) {x69 : Square p6 p6 x67 x38} (p69 : Cube x69 (&hids p6) (&hids p6) (&hids p6) p67 p38) {x70 : Square idp idp x38 x38} (p70 : Cube x70 (&vids x38) ids ids (&hids x38) (&hids x38)) {x71 : Square x46 x7 x38 x38} (p71 : Cube p46 p7 x71 x70 x70 x70) {x72 : Square x47 x8 x64 x67} (p72 : Cube p47 p8 p64 x69 x72 x71) {x73 : Square x48 x16 x65 x66} (p73 : Cube p48 p16 p65 x68 x73 x72) {x74 : x29 == x29} (p74 : Square x74 idp idp idp) {x75 : x33 == a} (p75 : Square p33 p0 x75 x21) {x76 : x34 == x12} (p76 : Square p34 p12 x76 x75) {x77 : x28 == x28} (p77 : Square x77 idp idp idp) {x78 : Square p29 p29 x74 x77} (p78 : Cube x78 (&hids p29) (&hids p29) (&hids p29) p74 p77) {x79 : Square p28 p28 x77 x21} (p79 : Cube x79 (&hids p28) (&hids p28) (&hids p28) p77 p21) {x80 : Square idp idp x21 x21} (p80 : Cube x80 (&vids x21) ids ids (&hids x21) (&hids x21)) {x81 : Square x35 x30 x21 x21} (p81 : Cube p35 p30 x81 x80 x80 x80) {x82 : Square x36 x31 x75 x77} (p82 : Cube p36 p31 p75 x79 x82 x81) {x83 : Square x37 x32 x76 x74} (p83 : Cube p37 p32 p76 x78 x83 x82) {x84 : Square x38 x38 x21 x21} (p84 : Cube x84 (&hids x38) (&hids x38) (&hids x38) p21 p21) {x85 : Square x39 x64 x49 x75} (p85 : Cube p39 p64 p49 p75 x85 x84) {x86 : Square x40 x65 x50 x76} (p86 : Cube p40 p65 p50 p76 x86 x85) {x87 : x33 == a} (p87 : Square x75 x87 idp idp) {x88 : x33 == a} (p88 : Square x88 (&∧-map-gluel X x9 x9 x87) idp idp) {x89 : x33 == a} (p89 : Square x89 x88 idp idp) {x90 : x33 == a} (p90 : Square x90 x89 idp idp) {x91 : x4 == x4} (p91 : Square x91 idp idp idp) {x92 : x4 == x4} (p92 : Square x92 x91 idp idp) {x93 : x33 == a} (p93 : Square x93 (&α-proj-gluer X p0 p33) idp idp) {x94 : x1 == a} (p94 : Square x94 (&α-proj-gluer X p0 p1) idp idp) {x95 : x2 == x1} (p95 : Square p2 x95 idp idp) {x96 : x2 == x33} (p96 : Square x96 (&∧-map-gluer X x93 x94 x95) idp idp) {x97 : x2 == x33} (p97 : Square x97 x96 idp idp) {x98 : x2 == x33} (p98 : Square x98 x97 idp idp) {x99 : x4 == a} (p99 : Square x99 (&∧-map-gluer X p0 p3 p4) idp idp) {x100 : x2 == a} (p100 : Square x100 (&∧-map-gluer X p0 p1 p2) idp idp) {x101 : x2 == x4} (p101 : Square x101 (&α-proj-gluer X x99 x100) idp idp) {x102 : x2 == x4} (p102 : Square x102 x101 idp idp) {x103 : x2 == x4} (p103 : Square x103 x102 idp idp) {x104 : Square idp (&α-nat-proj-baser X p0 p33 p3 p4) x98 x103} (p104 : Cube x104 (&α-nat-proj-gluer X p0 p1 p2 p33 p3 p4 p93 p94 p95 p96 p97 p98 p99 p100 p101 p102 p103) ids (&hids (&α-nat-proj-baser X p0 p33 p3 p4)) (&hids x98) (&hids x103)) {x105 : a == a} (p105 : Square x105 idp idp idp) {x106 : x4 == x4} (p106 : Square x106 idp idp idp) {x107 : Square (&α-nat-basel X p0 p3 p4) (&α-nat-basel X p0 p3 p4) x105 x106} (p107 : Cube x107 (&hids (&α-nat-basel X p0 p3 p4)) (&hids (&α-nat-basel X p0 p3 p4)) (&hids (&α-nat-basel X p0 p3 p4)) p105 p106) {x108 : Square x9 x9 x105 x105} (p108 : Cube x108 (&hids x9) (&hids x9) (&hids x9) p105 p105) {x109 : a == a} (p109 : Square x109 (&α-proj-gluer X p0 p0) idp idp) {x110 : x10 == a} (p110 : Square x110 (&α-proj-gluer X p0 p10) idp idp) {x111 : x11 == x10} (p111 : Square p11 x111 idp idp) {x112 : x11 == a} (p112 : Square x112 (&∧-map-gluer X x109 x110 x111) idp idp) {x113 : x11 == a} (p113 : Square x113 x112 idp idp) {x114 : x11 == a} (p114 : Square x114 x113 idp idp) {x115 : a == a} (p115 : Square x115 idp idp idp) {x116 : a == a} (p116 : Square x116 idp idp idp) {x117 : a == a} (p117 : Square x117 idp idp idp) {x118 : a == a} (p118 : Square x118 idp idp idp) {x119 : a == a} (p119 : Square x119 idp idp idp) {x120 : Square (&α-gluel-proj X p5 p5 x8 x8) idp x109 x117} (p120 : Cube x120 (&α-gluel-gluer X p0 p0 p5 p6 p7 p8 p7 p8 p109 p117) (&hids (&α-gluel-proj X p5 p5 x8 x8)) ids (&hids x109) (&hids x117)) {x121 : Square (&α-gluel-proj X p5 p5 x8 x18) idp x110 x118} (p121 : Cube x121 (&α-gluel-gluer X p0 p10 p5 p6 p7 p8 p17 p18 p110 p118) (&hids (&α-gluel-proj X p5 p5 x8 x18)) ids (&hids x110) (&hids x118)) {x122 : a == a} (p122 : Square x122 idp idp idp) {x123 : Square p5 p5 x122 x13} (p123 : Cube x123 (&hids p5) (&hids p5) (&hids p5) p122 p13) {x124 : Square x16 x8 p12 p15} (p124 : Cube x124 (&sym p16) (&hids x16) (&hids x8) (&hids p12) (&hids p15)) {x125 : Square x19 x18 p11 p15} (p125 : Cube x125 (&sym p19) (&hids x19) (&hids x18) (&hids p11) (&hids p15)) {x126 : Square (&α-gluel-proj X p5 x14 x16 x19) (&α-gluel-proj X p5 p5 x8 x18) p11 x122} (p126 : Cube x126 (&α-gluel-proj□ X x123 p14 x124 x125) (&hids (&α-gluel-proj X p5 x14 x16 x19)) (&hids (&α-gluel-proj X p5 p5 x8 x18)) (&hids p11) (&hids x122)) {x127 : Square x122 x119 idp idp} (p127 : Cube x127 ids p122 p119 ids ids) {x128 : Square (&α-gluel-proj X p5 x14 x16 x19) (&α-gluel-proj X p5 p5 x8 x18) x111 x119} (p128 : Cube x126 x128 (&hids (&α-gluel-proj X p5 x14 x16 x19)) (&hids (&α-gluel-proj X p5 p5 x8 x18)) p111 x127) {x129 : Square x116 (&∧-map-gluer X x117 x118 x119) idp idp} (p129 : Cube x129 ids p116 (&∧-map-gluer□ X p117 p118 p119) ids ids) {x130 : Square (&α-gluel-proj X p5 x14 x16 x19) (&α-gluel-proj X p5 p5 x8 x8) x112 x116} (p130 : Cube x130 (&∧-map-gluer□' X x120 x121 x128) (&hids (&α-gluel-proj X p5 x14 x16 x19)) (&hids (&α-gluel-proj X p5 p5 x8 x8)) p112 x129) {x131 : Square x115 x116 idp idp} (p131 : Cube x131 ids p115 p116 ids ids) {x132 : Square (&α-gluel-proj X p5 x14 x16 x19) (&α-gluel-proj X p5 p5 x8 x8) x113 x115} (p132 : Cube x132 x130 (&hids (&α-gluel-proj X p5 x14 x16 x19)) (&hids (&α-gluel-proj X p5 p5 x8 x8)) p113 x131) {x133 : Square x105 x115 idp idp} (p133 : Cube x133 ids p105 p115 ids ids) {x134 : Square (&α-gluel-proj X p5 x14 x16 x19) (&α-gluel-proj X p5 p5 x8 x8) x114 x105} (p134 : Cube x134 x132 (&hids (&α-gluel-proj X p5 x14 x16 x19)) (&hids (&α-gluel-proj X p5 p5 x8 x8)) p114 x133) {x135 : Square idp idp x114 x114} (p135 : Cube x135 (&vids x114) ids ids (&hids x114) (&hids x114)) {x136 : Square idp idp x105 x105} (p136 : Cube x136 (&vids x105) ids ids (&hids x105) (&hids x105)) {x137 : Square x20 x9 x114 x105} (p137 : Cube p20 p9 x137 x134 x135 x136) {x138 : a == a} (p138 : Square x138 idp idp idp) {x139 : Square p0 p0 x138 x21} (p139 : Cube x139 (&hids p0) (&hids p0) (&hids p0) p138 p21) {x140 : Square (&α-proj-gluer X p0 p33) (&α-proj-gluer X p0 p0) x75 x138} (p140 : Cube x140 (&α-proj-gluer□ X x139 p75) (&hids (&α-proj-gluer X p0 p33)) (&hids (&α-proj-gluer X p0 p0)) (&hids x75) (&hids x138)) {x141 : Square idp idp x75 x75} (p141 : Cube x141 (&vids x75) ids ids (&hids x75) (&hids x75)) {x142 : Square idp idp x138 x138} (p142 : Cube x142 (&vids x138) ids ids (&hids x138) (&hids x138)) {x143 : Square x93 x109 x75 x138} (p143 : Cube p93 p109 x143 x140 x141 x142) {x144 : Square (&α-proj-gluer X p0 p1) (&α-proj-gluer X p0 p10) x22 x138} (p144 : Cube x144 (&α-proj-gluer□ X x139 p22) (&hids (&α-proj-gluer X p0 p1)) (&hids (&α-proj-gluer X p0 p10)) (&hids x22) (&hids x138)) {x145 : Square idp idp x22 x22} (p145 : Cube x145 (&vids x22) ids ids (&hids x22) (&hids x22)) {x146 : Square x94 x110 x22 x138} (p146 : Cube p94 p110 x146 x144 x145 x142) {x147 : Square idp idp x23 x23} (p147 : Cube x147 (&vids x23) ids ids (&hids x23) (&hids x23)) {x148 : Square x95 x111 x23 x22} (p148 : Cube p95 p111 p23 x148 x147 x145) {x149 : Square (&∧-map-gluer X x93 x94 x95) (&∧-map-gluer X x109 x110 x111) x23 x75} (p149 : Cube x149 (&∧-map-gluer□ X x143 x146 x148) (&hids (&∧-map-gluer X x93 x94 x95)) (&hids (&∧-map-gluer X x109 x110 x111)) (&hids x23) (&hids x75)) {x150 : Square x96 x112 x23 x75} (p150 : Cube p96 p112 x150 x149 x147 x141) {x151 : Square x97 x113 x23 x75} (p151 : Cube p97 p113 x151 x150 x147 x141) {x152 : Square x98 x114 x23 x75} (p152 : Cube p98 p114 x152 x151 x147 x141) {x153 : Square x23 x75 x98 x114} (p153 : Cube x153 (&sym x152) (&hids x23) (&hids x75) (&hids x98) (&hids x114)) {x154 : Square idp idp x98 x98} (p154 : Cube x154 (&vids x98) ids ids (&hids x98) (&hids x98)) {x155 : Square x24 x87 x98 x114} (p155 : Cube p24 p87 x153 x155 x154 x135) {x156 : Square (&∧-map-gluel X x9 x20 x24) (&∧-map-gluel X x9 x9 x87) x98 x105} (p156 : Cube x156 (&∧-map-gluel□ X x108 x137 x155) (&hids (&∧-map-gluel X x9 x20 x24)) (&hids (&∧-map-gluel X x9 x9 x87)) (&hids x98) (&hids x105)) {x157 : Square x25 x88 x98 x105} (p157 : Cube p25 p88 x157 x156 x154 x136) {x158 : Square x26 x89 x98 x105} (p158 : Cube p26 p89 x158 x157 x154 x136) {x159 : Square x27 x90 x98 x105} (p159 : Cube p27 p90 x159 x158 x154 x136) {x160 : x4 == x4} (p160 : Square x106 x160 idp idp) {x161 : x12 == a} (p161 : Square x161 (&∧-map-gluer X p0 p0 p12) idp idp) {x162 : a == a} (p162 : Square x162 idp idp idp) {x163 : a == a} (p163 : Square x162 x163 idp idp) {x164 : Square x163 idp idp idp} (p164 : Cube p162 x164 p163 ids ids ids) {x165 : x0 == x0} (p165 : Square x165 idp idp idp) {x166 : Square p0 p0 x162 x165} (p166 : Cube x166 (&hids p0) (&hids p0) (&hids p0) p162 p165) {x167 : x3 == x44} (p167 : Square x49 x167 idp idp) {x168 : x3 == a} (p168 : Square x168 (&∧-map-gluel X x8 x47 x167) idp idp) {x169 : x3 == a} (p169 : Square x169 x168 idp idp) {x170 : x3 == a} (p170 : Square x170 x169 idp idp) {x171 : x0 == x0} (p171 : Square x171 idp idp idp) {x172 : x0 == x0} (p172 : Square x172 idp idp idp) {x173 : x0 == x0} (p173 : Square x173 idp idp idp) {x174 : Square x21 x173 idp idp} (p174 : Cube x174 ids p21 p173 ids ids) {x175 : Square p3 p44 x167 x173} (p175 : Cube p49 x175 (&hids p3) (&hids p44) p167 x174) {x176 : Square x172 (&∧-map-gluel X x7 x46 x173) idp idp} (p176 : Cube x176 ids p172 (&∧-map-gluel□ X p7 p46 p173) ids ids) {x177 : Square p3 p0 x168 x172} (p177 : Cube x177 (&∧-map-gluel□' X p8 p47 x175) (&hids p3) (&hids p0) p168 x176) {x178 : Square x171 x172 idp idp} (p178 : Cube x178 ids p171 p172 ids ids) {x179 : Square p3 p0 x169 x171} (p179 : Cube x179 x177 (&hids p3) (&hids p0) p169 x178) {x180 : Square x165 x171 idp idp} (p180 : Cube x180 ids p165 p171 ids ids) {x181 : Square p3 p0 x170 x165} (p181 : Cube x181 x179 (&hids p3) (&hids p0) p170 x180) {x182 : Square x65 x64 p45 p12} (p182 : Cube x182 (&sym p65) (&hids x65) (&hids x64) (&hids p45) (&hids p12)) {x183 : Square idp idp p15 p15} (p183 : Cube x183 (&vids p15) ids ids (&hids p15) (&hids p15)) {x184 : Square x66 x67 p15 p15} (p184 : Cube p66 p67 x184 x183 x183 x183) {x185 : Square x48 x47 p45 p15} (p185 : Cube x73 x72 x185 x124 x182 x184) {x186 : Square x50 x49 p4 p45} (p186 : Cube x186 (&sym p50) (&hids x50) (&hids x49) (&hids p4) (&hids p45)) {x187 : Square idp idp p4 p4} (p187 : Cube x187 (&vids p4) ids ids (&hids p4) (&hids p4)) {x188 : Square idp idp p45 p45} (p188 : Cube x188 (&vids p45) ids ids (&hids p45) (&hids p45)) {x189 : Square x51 x167 p4 p45} (p189 : Cube p51 p167 x186 x189 x187 x188) {x190 : Square (&∧-map-gluel X x16 x48 x51) (&∧-map-gluel X x8 x47 x167) p4 p12} (p190 : Cube x190 (&∧-map-gluel□ X x124 x185 x189) (&hids (&∧-map-gluel X x16 x48 x51)) (&hids (&∧-map-gluel X x8 x47 x167)) (&hids p4) (&hids p12)) {x191 : Square idp idp p12 p12} (p191 : Cube x191 (&vids p12) ids ids (&hids p12) (&hids p12)) {x192 : Square x52 x168 p4 p12} (p192 : Cube p52 p168 x192 x190 x187 x191) {x193 : Square x53 x169 p4 p12} (p193 : Cube p53 p169 x193 x192 x187 x191) {x194 : Square x54 x170 p4 p12} (p194 : Cube p54 p170 x194 x193 x187 x191) {x195 : Square p4 p12 x54 x170} (p195 : Cube x195 (&sym x194) (&hids p4) (&hids p12) (&hids x54) (&hids x170)) {x196 : Square (&∧-map-gluer X p0 p3 p4) (&∧-map-gluer X p0 p0 p12) x54 x162} (p196 : Cube x196 (&∧-map-gluer□ X x166 x181 x195) (&hids (&∧-map-gluer X p0 p3 p4)) (&hids (&∧-map-gluer X p0 p0 p12)) (&hids x54) (&hids x162)) {x197 : Square idp idp x54 x54} (p197 : Cube x197 (&vids x54) ids ids (&hids x54) (&hids x54)) {x198 : Square idp idp x162 x162} (p198 : Cube x198 (&vids x162) ids ids (&hids x162) (&hids x162)) {x199 : Square x99 x161 x54 x162} (p199 : Cube p99 p161 x199 x196 x197 x198) {x200 : Square x99 x161 x55 x163} (p200 : Cube x199 x200 (&hids x99) (&hids x161) p55 p163) {x201 : a == a} (p201 : Square x201 idp idp idp) {x202 : a == a} (p202 : Square x201 x202 idp idp) {x203 : Square x202 idp idp idp} (p203 : Cube p201 x203 p202 ids ids ids) {x204 : x0 == x0} (p204 : Square x204 idp idp idp) {x205 : Square p0 p0 x201 x204} (p205 : Cube x205 (&hids p0) (&hids p0) (&hids p0) p201 p204) {x206 : x1 == x10} (p206 : Square x22 x206 idp idp) {x207 : x1 == a} (p207 : Square x207 (&∧-map-gluel X x8 x18 x206) idp idp) {x208 : x1 == a} (p208 : Square x208 x207 idp idp) {x209 : x1 == a} (p209 : Square x209 x208 idp idp) {x210 : x0 == x0} (p210 : Square x210 idp idp idp) {x211 : x0 == x0} (p211 : Square x211 idp idp idp) {x212 : x0 == x0} (p212 : Square x212 idp idp idp) {x213 : Square x21 x212 idp idp} (p213 : Cube x213 ids p21 p212 ids ids) {x214 : Square p1 p10 x206 x212} (p214 : Cube p22 x214 (&hids p1) (&hids p10) p206 x213) {x215 : Square x211 (&∧-map-gluel X x7 x17 x212) idp idp} (p215 : Cube x215 ids p211 (&∧-map-gluel□ X p7 p17 p212) ids ids) {x216 : Square p1 p0 x207 x211} (p216 : Cube x216 (&∧-map-gluel□' X p8 p18 x214) (&hids p1) (&hids p0) p207 x215) {x217 : Square x210 x211 idp idp} (p217 : Cube x217 ids p210 p211 ids ids) {x218 : Square p1 p0 x208 x210} (p218 : Cube x218 x216 (&hids p1) (&hids p0) p208 x217) {x219 : Square x204 x210 idp idp} (p219 : Cube x219 ids p204 p210 ids ids) {x220 : Square p1 p0 x209 x204} (p220 : Cube x220 x218 (&hids p1) (&hids p0) p209 x219) {x221 : Square x23 x22 p2 p11} (p221 : Cube x221 (&sym p23) (&hids x23) (&hids x22) (&hids p2) (&hids p11)) {x222 : Square idp idp p2 p2} (p222 : Cube x222 (&vids p2) ids ids (&hids p2) (&hids p2)) {x223 : Square idp idp p11 p11} (p223 : Cube x223 (&vids p11) ids ids (&hids p11) (&hids p11)) {x224 : Square x56 x206 p2 p11} (p224 : Cube p56 p206 x221 x224 x222 x223) {x225 : Square (&∧-map-gluel X x16 x19 x56) (&∧-map-gluel X x8 x18 x206) p2 p12} (p225 : Cube x225 (&∧-map-gluel□ X x124 x125 x224) (&hids (&∧-map-gluel X x16 x19 x56)) (&hids (&∧-map-gluel X x8 x18 x206)) (&hids p2) (&hids p12)) {x226 : Square x57 x207 p2 p12} (p226 : Cube p57 p207 x226 x225 x222 x191) {x227 : Square x58 x208 p2 p12} (p227 : Cube p58 p208 x227 x226 x222 x191) {x228 : Square x59 x209 p2 p12} (p228 : Cube p59 p209 x228 x227 x222 x191) {x229 : Square p2 p12 x59 x209} (p229 : Cube x229 (&sym x228) (&hids p2) (&hids p12) (&hids x59) (&hids x209)) {x230 : Square (&∧-map-gluer X p0 p1 p2) (&∧-map-gluer X p0 p0 p12) x59 x201} (p230 : Cube x230 (&∧-map-gluer□ X x205 x220 x229) (&hids (&∧-map-gluer X p0 p1 p2)) (&hids (&∧-map-gluer X p0 p0 p12)) (&hids x59) (&hids x201)) {x231 : Square idp idp x59 x59} (p231 : Cube x231 (&vids x59) ids ids (&hids x59) (&hids x59)) {x232 : Square idp idp x201 x201} (p232 : Cube x232 (&vids x201) ids ids (&hids x201) (&hids x201)) {x233 : Square x100 x161 x59 x201} (p233 : Cube p100 p161 x233 x230 x231 x232) {x234 : Square x100 x161 x60 x202} (p234 : Cube x233 x234 (&hids x100) (&hids x161) p60 p202) {x235 : Square x160 idp idp idp} (p235 : Cube p106 x235 p160 ids ids ids) {x236 : Square x61 idp x102 x160} (p236 : Cube x236 (&α-gluel-gluer X x99 x100 x43 x161 x164 x200 x203 x234 (&coh∙□ p102 p101) x235) p61 ids (&hids x102) (&hids x160)) {x237 : Square x61 x61 idp idp} (p237 : Cube x237 (&hids x61) (&hids x61) (&hids x61) ids ids) {x238 : Square x102 x102 idp idp} (p238 : Cube x238 (&hids x102) (&hids x102) (&hids x102) ids ids) {x239 : Square x160 x160 idp idp} (p239 : Cube x239 (&hids x160) (&hids x160) (&hids x160) ids ids) {x240 : Square x61 idp x102 x160} (p240 : Cube x240 x236 x237 ids x238 x239) {x241 : Square x61 idp x103 x106} (p241 : Cube x241 x240 (&hids x61) ids p103 p160) {x242 : Square idp idp x103 x103} (p242 : Cube x242 (&vids x103) ids ids (&hids x103) (&hids x103)) {x243 : Square idp idp x106 x106} (p243 : Cube x243 (&vids x106) ids ids (&hids x106) (&hids x106)) {x244 : Square x62 x91 x103 x106} (p244 : Cube p62 p91 x244 x241 x242 x243) {x245 : Square x63 x92 x103 x106} (p245 : Cube p63 p92 x245 x244 x242 x243) → Cube (&α-nat-gluel-proj X p5 x14 x16 x19 x23 p0 p3 p4 p6 p7 p8 p9 p20 p24 p25 p26 p27 p12 p13 p14 p28 p29 p30 p31 p32 p33 p34 p35 p36 p37 p38 p39 p40 p41 p42 p43 x32 x37 x40 p41 p42 p43 x65 p66 x73 p74 x83 x86 p51 p52 p53 p54 p55 p56 p57 p58 p59 p60 p61 p62 p63) (&α-nat-gluel-baser X p0 p33 p3 p4 p5 p6 p7 p8 p9 p21 p75 p87 p88 p89 p90 p91 p92) x104 x107 x159 x245
&α-nat-gluel-gluer X idp idp idp idp idp idp idp ids ids ids idp idp idp ids ids idp ids ids ids ids ids ids ids ids ids ids ids ids idp idp ids ids ids idp idp ids ids ids ids ids ids ids ids ids idp idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids idc idc idc idc idc idc ids ids ids ids idc idc idc idc idc idc idc idc idc ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids ids idc ids ids idc idc ids ids ids ids ids ids ids ids ids ids ids idc idc ids idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc ids idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc ids ids ids ids idc ids idc ids ids ids ids ids ids ids idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc ids ids idc ids idc ids ids ids ids ids ids ids idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc idc = idc

α-nat-gluel : (A : Ptd i) (A' : Ptd i) (B : Ptd i) (B' : Ptd i) (C : Ptd i) (C' : Ptd i) (f : PtdMap A A') (g : PtdMap B B') (h : PtdMap C C') (x : ∣ A ∧ B ∣) → Square (α-nat-proj A A' B B' C C' f g h (pt C) x) (&α-nat-basel ∣ (A' ∧ (B' ∧ C')) ∣ (gluer (proj (pt B') (pt C'))) (gluer (proj (g $ (pt B)) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ (pt C)))) (ptf f))) (ap (λ x → α A' B' C' $ (∧-map (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h $ x)) (gluel x)) (ap (λ x → ∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $ (α A B C $ x)) (gluel x))
α-nat-gluel A A' B B' C C' f g h =
  Smash-elim (λ a b → &α-nat-gluel-proj ∣ (A' ∧ (B' ∧ C')) ∣ (gluel (pt A')) (gluel (f $ a)) (ap (λ y → proj (f $ a) y) (gluel (pt B'))) (ap (λ y → proj (f $ a) y) (gluel (g $ b))) (ap (λ x → proj (f $ a) (proj (g $ b) x)) (ptf h)) (gluer (proj (pt B') (pt C'))) (gluer (proj (g $ (pt B)) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ (pt C)))) (ptf f)) (gluer basel) (ap-cst baser (gluel (pt B'))) (ap+ (λ y → gluer y) (gluel (pt B'))) (α.gluel-β A' B' C' (proj (pt A') (pt B'))) (α.gluel-β A' B' C' (proj (f $ a) (g $ b))) (ap-∘ (α A' B' C' $_) (λ y → proj (proj (f $ a) (g $ b)) y) (ptf h)) (&ap∧-map-gluel (α A' B' C' $_) (gluel (proj (pt A') (pt B'))) (gluel (proj (f $ a) (g $ b))) (ap (λ y → proj (proj (f $ a) (g $ b)) y) (ptf h))) (ap² (α A' B' C' $_) (∧-map.gluel-β (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h (proj a b))) (ap-∘ (α A' B' C' $_) (∧-map (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h $_) (gluel (proj a b))) (ap (λ x → proj x (proj (pt B') (pt C'))) (ptf f)) (ap-cst basel (ptf f)) (ap+ (λ x → gluel x) (ptf f)) (gluer baser) (ap (λ x → proj x baser) (ptf f)) (ap-cst baser (gluer (pt C'))) (ap+ (λ z → gluer z) (gluer (pt C'))) (ap+ (λ z → ap (λ x → proj x z) (ptf f)) (gluer (pt C'))) (gluer (proj (pt B') (h $ (pt C)))) (ap (λ x → proj x (proj (pt B') (h $ (pt C)))) (ptf f)) (ap-cst baser (gluer (h $ (pt C)))) (ap+ (λ z → gluer z) (gluer (h $ (pt C)))) (ap+ (λ z → ap (λ x → proj x z) (ptf f)) (gluer (h $ (pt C)))) (ap-cst baser (ptf g)) (ap+ (λ x → gluer (proj x (h $ (pt C)))) (ptf g)) (ap+ (λ x → ap (λ x1 → proj x1 (proj x (h $ (pt C)))) (ptf f)) (ptf g)) (ap-∘ (λ z → proj (f $ (pt A)) z) (λ x → proj x (h $ (pt C))) (ptf g)) (&ap∧-map-pt (λ y → proj (f $ (pt A)) y) (gluer (pt C')) (gluer (h $ (pt C))) (ap (λ x → proj x (h $ (pt C))) (ptf g))) (∧-map.gluel-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) (pt A)) (ap (λ y → proj (f $ a) y) (gluer (pt C'))) (ap (λ y → proj (f $ a) y) (gluer (h $ (pt C)))) (ap (λ x → proj (f $ a) (proj x (h $ (pt C)))) (ptf g)) (ap-∘ (λ z → proj (f $ a) z) (λ x → proj x (h $ (pt C))) (ptf g)) (&ap∧-map-pt (λ y → proj (f $ a) y) (gluer (pt C')) (gluer (h $ (pt C))) (ap (λ x → proj x (h $ (pt C))) (ptf g))) (∧-map.gluel-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) a) (ap (λ x → proj (f $ a) (proj x (pt C'))) (ptf g)) (ap-cst (proj (f $ a) basel) (ptf g)) (ap+ (λ x → ap (λ z → proj (f $ a) z) (gluel x)) (ptf g)) (ap-cst (proj (f $ a) baser) (ptf h)) (ap+ (λ x → ap (λ y → proj (f $ a) y) (gluer x)) (ptf h)) (ap+ (λ x → ap (λ x1 → proj (f $ a) (proj x1 x)) (ptf g)) (ptf h)) (ap-∘ (λ z → proj (f $ a) z) (λ y → proj (g $ (pt B)) y) (ptf h)) (&ap∧-map-gluel (λ x → proj (f $ a) x) (gluel (pt B')) (gluel (g $ (pt B))) (ap (λ y → proj (g $ (pt B)) y) (ptf h))) (ap² (λ x → proj (f $ a) x) (∧-map.gluel-β B B' C C' g h (pt B))) (ap-∘ (λ x → proj (f $ a) x) (∧-map B B' C C' g h $_) (gluel (pt B))) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (λ y → proj a y) (gluel (pt B))) (ap-∘ (λ z → proj (f $ a) z) (λ y → proj (g $ b) y) (ptf h)) (&ap∧-map-gluel (λ x → proj (f $ a) x) (gluel (pt B')) (gluel (g $ b)) (ap (λ y → proj (g $ b) y) (ptf h))) (ap² (λ x → proj (f $ a) x) (∧-map.gluel-β B B' C C' g h b)) (ap-∘ (λ x → proj (f $ a) x) (∧-map B B' C C' g h $_) (gluel b)) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (λ y → proj a y) (gluel b)) (&apα-gluel-proj (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))) (ap (λ y → proj a y) (gluel b))) (ap² (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α.gluel-β A B C (proj a b))) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α A B C $_) (gluel (proj a b))))
             (&α-nat-gluel-basel ∣ (A' ∧ (B' ∧ C')) ∣ (gluer (proj (pt B') (pt C'))) (gluer (proj (pt B') (h $ (pt C)))) (gluer (proj (g $ (pt B)) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ (pt C)))) (ptf f)) (gluel (pt A')) (gluer basel) (ap-cst baser (gluel (pt B'))) (ap+ (λ y → gluer y) (gluel (pt B'))) (α.gluel-β A' B' C' (proj (pt A') (pt B'))) (ap-cst baser (ptf h)) (ap+ (λ x → gluer (proj (pt B') x)) (ptf h)) (ap-∘ (α A' B' C' $_) (λ y → proj (proj (pt A') (pt B')) y) (ptf h)) (&ap∧-map-gluel (α A' B' C' $_) (gluel (proj (pt A') (pt B'))) (gluel (proj (pt A') (pt B'))) (ap (λ y → proj (proj (pt A') (pt B')) y) (ptf h))) (ap² (α A' B' C' $_) (∧-map.gluel-β (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h basel)) (ap-∘ (α A' B' C' $_) (∧-map (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h $_) (gluel basel)) (ap² (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α.gluel-β A B C basel)) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α A B C $_) (gluel basel)))
             (λ a → ↓-Square-in (&α-nat-gluel-gluel ∣ (A' ∧ (B' ∧ C')) ∣ (gluel (pt A')) (gluel (f $ a)) (ap (λ y → proj (f $ a) y) (gluer (pt C'))) (ap (λ y → proj (f $ a) y) (gluer (h $ (pt C)))) (ap (λ x → proj (f $ a) (proj x (h $ (pt C)))) (ptf g)) (gluer (proj (pt B') (pt C'))) (gluer (proj (g $ (pt B)) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ (pt C)))) (ptf f)) (gluer basel) (ap-cst baser (gluel (pt B'))) (ap+ (λ y → gluer y) (gluel (pt B'))) (α.gluel-β A' B' C' (proj (pt A') (pt B'))) (ap (λ x → proj (f $ a) (proj x (pt C'))) (ptf g)) (ap (λ y → proj (f $ a) y) (gluel (pt B'))) (ap-cst (proj (f $ a) basel) (ptf g)) (ap+ (λ x → ap (λ y → proj (f $ a) y) (gluel x)) (ptf g)) (α.gluel-β A' B' C' (proj (f $ a) (g $ (pt B)))) (ap-cst (proj (f $ a) baser) (ptf h)) (ap+ (λ x → ap (λ y → proj (f $ a) y) (gluer x)) (ptf h)) (ap+ (λ x → ap (λ x1 → proj (f $ a) (proj x1 x)) (ptf g)) (ptf h)) (ap-∘ (α A' B' C' $_) (λ y → proj (proj (f $ a) (g $ (pt B))) y) (ptf h)) (&ap∧-map-gluel (α A' B' C' $_) (gluel (proj (pt A') (pt B'))) (gluel (proj (f $ a) (g $ (pt B)))) (ap (λ y → proj (proj (f $ a) (g $ (pt B))) y) (ptf h))) (ap² (α A' B' C' $_) (∧-map.gluel-β (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h (proj a (pt B)))) (ap-∘ (α A' B' C' $_) (∧-map (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h $_) (gluel (proj a (pt B)))) (ap (λ x → proj x (proj (pt B') (pt C'))) (ptf f)) (ap-cst basel (ptf f)) (ap+ (λ x → gluel x) (ptf f)) (gluer baser) (ap (λ x → proj x baser) (ptf f)) (ap-cst baser (gluer (pt C'))) (ap+ (λ z → gluer z) (gluer (pt C'))) (ap+ (λ z → ap (λ x → proj x z) (ptf f)) (gluer (pt C'))) (gluer (proj (pt B') (h $ (pt C)))) (ap (λ x → proj x (proj (pt B') (h $ (pt C)))) (ptf f)) (ap-cst baser (gluer (h $ (pt C)))) (ap+ (λ z → gluer z) (gluer (h $ (pt C)))) (ap+ (λ z → ap (λ x → proj x z) (ptf f)) (gluer (h $ (pt C)))) (ap-cst baser (ptf g)) (ap+ (λ x → gluer (proj x (h $ (pt C)))) (ptf g)) (ap+ (λ x → ap (λ x1 → proj x1 (proj x (h $ (pt C)))) (ptf f)) (ptf g)) (ap-∘ (λ z → proj (f $ (pt A)) z) (λ x → proj x (h $ (pt C))) (ptf g)) (&ap∧-map-pt (λ y → proj (f $ (pt A)) y) (gluer (pt C')) (gluer (h $ (pt C))) (ap (λ x → proj x (h $ (pt C))) (ptf g))) (∧-map.gluel-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) (pt A)) (ap-∘ (λ z → proj (f $ a) z) (λ x → proj x (h $ (pt C))) (ptf g)) (&ap∧-map-pt (λ y → proj (f $ a) y) (gluer (pt C')) (gluer (h $ (pt C))) (ap (λ x → proj x (h $ (pt C))) (ptf g))) (∧-map.gluel-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) a) (ap-∘ (λ z → proj (f $ a) z) (λ y → proj (g $ (pt B)) y) (ptf h)) (&ap∧-map-gluel (λ x → proj (f $ a) x) (gluel (pt B')) (gluel (g $ (pt B))) (ap (λ y → proj (g $ (pt B)) y) (ptf h))) (ap² (λ x → proj (f $ a) x) (∧-map.gluel-β B B' C C' g h (pt B))) (ap-∘ (λ x → proj (f $ a) x) (∧-map B B' C C' g h $_) (gluel (pt B))) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (λ y → proj a y) (gluel (pt B))) (&apα-gluel-proj (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))) (ap (λ y → proj a y) (gluel (pt B)))) (ap² (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α.gluel-β A B C (proj a (pt B)))) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α A B C $_) (gluel (proj a (pt B)))) (ap-cst baser (ptf h)) (ap+ (λ x → gluer (proj (pt B') x)) (ptf h)) (ap-∘ (α A' B' C' $_) (λ y → proj (proj (pt A') (pt B')) y) (ptf h)) (&ap∧-map-gluel (α A' B' C' $_) (gluel (proj (pt A') (pt B'))) (gluel (proj (pt A') (pt B'))) (ap (λ y → proj (proj (pt A') (pt B')) y) (ptf h))) (ap² (α A' B' C' $_) (∧-map.gluel-β (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h basel)) (ap-∘ (α A' B' C' $_) (∧-map (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h $_) (gluel basel)) (ap² (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α.gluel-β A B C basel)) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α A B C $_) (gluel basel)) (α-proj.gluel-β A' B' C' (h $ (pt C)) (pt A')) (α-proj.gluel-β A' B' C' (h $ (pt C)) (f $ a)) (ap-∘ (α-proj A' B' C' (h $ (pt C)) $_) (λ y → proj (f $ a) y) (ptf g)) (&ap∧-map-gluel (α-proj A' B' C' (h $ (pt C)) $_) (gluel (pt A')) (gluel (f $ a)) (ap (λ y → proj (f $ a) y) (ptf g))) (ap² (α-proj A' B' C' (h $ (pt C)) $_) (∧-map.gluel-β A A' B B' f g a)) (ap-∘ (α-proj A' B' C' (h $ (pt C)) $_) (∧-map A A' B B' f g $_) (gluel a)) (&ap∧-map-gluer (λ x → proj (f $ a) x) (gluer (pt C')) (gluer (h $ (pt C))) (ap (λ x → proj x (h $ (pt C))) (ptf g))) (ap² (λ x → proj (f $ a) x) (∧-map.gluer-β B B' C C' g h (pt C))) (ap-∘ (λ x → proj (f $ a) x) (∧-map B B' C C' g h $_) (gluer (pt C))) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (λ y → proj a y) (gluer (pt C))) (&apα-proj-gluel (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluer (pt C))) (ap (λ y → proj a y) (gluer (pt C)))) (ap² (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α-proj.gluel-β A B C (pt C) a)) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α-proj A B C (pt C) $_) (gluel a)) (α-nat-proj.gluel-β A A' B B' C C' f g h (pt C) a) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (gluel a)) (ap-cst (proj (f $ (pt A)) (proj (g $ (pt B)) (h $ (pt C)))) (gluel a)) (ap+-cst (&α-nat-basel ∣ (A' ∧ (B' ∧ C')) ∣ (gluer (proj (pt B') (pt C'))) (gluer (proj (g $ (pt B)) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ (pt C)))) (ptf f))) (gluel a)) (ap+-cst (ap (α A' B' C' $_) (gluel (proj (pt A') (pt B')))) (gluel a)) (α-proj.gluel-β A' B' C' (pt C') (pt A')) (α-proj.gluel-β A' B' C' (pt C') (f $ a)) (ap-∘ (α-proj A' B' C' (pt C') $_) (λ y → proj (f $ a) y) (ptf g)) (&ap∧-map-gluel (α-proj A' B' C' (pt C') $_) (gluel (pt A')) (gluel (f $ a)) (ap (λ y → proj (f $ a) y) (ptf g))) (ap² (α-proj A' B' C' (pt C') $_) (∧-map.gluel-β A A' B B' f g a)) (ap-∘ (α-proj A' B' C' (pt C') $_) (∧-map A A' B B' f g $_) (gluel a)) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (ap (∧-map A A' B B' f g $_) (gluel a))) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (&∧-map-gluel ∣ (A' ∧ B') ∣ (gluel (pt A')) (gluel (f $ a)) (ap (λ y → proj (f $ a) y) (ptf g)))) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (gluel (pt A'))) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (gluel (f $ a))) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (ap (λ y → proj (f $ a) y) (ptf g))) (α-gluel.gluel-β A' B' C' (pt A')) (α-gluel.gluel-β A' B' C' (f $ a)) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (ptf g)) (ap-cst basel (ptf g)) (ap+-cst (gluel (pt A')) (ptf g)) (ap-cst (proj (f $ a) (proj (pt B') (pt C'))) (ptf g)) (ap+-cst (gluel (f $ a)) (ptf g)) (ap+-cst (ap (λ y → proj (f $ a) y) (gluel (pt B'))) (ptf g)) (ap/α-gluel-proj (ptf g) (λ x → gluel (pt A')) (λ x → gluel (f $ a)) (λ x → ap (λ y → proj (f $ a) y) (gluel (pt B'))) (λ x → ap (λ y → proj (f $ a) y) (gluel x))) (ap-∘-cst2 (proj (pt A') (proj (pt B') (pt C'))) (λ y → proj (f $ a) y) (ptf g)) (ap+-∘2 (α-gluel A' B' C') (λ y → proj (f $ a) y) (ptf g)) (&ap∧-map-gluel-cst (proj (pt A') (proj (pt B') (pt C'))) (gluel (pt A')) (gluel (f $ a)) (ap (λ y → proj (f $ a) y) (ptf g))) (ap+∧-map-gluel (α-gluel A' B' C') (gluel (pt A')) (gluel (f $ a)) (ap (λ y → proj (f $ a) y) (ptf g))) (ap²-cst (proj (pt A') (proj (pt B') (pt C'))) (∧-map.gluel-β A A' B B' f g a)) (ap²+ (α-gluel A' B' C') (∧-map.gluel-β A A' B B' f g a)) (ap-∘-cst2 (proj (pt A') (proj (pt B') (pt C'))) (∧-map A A' B B' f g $_) (gluel a)) (ap+-∘2 (α-gluel A' B' C') (∧-map A A' B B' f g $_) (gluel a)) (ap+-idp (λ x → α-proj A' B' C' (pt C') $ (∧-map A A' B B' f g $ x)) (gluel a)) (ap+-idp (λ x → proj (pt A') (proj (pt B') (pt C'))) (gluel a)) (ap++ (λ x → α.gluel-β A' B' C' (∧-map A A' B B' f g $ x)) (gluel a)) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (ptf h)) (ap-cst basel (ptf h)) (ap+-cst (gluel (pt A')) (ptf h)) (ap-cst (proj (pt A') baser) (ptf h)) (ap+-cst (ap (λ y1 → proj (pt A') y1) (gluer (pt C'))) (ptf h)) (ap+-cst (gluer baser) (ptf h)) (ap+-idp (λ y → baser) (ptf h)) (ap++ (λ y → ap-cst baser (gluer y)) (ptf h)) (ap++ (λ y → ap+ (λ y1 → gluer y1) (gluer y)) (ptf h)) (ap/α-proj-gluel (ptf h) (λ y → gluel (pt A')) (λ y → gluel (pt A')) (λ y → ap (λ y1 → proj (pt A') y1) (gluer (pt C'))) (λ y → ap (λ y1 → proj (pt A') y1) (gluer y))) (ap+-idp (λ y → proj (pt A') (proj (pt B') y)) (ptf h)) (ap+-idp (λ y → proj (pt A') (proj (pt B') (pt C'))) (ptf h)) (ap++ (λ y → α-proj.gluel-β A' B' C' y (pt A')) (ptf h)) (ap-cst (proj (f $ a) (proj (pt B') (pt C'))) (ptf h)) (ap+-cst (gluel (f $ a)) (ptf h)) (ap+-cst (ap (λ y1 → proj (f $ a) y1) (gluer (pt C'))) (ptf h)) (ap/α-proj-gluel (ptf h) (λ y → gluel (pt A')) (λ y → gluel (f $ a)) (λ y → ap (λ y1 → proj (f $ a) y1) (gluer (pt C'))) (λ y → ap (λ y1 → proj (f $ a) y1) (gluer y))) (ap+-idp (λ y → proj (f $ a) (proj (pt B') y)) (ptf h)) (ap++ (λ y → α-proj.gluel-β A' B' C' y (f $ a)) (ptf h)) (ap+-idp (λ y → proj (f $ a) (proj (g $ (pt B)) y)) (ptf h)) (ap++ (λ y → ap-∘ (α-proj A' B' C' y $_) (λ y → proj (f $ a) y) (ptf g)) (ptf h)) (ap/∧-map-gluel (ptf h) (λ y → ap (α-proj A' B' C' y $_) (gluel (pt A'))) (λ y → ap (α-proj A' B' C' y $_) (gluel (f $ a))) (λ y → ap (α-proj A' B' C' y $_) (ap (λ y → proj (f $ a) y) (ptf g)))) (ap++ (λ y → &ap∧-map-gluel (α-proj A' B' C' y $_) (gluel (pt A')) (gluel (f $ a)) (ap (λ y → proj (f $ a) y) (ptf g))) (ptf h)) (ap++ (λ y → ap² (α-proj A' B' C' y $_) (∧-map.gluel-β A A' B B' f g a)) (ptf h)) (ap++ (λ y → ap-∘ (α-proj A' B' C' y $_) (∧-map A A' B B' f g $_) (gluel a)) (ptf h)) (ap-sym (λ x → λ x1 → α-proj A' B' C' x1 $ (∧-map A A' B B' f g $ x)) (ptf h) (gluel a)) (ap+-idp (λ x → α-proj A' B' C' (h $ (pt C)) $ (∧-map A A' B B' f g $ x)) (gluel a)) (ap++ (λ x → ap-∘ (α A' B' C' $_) (λ y → proj (∧-map A A' B B' f g $ x) y) (ptf h)) (gluel a)) (ap/∧-map-gluel (gluel a) (λ x → ap (α A' B' C' $_) (gluel (proj (pt A') (pt B')))) (λ x → ap (α A' B' C' $_) (gluel (∧-map A A' B B' f g $ x))) (λ x → ap (α A' B' C' $_) (ap (λ y → proj (∧-map A A' B B' f g $ x) y) (ptf h)))) (ap++ (λ x → &ap∧-map-gluel (α A' B' C' $_) (gluel (proj (pt A') (pt B'))) (gluel (∧-map A A' B B' f g $ x)) (ap (λ y → proj (∧-map A A' B B' f g $ x) y) (ptf h))) (gluel a)) (ap++ (λ x → ap² (α A' B' C' $_) (∧-map.gluel-β (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h x)) (gluel a)) (ap++ (λ x → ap-∘ (α A' B' C' $_) (∧-map (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h $_) (gluel x)) (gluel a)) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (λ x → proj (pt A) (proj (pt B) (pt C))) (gluel a)) (ap-∘-cst (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (proj (pt A) (proj (pt B) (pt C))) (gluel a)) (&apα-gluel-gluel (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))) (ap (λ y → proj a y) (gluer (pt C))) (α-proj.gluel-β A B C (pt C) a) (ap-cst (proj (pt A) (proj (pt B) (pt C))) (gluel a))) (&aphids (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (&α-gluel-proj ∣ (A ∧ (B ∧ C)) ∣ (gluel (pt A)) (gluel a) (ap (λ y → proj a y) (gluel (pt B))) (ap (λ y → proj a y) (gluel (pt B))))) (&aphids (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (ap (α-proj A B C (pt C) $_) (gluel a))) (&aphids (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (ap (λ x → proj (pt A) (proj (pt B) (pt C))) (gluel a))) (ap³ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α-gluel.gluel-β A B C a)) (ap+-∘1 (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α-gluel A B C) (gluel a)) (ap+-idp (λ x → ∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $ (α-proj A B C (pt C) $ x)) (gluel a)) (ap+-idp (λ x → proj (f $ (pt A)) (proj (g $ (pt B)) (h $ (pt C)))) (gluel a)) (ap++ (λ x → ap² (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α.gluel-β A B C x)) (gluel a)) (ap++ (λ x → ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α A B C $_) (gluel x)) (gluel a))))
             (&α-nat-gluel-baser ∣ (A' ∧ (B' ∧ C')) ∣ (gluer (proj (pt B') (pt C'))) (gluer (proj (pt B') (h $ (pt C)))) (gluer (proj (g $ (pt B)) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ (pt C)))) (ptf f)) (gluel (pt A')) (gluer basel) (ap-cst baser (gluel (pt B'))) (ap+ (λ y → gluer y) (gluel (pt B'))) (α.gluel-β A' B' C' (proj (pt A') (pt B'))) (ap-cst baser (ptf h)) (ap+ (λ x → gluer (proj (pt B') x)) (ptf h)) (ap-∘ (α A' B' C' $_) (λ y → proj (proj (pt A') (pt B')) y) (ptf h)) (&ap∧-map-gluel (α A' B' C' $_) (gluel (proj (pt A') (pt B'))) (gluel (proj (pt A') (pt B'))) (ap (λ y → proj (proj (pt A') (pt B')) y) (ptf h))) (ap² (α A' B' C' $_) (∧-map.gluel-β (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h baser)) (ap-∘ (α A' B' C' $_) (∧-map (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h $_) (gluel baser)) (ap² (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α.gluel-β A B C baser)) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α A B C $_) (gluel baser)))
             (λ b → ↓-Square-in (&α-nat-gluel-gluer ∣ (A' ∧ (B' ∧ C')) ∣ (gluer (proj (pt B') (pt C'))) (gluer (proj (g $ b) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ b) (h $ (pt C)))) (ptf f)) (gluer (proj (g $ (pt B)) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ (pt C)))) (ptf f)) (gluel (pt A')) (gluer basel) (ap-cst baser (gluel (pt B'))) (ap+ (λ y → gluer y) (gluel (pt B'))) (α.gluel-β A' B' C' (proj (pt A') (pt B'))) (gluer (proj (g $ b) (pt C'))) (ap (λ x → proj x (proj (g $ b) (pt C'))) (ptf f)) (ap (λ x → proj x (proj (pt B') (pt C'))) (ptf f)) (ap-cst basel (ptf f)) (ap+ (λ x → gluel x) (ptf f)) (ap (λ x → proj x basel) (ptf f)) (ap+ (λ y → ap (λ x → proj x y) (ptf f)) (gluel (pt B'))) (ap-cst baser (gluel (g $ b))) (ap+ (λ y → gluer y) (gluel (g $ b))) (ap+ (λ y → ap (λ x → proj x y) (ptf f)) (gluel (g $ b))) (α.gluel-β A' B' C' (proj (f $ (pt A)) (g $ b))) (ap-cst baser (ptf h)) (ap+ (λ x → gluer (proj (g $ b) x)) (ptf h)) (ap+ (λ x → ap (λ x1 → proj x1 (proj (g $ b) x)) (ptf f)) (ptf h)) (ap-∘ (α A' B' C' $_) (λ y → proj (proj (f $ (pt A)) (g $ b)) y) (ptf h)) (&ap∧-map-gluel (α A' B' C' $_) (gluel (proj (pt A') (pt B'))) (gluel (proj (f $ (pt A)) (g $ b))) (ap (λ y → proj (proj (f $ (pt A)) (g $ b)) y) (ptf h))) (ap² (α A' B' C' $_) (∧-map.gluel-β (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h (proj (pt A) b))) (ap-∘ (α A' B' C' $_) (∧-map (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h $_) (gluel (proj (pt A) b))) (gluer baser) (ap (λ x → proj x baser) (ptf f)) (ap-cst baser (gluer (pt C'))) (ap+ (λ z → gluer z) (gluer (pt C'))) (ap+ (λ z → ap (λ x → proj x z) (ptf f)) (gluer (pt C'))) (gluer (proj (pt B') (h $ (pt C)))) (ap (λ x → proj x (proj (pt B') (h $ (pt C)))) (ptf f)) (ap-cst baser (gluer (h $ (pt C)))) (ap+ (λ z → gluer z) (gluer (h $ (pt C)))) (ap+ (λ z → ap (λ x → proj x z) (ptf f)) (gluer (h $ (pt C)))) (ap-cst baser (ptf g)) (ap+ (λ x → gluer (proj x (h $ (pt C)))) (ptf g)) (ap+ (λ x → ap (λ x1 → proj x1 (proj x (h $ (pt C)))) (ptf f)) (ptf g)) (ap-∘ (λ z → proj (f $ (pt A)) z) (λ x → proj x (h $ (pt C))) (ptf g)) (&ap∧-map-pt (λ y → proj (f $ (pt A)) y) (gluer (pt C')) (gluer (h $ (pt C))) (ap (λ x → proj x (h $ (pt C))) (ptf g))) (∧-map.gluel-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) (pt A)) (gluer (proj (g $ (pt B)) (pt C'))) (ap (λ x → proj x (proj (g $ (pt B)) (pt C'))) (ptf f)) (ap-cst baser (gluel (g $ (pt B)))) (ap+ (λ z → gluer z) (gluel (g $ (pt B)))) (ap+ (λ z → ap (λ x → proj x z) (ptf f)) (gluel (g $ (pt B)))) (ap+ (λ x → gluer (proj (g $ (pt B)) x)) (ptf h)) (ap+ (λ x → ap (λ x1 → proj x1 (proj (g $ (pt B)) x)) (ptf f)) (ptf h)) (ap-∘ (λ z → proj (f $ (pt A)) z) (λ y → proj (g $ (pt B)) y) (ptf h)) (&ap∧-map-gluel (λ x → proj (f $ (pt A)) x) (gluel (pt B')) (gluel (g $ (pt B))) (ap (λ y → proj (g $ (pt B)) y) (ptf h))) (ap² (λ x → proj (f $ (pt A)) x) (∧-map.gluel-β B B' C C' g h (pt B))) (ap-∘ (λ x → proj (f $ (pt A)) x) (∧-map B B' C C' g h $_) (gluel (pt B))) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (λ y → proj (pt A) y) (gluel (pt B))) (ap-∘ (λ z → proj (f $ (pt A)) z) (λ y → proj (g $ b) y) (ptf h)) (&ap∧-map-gluel (λ x → proj (f $ (pt A)) x) (gluel (pt B')) (gluel (g $ b)) (ap (λ y → proj (g $ b) y) (ptf h))) (ap² (λ x → proj (f $ (pt A)) x) (∧-map.gluel-β B B' C C' g h b)) (ap-∘ (λ x → proj (f $ (pt A)) x) (∧-map B B' C C' g h $_) (gluel b)) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (λ y → proj (pt A) y) (gluel b)) (&apα-gluel-proj (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (gluel (pt A)) (gluel (pt A)) (ap (λ y → proj (pt A) y) (gluel (pt B))) (ap (λ y → proj (pt A) y) (gluel b))) (ap² (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α.gluel-β A B C (proj (pt A) b))) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α A B C $_) (gluel (proj (pt A) b))) (ap+ (λ x → gluer (proj x (pt C'))) (ptf g)) (ap+ (λ x → ap (λ x1 → proj x1 (proj x (pt C'))) (ptf f)) (ptf g)) (ap-cst (proj (f $ (pt A)) basel) (ptf g)) (ap-cst (proj (pt A') basel) (ptf g)) (ap+-cst (ap (λ x → proj x basel) (ptf f)) (ptf g)) (ap+-cst (gluer basel) (ptf g)) (ap+-idp (λ x → baser) (ptf g)) (ap++ (λ x → ap-cst baser (gluel x)) (ptf g)) (ap++ (λ x → ap+ (λ z → gluer z) (gluel x)) (ptf g)) (ap++ (λ x → ap+ (λ z → ap (λ x → proj x z) (ptf f)) (gluel x)) (ptf g)) (ap-cst (proj (f $ (pt A)) baser) (ptf h)) (ap+ (λ x → gluer (proj (pt B') x)) (ptf h)) (ap+ (λ x → ap (λ x1 → proj x1 (proj (pt B') x)) (ptf f)) (ptf h)) (ap-cst (proj (pt A') baser) (ptf h)) (ap+-cst (ap (λ x → proj x baser) (ptf f)) (ptf h)) (ap+-cst (gluer baser) (ptf h)) (ap+-idp (λ x → baser) (ptf h)) (ap++ (λ x → ap-cst baser (gluer x)) (ptf h)) (ap++ (λ x → ap+ (λ y → gluer y) (gluer x)) (ptf h)) (ap++ (λ x → ap+ (λ y → ap (λ x → proj x y) (ptf f)) (gluer x)) (ptf h)) (ap+-cst (ap (λ x1 → baser) (ptf g)) (ptf h)) (ap++ (λ x → ap+ (λ x1 → gluer (proj x1 x)) (ptf g)) (ptf h)) (ap++ (λ x → ap+ (λ x1 → ap (λ x2 → proj x2 (proj x1 x)) (ptf f)) (ptf g)) (ptf h)) (ap-∘ (α A' B' C' $_) (λ y → proj (proj (pt A') (pt B')) y) (ptf h)) (&ap∧-map-gluel (α A' B' C' $_) (gluel (proj (pt A') (pt B'))) (gluel (proj (pt A') (pt B'))) (ap (λ y → proj (proj (pt A') (pt B')) y) (ptf h))) (ap² (α A' B' C' $_) (∧-map.gluel-β (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h baser)) (ap-∘ (α A' B' C' $_) (∧-map (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h $_) (gluel baser)) (ap² (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α.gluel-β A B C baser)) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α A B C $_) (gluel baser)) (α-proj.gluer-β A' B' C' (h $ (pt C)) (pt B')) (α-proj.gluer-β A' B' C' (h $ (pt C)) (g $ b)) (ap-∘ (α-proj A' B' C' (h $ (pt C)) $_) (λ x → proj x (g $ b)) (ptf f)) (&ap∧-map-gluer (α-proj A' B' C' (h $ (pt C)) $_) (gluer (pt B')) (gluer (g $ b)) (ap (λ x → proj x (g $ b)) (ptf f))) (ap² (α-proj A' B' C' (h $ (pt C)) $_) (∧-map.gluer-β A A' B B' f g b)) (ap-∘ (α-proj A' B' C' (h $ (pt C)) $_) (∧-map A A' B B' f g $_) (gluer b)) (∧-map.gluer-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) (proj (pt B) (pt C))) (∧-map.gluer-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) (proj b (pt C))) (&apα-proj-gluer (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (gluer (proj (pt B) (pt C))) (gluer (proj b (pt C)))) (ap² (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α-proj.gluer-β A B C (pt C) b)) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α-proj A B C (pt C) $_) (gluer b)) (α-nat-proj.gluer-β A A' B B' C C' f g h (pt C) b) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (gluer b)) (ap-cst (proj (f $ (pt A)) (proj (g $ (pt B)) (h $ (pt C)))) (gluer b)) (ap+-cst (&α-nat-basel ∣ (A' ∧ (B' ∧ C')) ∣ (gluer (proj (pt B') (pt C'))) (gluer (proj (g $ (pt B)) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ (pt C)))) (ptf f))) (gluer b)) (ap+-cst (ap (α A' B' C' $_) (gluel (proj (pt A') (pt B')))) (gluer b)) (α-proj.gluer-β A' B' C' (pt C') (pt B')) (α-proj.gluer-β A' B' C' (pt C') (g $ b)) (ap-∘ (α-proj A' B' C' (pt C') $_) (λ x → proj x (g $ b)) (ptf f)) (&ap∧-map-gluer (α-proj A' B' C' (pt C') $_) (gluer (pt B')) (gluer (g $ b)) (ap (λ x → proj x (g $ b)) (ptf f))) (ap² (α-proj A' B' C' (pt C') $_) (∧-map.gluer-β A A' B B' f g b)) (ap-∘ (α-proj A' B' C' (pt C') $_) (∧-map A A' B B' f g $_) (gluer b)) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (ap (∧-map A A' B B' f g $_) (gluer b))) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (&∧-map-gluer ∣ (A' ∧ B') ∣ (gluer (pt B')) (gluer (g $ b)) (ap (λ x → proj x (g $ b)) (ptf f)))) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (gluer (pt B'))) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (gluer (g $ b))) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (ap (λ x → proj x (g $ b)) (ptf f))) (α-gluel.gluer-β A' B' C' (pt B')) (α-gluel.gluer-β A' B' C' (g $ b)) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (ptf f)) (ap+-cst (gluel (pt A')) (ptf f)) (ap-sym (λ x → λ y → proj x y) (gluel (pt B')) (ptf f)) (ap-sym (λ x → λ y → proj x y) (gluel (g $ b)) (ptf f)) (ap/α-gluel-proj (ptf f) (λ x → gluel (pt A')) (λ x → gluel x) (λ x → ap (λ y → proj x y) (gluel (pt B'))) (λ x → ap (λ y → proj x y) (gluel (g $ b)))) (ap-∘-cst2 (proj (pt A') (proj (pt B') (pt C'))) (λ x → proj x (g $ b)) (ptf f)) (ap+-∘2 (α-gluel A' B' C') (λ x → proj x (g $ b)) (ptf f)) (&ap∧-map-gluer-cst (proj (pt A') (proj (pt B') (pt C'))) (gluer (pt B')) (gluer (g $ b)) (ap (λ x → proj x (g $ b)) (ptf f))) (ap+∧-map-gluer (α-gluel A' B' C') (gluer (pt B')) (gluer (g $ b)) (ap (λ x → proj x (g $ b)) (ptf f))) (ap²-cst (proj (pt A') (proj (pt B') (pt C'))) (∧-map.gluer-β A A' B B' f g b)) (ap²+ (α-gluel A' B' C') (∧-map.gluer-β A A' B B' f g b)) (ap-∘-cst2 (proj (pt A') (proj (pt B') (pt C'))) (∧-map A A' B B' f g $_) (gluer b)) (ap+-∘2 (α-gluel A' B' C') (∧-map A A' B B' f g $_) (gluer b)) (ap+-idp (λ x → α-proj A' B' C' (pt C') $ (∧-map A A' B B' f g $ x)) (gluer b)) (ap+-idp (λ x → proj (pt A') (proj (pt B') (pt C'))) (gluer b)) (ap++ (λ x → α.gluel-β A' B' C' (∧-map A A' B B' f g $ x)) (gluer b)) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (ptf h)) (ap+-cst (gluer (proj (pt B') (pt C'))) (ptf h)) (ap/α-proj-gluer (ptf h) (λ y → gluer (proj (pt B') (pt C'))) (λ y → gluer (proj (pt B') y))) (ap+-idp (λ y → proj (pt A') (proj (pt B') y)) (ptf h)) (ap+-idp (λ y → proj (pt A') (proj (pt B') (pt C'))) (ptf h)) (ap++ (λ y → α-proj.gluer-β A' B' C' y (pt B')) (ptf h)) (ap/α-proj-gluer (ptf h) (λ y → gluer (proj (pt B') (pt C'))) (λ y → gluer (proj (g $ b) y))) (ap+-idp (λ y → proj (pt A') (proj (g $ b) y)) (ptf h)) (ap++ (λ y → α-proj.gluer-β A' B' C' y (g $ b)) (ptf h)) (ap+-idp (λ y → proj (f $ (pt A)) (proj (g $ b) y)) (ptf h)) (ap++ (λ y → ap-∘ (α-proj A' B' C' y $_) (λ x → proj x (g $ b)) (ptf f)) (ptf h)) (ap/∧-map-gluer (ptf h) (λ y → ap (α-proj A' B' C' y $_) (gluer (pt B'))) (λ y → ap (α-proj A' B' C' y $_) (gluer (g $ b))) (λ y → ap (α-proj A' B' C' y $_) (ap (λ x → proj x (g $ b)) (ptf f)))) (ap++ (λ y → &ap∧-map-gluer (α-proj A' B' C' y $_) (gluer (pt B')) (gluer (g $ b)) (ap (λ x → proj x (g $ b)) (ptf f))) (ptf h)) (ap++ (λ y → ap² (α-proj A' B' C' y $_) (∧-map.gluer-β A A' B B' f g b)) (ptf h)) (ap++ (λ y → ap-∘ (α-proj A' B' C' y $_) (∧-map A A' B B' f g $_) (gluer b)) (ptf h)) (ap-sym (λ x → λ x1 → α-proj A' B' C' x1 $ (∧-map A A' B B' f g $ x)) (ptf h) (gluer b)) (ap+-idp (λ x → α-proj A' B' C' (h $ (pt C)) $ (∧-map A A' B B' f g $ x)) (gluer b)) (ap++ (λ x → ap-∘ (α A' B' C' $_) (λ y → proj (∧-map A A' B B' f g $ x) y) (ptf h)) (gluer b)) (ap/∧-map-gluel (gluer b) (λ x → ap (α A' B' C' $_) (gluel (proj (pt A') (pt B')))) (λ x → ap (α A' B' C' $_) (gluel (∧-map A A' B B' f g $ x))) (λ x → ap (α A' B' C' $_) (ap (λ y → proj (∧-map A A' B B' f g $ x) y) (ptf h)))) (ap++ (λ x → &ap∧-map-gluel (α A' B' C' $_) (gluel (proj (pt A') (pt B'))) (gluel (∧-map A A' B B' f g $ x)) (ap (λ y → proj (∧-map A A' B B' f g $ x) y) (ptf h))) (gluer b)) (ap++ (λ x → ap² (α A' B' C' $_) (∧-map.gluel-β (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h x)) (gluer b)) (ap++ (λ x → ap-∘ (α A' B' C' $_) (∧-map (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h $_) (gluel x)) (gluer b)) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (λ x → proj (pt A) (proj (pt B) (pt C))) (gluer b)) (∧-map.gluer-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) basel) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (gluel (pt B))) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (λ y → baser) (gluel (pt B))) (ap-∘-cst (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) baser (gluel (pt B))) (ap-cst baser (gluel (pt B))) (ap+-cst (gluer (proj (pt B') (pt C'))) (gluel (pt B))) (ap-∘ (λ z → proj (pt A') z) (λ y → proj (g $ (pt B)) y) (ptf h)) (&ap∧-map-gluel (λ y → proj (pt A') y) (gluel (pt B')) (gluel (g $ (pt B))) (ap (λ y → proj (g $ (pt B)) y) (ptf h))) (ap² (λ y → proj (pt A') y) (∧-map.gluel-β B B' C C' g h (pt B))) (ap-∘ (λ y → proj (pt A') y) (∧-map B B' C C' g h $_) (gluel (pt B))) (ap-cst baser (ap (∧-map B B' C C' g h $_) (gluel (pt B)))) (ap-cst baser (&∧-map-gluel ∣ (B' ∧ C') ∣ (gluel (pt B')) (gluel (g $ (pt B))) (ap (λ y → proj (g $ (pt B)) y) (ptf h)))) (ap-cst baser (ap (λ y → proj (g $ (pt B)) y) (ptf h))) (ap-∘-cst2 baser (λ y → proj (g $ (pt B)) y) (ptf h)) (ap+-∘2 (λ y → gluer y) (λ y → proj (g $ (pt B)) y) (ptf h)) (&ap∧-map-gluel-cst baser (gluel (pt B')) (gluel (g $ (pt B))) (ap (λ y → proj (g $ (pt B)) y) (ptf h))) (ap+∧-map-gluel (λ y → gluer y) (gluel (pt B')) (gluel (g $ (pt B))) (ap (λ y → proj (g $ (pt B)) y) (ptf h))) (ap²-cst baser (∧-map.gluel-β B B' C C' g h (pt B))) (ap²+ (λ y → gluer y) (∧-map.gluel-β B B' C C' g h (pt B))) (ap-∘-cst2 baser (∧-map B B' C C' g h $_) (gluel (pt B))) (ap+-∘2 (λ y → gluer y) (∧-map B B' C C' g h $_) (gluel (pt B))) (ap-sym (λ y → λ x → proj y (proj x (pt C'))) (ptf g) (ptf f)) (ap+-idp (λ y → proj y basel) (ptf f)) (ap++ (λ y → ap-cst (proj y basel) (ptf g)) (ptf f)) (ap++ (λ y → ap+ (λ x → ap (λ z → proj y z) (gluel x)) (ptf g)) (ptf f)) (ap-sym (λ y → λ x → proj y (proj (g $ (pt B)) x)) (ptf h) (ptf f)) (ap+-idp (λ y → proj y (proj (g $ (pt B)) (h $ (pt C)))) (ptf f)) (ap+-idp (λ y → proj y (proj (g $ (pt B)) (pt C'))) (ptf f)) (ap++ (λ y → ap-∘ (λ z → proj y z) (λ y → proj (g $ (pt B)) y) (ptf h)) (ptf f)) (ap/∧-map-gluel (ptf f) (λ y → ap (λ z → proj y z) (gluel (pt B'))) (λ y → ap (λ z → proj y z) (gluel (g $ (pt B)))) (λ y → ap (λ z → proj y z) (ap (λ y → proj (g $ (pt B)) y) (ptf h)))) (ap+-idp (λ y → proj y (proj (pt B') (pt C'))) (ptf f)) (ap++ (λ y → &ap∧-map-gluel (λ x → proj y x) (gluel (pt B')) (gluel (g $ (pt B))) (ap (λ y → proj (g $ (pt B)) y) (ptf h))) (ptf f)) (ap++ (λ y → ap² (λ x → proj y x) (∧-map.gluel-β B B' C C' g h (pt B))) (ptf f)) (ap++ (λ y → ap-∘ (λ x → proj y x) (∧-map B B' C C' g h $_) (gluel (pt B))) (ptf f)) (ap-sym (λ y → λ x → proj x (∧-map B B' C C' g h $ y)) (ptf f) (gluel (pt B))) (ap/∧-map-gluer (gluel (pt B)) (λ y → gluer (proj (pt B') (pt C'))) (λ y → gluer (∧-map B B' C C' g h $ y)) (λ y → ap (λ x → proj x (∧-map B B' C C' g h $ y)) (ptf f))) (ap+-idp (λ y → proj (f $ (pt A)) (∧-map B B' C C' g h $ y)) (gluel (pt B))) (ap+-idp (λ y → proj (pt A') (proj (pt B') (pt C'))) (gluel (pt B))) (ap++ (λ y → ∧-map.gluer-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) y) (gluel (pt B))) (ap+-∘1 (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (λ y → gluer y) (gluel (pt B))) (ap-cst (proj (pt A') (proj (pt B') (pt C'))) (gluel b)) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (λ y → baser) (gluel b)) (ap-∘-cst (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) baser (gluel b)) (ap-cst baser (gluel b)) (ap+-cst (gluer (proj (pt B') (pt C'))) (gluel b)) (ap-∘ (λ z → proj (pt A') z) (λ y → proj (g $ b) y) (ptf h)) (&ap∧-map-gluel (λ y → proj (pt A') y) (gluel (pt B')) (gluel (g $ b)) (ap (λ y → proj (g $ b) y) (ptf h))) (ap² (λ y → proj (pt A') y) (∧-map.gluel-β B B' C C' g h b)) (ap-∘ (λ y → proj (pt A') y) (∧-map B B' C C' g h $_) (gluel b)) (ap-cst baser (ap (∧-map B B' C C' g h $_) (gluel b))) (ap-cst baser (&∧-map-gluel ∣ (B' ∧ C') ∣ (gluel (pt B')) (gluel (g $ b)) (ap (λ y → proj (g $ b) y) (ptf h)))) (ap-cst baser (ap (λ y → proj (g $ b) y) (ptf h))) (ap-∘-cst2 baser (λ y → proj (g $ b) y) (ptf h)) (ap+-∘2 (λ y → gluer y) (λ y → proj (g $ b) y) (ptf h)) (&ap∧-map-gluel-cst baser (gluel (pt B')) (gluel (g $ b)) (ap (λ y → proj (g $ b) y) (ptf h))) (ap+∧-map-gluel (λ y → gluer y) (gluel (pt B')) (gluel (g $ b)) (ap (λ y → proj (g $ b) y) (ptf h))) (ap²-cst baser (∧-map.gluel-β B B' C C' g h b)) (ap²+ (λ y → gluer y) (∧-map.gluel-β B B' C C' g h b)) (ap-∘-cst2 baser (∧-map B B' C C' g h $_) (gluel b)) (ap+-∘2 (λ y → gluer y) (∧-map B B' C C' g h $_) (gluel b)) (ap-sym (λ y → λ x → proj y (proj (g $ b) x)) (ptf h) (ptf f)) (ap+-idp (λ y → proj y (proj (g $ b) (h $ (pt C)))) (ptf f)) (ap+-idp (λ y → proj y (proj (g $ b) (pt C'))) (ptf f)) (ap++ (λ y → ap-∘ (λ z → proj y z) (λ y → proj (g $ b) y) (ptf h)) (ptf f)) (ap/∧-map-gluel (ptf f) (λ y → ap (λ z → proj y z) (gluel (pt B'))) (λ y → ap (λ z → proj y z) (gluel (g $ b))) (λ y → ap (λ z → proj y z) (ap (λ y → proj (g $ b) y) (ptf h)))) (ap++ (λ y → &ap∧-map-gluel (λ x → proj y x) (gluel (pt B')) (gluel (g $ b)) (ap (λ y → proj (g $ b) y) (ptf h))) (ptf f)) (ap++ (λ y → ap² (λ x → proj y x) (∧-map.gluel-β B B' C C' g h b)) (ptf f)) (ap++ (λ y → ap-∘ (λ x → proj y x) (∧-map B B' C C' g h $_) (gluel b)) (ptf f)) (ap-sym (λ y → λ x → proj x (∧-map B B' C C' g h $ y)) (ptf f) (gluel b)) (ap/∧-map-gluer (gluel b) (λ y → gluer (proj (pt B') (pt C'))) (λ y → gluer (∧-map B B' C C' g h $ y)) (λ y → ap (λ x → proj x (∧-map B B' C C' g h $ y)) (ptf f))) (ap+-idp (λ y → proj (f $ (pt A)) (∧-map B B' C C' g h $ y)) (gluel b)) (ap+-idp (λ y → proj (pt A') (proj (pt B') (pt C'))) (gluel b)) (ap++ (λ y → ∧-map.gluer-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) y) (gluel b)) (ap+-∘1 (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (λ y → gluer y) (gluel b)) (ap-∘-cst (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (proj (pt A) (proj (pt B) (pt C))) (gluer b)) (&apα-gluel-gluer (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (gluer (proj (pt B) (pt C))) (gluer (proj b (pt C))) (gluel (pt A)) (gluer basel) (ap-cst baser (gluel (pt B))) (ap+ (λ y → gluer y) (gluel (pt B))) (ap-cst baser (gluel b)) (ap+ (λ y → gluer y) (gluel b)) (α-proj.gluer-β A B C (pt C) b) (ap-cst (proj (pt A) (proj (pt B) (pt C))) (gluer b))) (&aphids (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (&α-gluel-proj ∣ (A ∧ (B ∧ C)) ∣ (gluel (pt A)) (gluel (pt A)) (ap (λ y → proj (pt A) y) (gluel (pt B))) (ap (λ y → proj (pt A) y) (gluel b)))) (&aphids (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (ap (α-proj A B C (pt C) $_) (gluer b))) (&aphids (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (ap (λ x → proj (pt A) (proj (pt B) (pt C))) (gluer b))) (ap³ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α-gluel.gluer-β A B C b)) (ap+-∘1 (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α-gluel A B C) (gluer b)) (ap+-idp (λ x → ∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $ (α-proj A B C (pt C) $ x)) (gluer b)) (ap+-idp (λ x → proj (f $ (pt A)) (proj (g $ (pt B)) (h $ (pt C)))) (gluer b)) (ap++ (λ x → ap² (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α.gluel-β A B C x)) (gluer b)) (ap++ (λ x → ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α A B C $_) (gluel x)) (gluer b))))


&α-nat-baser : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → a == x2
&α-nat-baser X idp idp idp = idp

&apα-nat-baser : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Square (ap f (&α-nat-baser X p0 p1 p2)) (&α-nat-baser Y (ap f p0) (ap f p1) (ap f p2)) idp idp
&apα-nat-baser f idp idp idp = ids

&α-nat-baser□ : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square up0 vp0 a x0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square up1 vp1 x1 x0) {ux2 : X} {up2 : ux2 == ux1} {vx2 : X} {vp2 : vx2 == vx1} {x2 : ux2 == vx2} (p2 : Square up2 vp2 x2 x1) → Square (&α-nat-baser X up0 up1 up2) (&α-nat-baser X vp0 vp1 vp2) a x2
&α-nat-baser□ X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap/α-nat-baser : {X : Type i} {Y : Type i} {y : X} {z : X} (r : y == z) {a : X → Y} {x0 : X → Y} (p0 : (x : X) → a x == x0 x) {x1 : X → Y} (p1 : (x : X) → x1 x == x0 x) {x2 : X → Y} (p2 : (x : X) → x2 x == x1 x) → Cube (ap+ (λ x → &α-nat-baser Y (p0 x) (p1 x) (p2 x)) r) (&α-nat-baser□ Y (ap+ p0 r) (ap+ p1 r) (ap+ p2 r)) (&hids (&α-nat-baser Y (p0 y) (p1 y) (p2 y))) (&hids (&α-nat-baser Y (p0 z) (p1 z) (p2 z))) (&hids (ap a r)) (&hids (ap x2 r))
ap/α-nat-baser {Y = Y} {y = y} idp p0 p1 p2 = &ap/α-nat-baser-lemma Y (p0 y) (p1 y) (p2 y)  where
  &ap/α-nat-baser-lemma : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (&hids (&α-nat-baser X p0 p1 p2)) (&α-nat-baser□ X (&hids p0) (&hids p1) (&hids p2)) (&hids (&α-nat-baser X p0 p1 p2)) (&hids (&α-nat-baser X p0 p1 p2)) ids ids
  &ap/α-nat-baser-lemma X idp idp idp = idc

&α-nat-baser□' : (X : Type i) {ua : X} {va : X} {a : ua == va} {ux0 : X} {up0 : ua == ux0} {vx0 : X} {vp0 : va == vx0} {x0 : ux0 == vx0} (p0 : Square a x0 up0 vp0) {ux1 : X} {up1 : ux1 == ux0} {vx1 : X} {vp1 : vx1 == vx0} {x1 : ux1 == vx1} (p1 : Square x1 x0 up1 vp1) {ux2 : X} {up2 : ux2 == ux1} {vx2 : X} {vp2 : vx2 == vx1} {x2 : ux2 == vx2} (p2 : Square x2 x1 up2 vp2) → Square a x2 (&α-nat-baser X up0 up1 up2) (&α-nat-baser X vp0 vp1 vp2)
&α-nat-baser□' X {a = idp} {up0 = idp} {vp0 = idp} ids {up1 = idp} {vp1 = idp} ids {up2 = idp} {vp2 = idp} ids = ids

ap+α-nat-baser : {X : Type i} {Y : Type i} {f : X → Y} {g : X → Y} (α : (x : X) → f x == g x) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (ap+ α (&α-nat-baser X p0 p1 p2)) (&α-nat-baser□' Y (ap+ α p0) (ap+ α p1) (ap+ α p2)) (&hids (α a)) (&hids (α x2)) (&apα-nat-baser f p0 p1 p2) (&apα-nat-baser g p0 p1 p2)
ap+α-nat-baser α {a = a} idp idp idp = ap+α-nat-baser-lemma (α a)  where
  ap+α-nat-baser-lemma : {X : Type i} {a b : X} (p : a == b) → Cube (&hids p) (&α-nat-baser□' X (&hids p) (&hids p) (&hids p)) (&hids p) (&hids p) ids ids
  ap+α-nat-baser-lemma idp = idc

&apα-nat-baser-cst : {X : Type i} {Y : Type i} (y : Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) → Cube (&apα-nat-baser (λ _ → y) p0 p1 p2) ids (ap-cst y (&α-nat-baser X p0 p1 p2)) (&α-nat-baser□ Y (ap-cst y p0) (ap-cst y p1) (ap-cst y p2)) ids ids
&apα-nat-baser-cst y idp idp idp = idc
&α-nat-gluer : (X : Type i) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) {x3 : X} (p3 : x3 == x0) {x4 : X} (p4 : x4 == x3) {x5 : a == a} (p5 : Square x5 (&α-gluer X p0 p0) idp idp) {x6 : X} (p6 : x6 == x0) {x7 : x6 == a} (p7 : Square x7 (&α-gluer X p0 p6) idp idp) {x8 : x6 == a} (p8 : Square x8 (&α-proj-gluer X p0 p6) idp idp) {x9 : x1 == a} (p9 : Square x9 (&α-proj-gluer X p0 p1) idp idp) {x10 : x2 == x1} (p10 : Square p2 x10 idp idp) {x11 : x2 == x6} (p11 : Square x11 (&∧-map-pt X x8 x9 x10) idp idp) {x12 : x2 == x6} (p12 : Square x11 x12 idp idp) {x13 : x2 == a} (p13 : Square x13 (&∧-map-gluer X x5 x7 x12) idp idp) {x14 : x2 == a} (p14 : Square x14 x13 idp idp) {x15 : x2 == a} (p15 : Square x15 x14 idp idp) {x16 : x4 == a} (p16 : Square x16 (&∧-map-gluer X p0 p3 p4) idp idp) {x17 : x2 == a} (p17 : Square x17 (&∧-map-gluer X p0 p1 p2) idp idp) {x18 : x2 == x4} (p18 : Square x18 (&α-gluer X x16 x17) idp idp) {x19 : x2 == x4} (p19 : Square x19 x18 idp idp) {x20 : x2 == x4} (p20 : Square x20 x19 idp idp) → Square idp (&α-nat-baser X p0 p3 p4) x15 x20
&α-nat-gluer X idp idp idp idp idp ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids = ids

&apα-nat-gluer : {X : Type i} {Y : Type i} (f : X → Y) {a : X} {x0 : X} (p0 : a == x0) {x1 : X} (p1 : x1 == x0) {x2 : X} (p2 : x2 == x1) {x3 : X} (p3 : x3 == x0) {x4 : X} (p4 : x4 == x3) {x5 : a == a} (p5 : Square x5 (&α-gluer X p0 p0) idp idp) {x6 : X} (p6 : x6 == x0) {x7 : x6 == a} (p7 : Square x7 (&α-gluer X p0 p6) idp idp) {x8 : x6 == a} (p8 : Square x8 (&α-proj-gluer X p0 p6) idp idp) {x9 : x1 == a} (p9 : Square x9 (&α-proj-gluer X p0 p1) idp idp) {x10 : x2 == x1} (p10 : Square p2 x10 idp idp) {x11 : x2 == x6} (p11 : Square x11 (&∧-map-pt X x8 x9 x10) idp idp) {x12 : x2 == x6} (p12 : Square x11 x12 idp idp) {x13 : x2 == a} (p13 : Square x13 (&∧-map-gluer X x5 x7 x12) idp idp) {x14 : x2 == a} (p14 : Square x14 x13 idp idp) {x15 : x2 == a} (p15 : Square x15 x14 idp idp) {x16 : x4 == a} (p16 : Square x16 (&∧-map-gluer X p0 p3 p4) idp idp) {x17 : x2 == a} (p17 : Square x17 (&∧-map-gluer X p0 p1 p2) idp idp) {x18 : x2 == x4} (p18 : Square x18 (&α-gluer X x16 x17) idp idp) {x19 : x2 == x4} (p19 : Square x19 x18 idp idp) {x20 : x2 == x4} (p20 : Square x20 x19 idp idp) → Cube (ap² f (&α-nat-gluer X p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 p18 p19 p20)) (&α-nat-gluer Y (ap f p0) (ap f p1) (ap f p2) (ap f p3) (ap f p4) (&coh∙□ (ap² f p5) (&apα-gluer f p0 p0)) (ap f p6) (&coh∙□ (ap² f p7) (&apα-gluer f p0 p6)) (&coh∙□ (ap² f p8) (&apα-proj-gluer f p0 p6)) (&coh∙□ (ap² f p9) (&apα-proj-gluer f p0 p1)) (ap² f p10) (&coh∙□ (ap² f p11) (&ap∧-map-pt f x8 x9 x10)) (ap² f p12) (&coh∙□ (ap² f p13) (&ap∧-map-gluer f x5 x7 x12)) (ap² f p14) (ap² f p15) (&coh∙□ (ap² f p16) (&ap∧-map-gluer f p0 p3 p4)) (&coh∙□ (ap² f p17) (&ap∧-map-gluer f p0 p1 p2)) (&coh∙□ (ap² f p18) (&apα-gluer f x16 x17)) (ap² f p19) (ap² f p20)) ids (&apα-nat-baser f p0 p3 p4) (&hids (ap f x15)) (&hids (ap f x20))
&apα-nat-gluer f idp idp idp idp idp ids idp ids ids ids ids ids ids ids ids ids ids ids ids ids ids = idc

α-nat : (A : Ptd i) (A' : Ptd i) (B : Ptd i) (B' : Ptd i) (C : Ptd i) (C' : Ptd i) (f : PtdMap A A') (g : PtdMap B B') (h : PtdMap C C') (x : ∣ (A ∧ B) ∧ C ∣) → α A' B' C' $ (∧-map (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h $ x) == ∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $ (α A B C $ x)
α-nat A A' B B' C C' f g h = α-nat.f  module _ where

  module α-nat =
    SmashElimId {g = λ x → α A' B' C' $ (∧-map (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h $ x)}
                {h = λ x → ∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $ (α A B C $ x)}
                (λ x c → α-nat-proj A A' B B' C C' f g h c x)
                (&α-nat-basel ∣ (A' ∧ (B' ∧ C')) ∣ (gluer (proj (pt B') (pt C'))) (gluer (proj (g $ (pt B)) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ (pt C)))) (ptf f)))
                (α-nat-gluel A A' B B' C C' f g h)
                (&α-nat-baser ∣ (A' ∧ (B' ∧ C')) ∣ (gluer (proj (pt B') (pt C'))) (gluer (proj (g $ (pt B)) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ (pt C)))) (ptf f)))
                (λ c → &α-nat-gluer ∣ (A' ∧ (B' ∧ C')) ∣ (gluer (proj (pt B') (pt C'))) (gluer (proj (g $ (pt B)) (h $ c))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ c))) (ptf f)) (gluer (proj (g $ (pt B)) (h $ (pt C)))) (ap (λ x → proj x (proj (g $ (pt B)) (h $ (pt C)))) (ptf f)) (α.gluer-β A' B' C' (pt C')) (gluer (proj (pt B') (h $ c))) (α.gluer-β A' B' C' (h $ c)) (α-proj.gluer-β A' B' C' (h $ c) (pt B')) (α-proj.gluer-β A' B' C' (h $ c) (g $ (pt B))) (ap-∘ (α-proj A' B' C' (h $ c) $_) (λ x → proj x (g $ (pt B))) (ptf f)) (&ap∧-map-pt (α-proj A' B' C' (h $ c) $_) (gluer (pt B')) (gluer (g $ (pt B))) (ap (λ x → proj x (g $ (pt B))) (ptf f))) (ap-∘ (α A' B' C' $_) (λ x → proj x (h $ c)) (&∧-map-pt ∣ (A' ∧ B') ∣ (gluer (pt B')) (gluer (g $ (pt B))) (ap (λ x → proj x (g $ (pt B))) (ptf f)))) (&ap∧-map-gluer (α A' B' C' $_) (gluer (pt C')) (gluer (h $ c)) (ap (λ x → proj x (h $ c)) (&∧-map-pt ∣ (A' ∧ B') ∣ (gluer (pt B')) (gluer (g $ (pt B))) (ap (λ x → proj x (g $ (pt B))) (ptf f))))) (ap² (α A' B' C' $_) (∧-map.gluer-β (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h c)) (ap-∘ (α A' B' C' $_) (∧-map (A ∧ B) (A' ∧ B') C C' (∧-map A A' B B' f g) h $_) (gluer c)) (∧-map.gluer-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) (proj (pt B) (pt C))) (∧-map.gluer-β A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) (proj (pt B) c)) (&apα-gluer (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (gluer (proj (pt B) (pt C))) (gluer (proj (pt B) c))) (ap² (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α.gluer-β A B C c)) (ap-∘ (∧-map A A' (B ∧ C) (B' ∧ C') f (∧-map B B' C C' g h) $_) (α A B C $_) (gluer c)))
